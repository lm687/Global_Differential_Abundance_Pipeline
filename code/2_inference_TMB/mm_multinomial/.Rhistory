png("~/Desktop/sort out/clareity/ccf.png", width=4, height=4, units = "in", res=100)
hist(x, breaks=60, xlab='Fraction of cancer cells with this mutation', ylab='Number of mutations in bin', main='')
dev.off()
png("~/Desktop/sort out/clareity/ccf.png", width=4, height=3, units = "in", res=100)
hist(x, breaks=60, xlab='Fraction of cancer cells with this mutation', ylab='Number of mutations in bin', main='')
dev.off()
png("~/Desktop/sort out/clareity/ccf.png", width=4, height=4, units = "in", res=100)
hist(x, breaks=60, xlab='Fraction of cancer cells with this mutation', ylab='Number of mutations in bin', main='')
dev.off()
dmultinom(c(2,4,7), c(2,4,7)/sum(c(2,4,7)))
dmultinom(c(2,4,7), prob = c(2,4,7)/sum(c(2,4,7)))
dmultinom(c(2,4,7)*10, prob = c(2,4,7)/sum(c(2,4,7)))
dmultinom(c(2,4,7)*40, prob = c(2,4,7)/sum(c(2,4,7)))
dmultinom(c(2,4,7)*100, prob = c(2,4,7)/sum(c(2,4,7)))
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
TMB::compile("fullRE_ME_multinomial.cpp", "-std=gnu++17")
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 10 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
W
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
createBarplot(W[1:n,])
W[1:n,]
give_dummy_colnames = function(i)
{
colnames(i) = psate0('col', 1:ncol(i))
i
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
createBarplot(give_dummy_colnames([1:n,]))
createBarplot(give_dummy_colnames(W[1:n,]))
createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])))
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])))
createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])))
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,]))),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),]))))
library(gridExtra)
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,]))),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),]))))
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), order_labels = TRUE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])),order_labels = TRUE))
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE))
pdf("~/Desktop/sort out/clareity/DA1.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE))
dev.off()
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE))
pdf("~/Desktop/sort out/clareity/DA1.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
library(gridExtra)
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
# set.seed(1245)
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
# beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
pdf("~/Desktop/sort out/clareity/nonDA1.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
library(gridExtra)
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
# set.seed(1245)
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
# beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
pdf("~/Desktop/sort out/clareity/nonDA0.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
u
dim(u)
n
u = matrix(0, nrow=n, ncol=d-1)
u
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
library(gridExtra)
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
# set.seed(1245)
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
u = matrix(0, nrow=n, ncol=d-1)
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
pdf("~/Desktop/sort out/clareity/DA2.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
#-------------------------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(parallel) ## mclapply
library(latex2exp)
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales) ## for alpha transparency in plots
source("helper_functions.R")
source("../../2_inference_TMB/helper_TMB.R")
set.seed(1245)
#-------------------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------------------------#
# How does this problem depend on the number of categories?
set.seed(1345)
d_its = 2:5
results_inference_multivariate_zerosslope_d = sapply(d_its, function(d_it) replicate(100, replicate_inference_complex(n = 100, d = d_it,
betashape_intersect = 1,
betashape_slope = 0, nreplicas = 2)))
#-------------------------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(parallel) ## mclapply
library(latex2exp)
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales) ## for alpha transparency in plots
source("helper_functions.R")
source("../../2_inference_TMB/helper_TMB.R")
set.seed(1245)
#-------------------------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------------------------#
set.seed(234)
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
compile("FE_multinomial.cpp", "-std=gnu++17")
# compile("sea.cpp", "-std=gnu++17")
dyn.load(dynlib("FE_multinomial"))
# set.seed(123)
give_data_and_parameters = function(n, d){
beta = rbind(rgamma(d-1, 1, 1),rgamma(d-1, 6, 2))
# beta = rbind(rgamma(d-1, 1, 1), 0)
# beta[2,d-1] = 0 ## this is set to zero as it is redundant. It is not redundant!
x = cbind(1, sample(c(0,1), n, replace = TRUE))
# x = cbind(1, sample(c(0), n, replace = TRUE))
# x = x[order(x[,2]),]
true_theta = softmax(cbind(x %*% beta + matrix(rnorm(n*(d-1), mean = 0, sd=0.1), ncol=(d-1)), 0))
# image(t(true_theta))
# pheatmap::pheatmap(true_theta)
data <- list(Y = t(apply(true_theta, 1, function(p) rmultinom(1, 300, p))), n=n, d=d, x=x)
# dev.off(); image(t(data$Y))
return(list(data=data, true_theta=true_theta, beta=beta, x=x))
}
give_data_and_parameters_complex = function(n, d, betashape_intersect, betashape_slope){
## slightly more complicated version of give_data_and_parameters
beta = rbind(rgamma(n = d-1, shape = betashape_intersect, rate = betashape_intersect),
rgamma(n = d-1, shape = betashape_slope, rate = betashape_slope))
x = cbind(1, sample(c(0,1), n, replace = TRUE))
true_theta = softmax(cbind(x %*% beta + matrix(rnorm(n*(d-1), mean = 0, sd=0.1), ncol=(d-1)), 0))
data <- list(Y = t(apply(true_theta, 1, function(p) rmultinom(1, 300, p))), n=n, d=d, x=x)
return(list(data=data, true_theta=true_theta, beta=beta, x=x))
}
give_data_and_parameters_give_coefs = function(matrix_beta, matrix_x){
true_theta = softmax(cbind(x %*% beta + matrix(rnorm(n*(d-1), mean = 0, sd=0.1), ncol=(d-1)), 0))
data <- list(Y = t(apply(true_theta, 1, function(p) rmultinom(1, 300, p))), n=n, d=d, x=x)
return(list(data=data, true_theta=true_theta, beta=beta, x=x))
}
inference_random_start = function(bool_identical_initial_beta, d, data, x, true_beta){
if(bool_identical_initial_beta){
parameters <- list( beta = array(rep(runif(1, min = -4, max = 4), 2*(d-1)), dim = c(2,d-1)) )
}else{
parameters <- list(
# beta = array(rbind(rep(1,d-1), rep(NA,d-1)), dim = c(2,d-1))
# beta = array(rep(runif(1, min = -4, max = 4), 2*(d-1)), dim = c(2,d-1))
beta = array(c(rep(runif(1, min = -4, max = 4), (d-1)),
rep(runif(1, min = -4, max = 4), (d-1))),
dim = c(2,d-1))
)
}
obj <- MakeADFun(data, parameters, DLL="FE_multinomial")
obj$hessian <- TRUE
opt <- do.call("optim", obj)
opt
opt$hessian ## <-- FD hessian from optim
obj$he()    ## <-- Analytical hessian
sdreport(obj)
# betas_estimate = rbind(opt$par[grep('beta_intersect', names(opt$par))],
#                        c(opt$par[grep('beta_slope', names(opt$par))]))
betas_estimate = matrix(opt$par, nrow=2)
# betas_estimate
# parameters$beta
# beta
return(list(x=x, betas_estimate = matrix(opt$par, nrow=2),
true_beta = true_beta,
initial_beta = parameters$beta,
stderr = give_stderr(sdreport(obj))))
}
replicate_inference = function(n=100, d=2, nreplicas = 30){
simulated_data = give_data_and_parameters(n = n, d = d)
inference = c(replicate(nreplicas, inference_random_start(F, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE),
replicate(nreplicas, inference_random_start(T, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE))
return(inference)
}
replicate_inference_complex = function(n=100, d=2, nreplicas = 30, betashape_intersect, betashape_slope){
# wrapper for give_data_and_parameters_complex and its inference
simulated_data = give_data_and_parameters_complex(n = n, d = d, betashape_intersect, betashape_slope)
inference = c(replicate(nreplicas, inference_random_start(F, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE),
replicate(nreplicas, inference_random_start(T, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE))
return(inference)
}
replicate_inference_varysinglecoef = function(n=100, d=2, nreplicas = 30, betashape_intersect, betashape_slope){
# wrapper for creating datasets and inferring parameters in which only one parameter varies
simulated_data = give_data_and_parameters_give_coefs(n = n, d = d, betashape_intersect, betashape_slope)
inference = c(replicate(nreplicas, inference_random_start(F, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE),
replicate(nreplicas, inference_random_start(T, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE))
return(inference)
}
create_plot = function(n=100, d=2, simulated_data=NULL){
if(is.null(simulated_data)){
## if no simulated data is provided, I generate random data here
simulated_data = give_data_and_parameters(n = n, d = d)
}
nreplicas = 30
inference = c(replicate(nreplicas, inference_random_start(F, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE),
replicate(nreplicas, inference_random_start(T, d = d, data = simulated_data$data, x=simulated_data$x, true_beta=simulated_data$beta), simplify = FALSE))
lims = lapply(1:2, function(beta_idx) sapply(list(c(sapply(inference, function(i) i$betas_estimate)[beta_idx,],
sapply(inference, function(i) i$initial_beta)[beta_idx,],
sapply(inference, function(i) i$true_beta)[beta_idx,])), function(j) c(min(j), max(j))))
plot(t(sapply(inference, function(i) i$betas_estimate)), col=alpha(factor(rep(c(1,2), each=nreplicas)), 0.2),
pch='E', xlab='Beta intercept', ylab='Beta slope', xlim=lims[[1]], ylim=lims[[2]])
points(t(sapply(inference, function(i) i$initial_beta)), col=alpha(factor(rep(c(1,2), each=nreplicas)), 0.2), pch=1, cex=0.5)
points(t(sapply(inference, function(i) i$true_beta)), col='blue', pch='T')
return(inference)
}
#-------------------------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(parallel) ## mclapply
library(latex2exp)
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales) ## for alpha transparency in plots
source("helper_functions.R")
source("../../2_inference_TMB/helper_TMB.R")
set.seed(1245)
set.seed(234)
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
compile("FE_multinomial.cpp", "-std=gnu++17")
?pchisq
compile("FE_multinomial.cpp", "-std=gnu++17")
