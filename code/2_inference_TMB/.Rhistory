}else{
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[1],
vec_stderr=.summary_betas_slope_SP[2],
vec_true=minimal_change_baseline)
}
.params_in_ci <- sapply(1:length(.params_in_ci), function(i){
## for the ones in which there is a change, say whether it's up- or down-regulated
if(.params_in_ci[i]){
## if there is a change
if(!is.null(dim(.summary_betas_slope_SP))){
## one-dim
if(.summary_betas_slope_SP[1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}else{
## multi-dim
if(.summary_betas_slope_SP[i,1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}
}else{
'FALSE'
}
})
.params_in_ci
.params_in_ci[i]
i=1
.params_in_ci[i]
!is.null(dim(.summary_betas_slope_SP))
summary_betas_slope_SP[1]
.summary_betas_slope_SP
.summary_betas_slope_SP[1] > minimal_change_baseline
## for the ones in which there is a change, say whether it's up- or down-regulated
if(.params_in_ci[i]){
## if there is a change
if(!is.null(dim(.summary_betas_slope_SP))){
## one-dim
if(.summary_betas_slope_SP[1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}else{
## multi-dim
if(.summary_betas_slope_SP[i,1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}
}else{
'FALSE'
}
.params_in_ci[i]
!is.null(dim(.summary_betas_slope_SP))
.summary_betas_slope_SP
dim(.summary_betas_slope_SP
)
## for the ones in which there is a change, say whether it's up- or down-regulated
if(.params_in_ci[i]){
## if there is a change
if(is.null(dim(.summary_betas_slope_SP))){
## one-dim
if(.summary_betas_slope_SP[1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}else{
## multi-dim
if(.summary_betas_slope_SP[i,1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}
}else{
'FALSE'
}
perturbed_betas_diagRE_DMDL_nonexo_SP <- lapply(names(diagRE_DMDL_nonexo_SP), try(function(idx_sp){
cat(idx_sp, '\n')
.betas_SP <- data.frame(plot_betas(diagRE_DMDL_nonexo_SP[[idx_sp]], names_cats= logR_nonexo_notsorted_SP[[idx_sp]],
return_df=T, plot=F))
.slopes_minpert_SP <- .betas_SP %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
# print(.slopes_minpert_SP)
## check if the CI of the betas touches this median value
.summary_betas_slope_SP <- python_like_select_rownames(summary(diagRE_DMDL_nonexo_SP[[idx_sp]]), 'beta')[c(F,T),]
nrow(.summary_betas_slope_SP)
minimal_change_baseline <- median(c(.slopes_minpert, 0))
# print(.summary_betas_slope_SP)
# print(logR_nonexo_notsorted_SP[[idx_sp]])
# print(dim(.summary_betas_slope_SP))
if(!is.null(dim(.summary_betas_slope_SP))){
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[,1],
vec_stderr=.summary_betas_slope_SP[,2],
vec_true=rep(minimal_change_baseline, nrow(.summary_betas_slope_SP)))
}else{
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[1],
vec_stderr=.summary_betas_slope_SP[2],
vec_true=minimal_change_baseline)
}
.params_in_ci <- sapply(1:length(.params_in_ci), function(i){
## for the ones in which there is a change, say whether it's up- or down-regulated
if(.params_in_ci[i]){
## if there is a change
if(is.null(dim(.summary_betas_slope_SP))){
## one-dim
if(.summary_betas_slope_SP[1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}else{
## multi-dim
if(.summary_betas_slope_SP[i,1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}
}else{
'FALSE'
}
})
names(.params_in_ci) <- sapply(logR_nonexo_notsorted_SP[[idx_sp]], function(i) strsplit(i, '/')[[1]][1])
.baseline <- strsplit(logR_nonexo_notsorted_SP[[idx_sp]][[1]], '/')[[1]][2]
return(list(betas_perturbed=.params_in_ci, baseline=.baseline))
}))
perturbed_betas_diagRE_DMDL_nonexo_SP
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
system("open ../../results/results_TMB/pcawg/)
""
"
system("open ../../results/results_TMB/pcawg/")
give_params_in_CI
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[,1],
vec_stderr=.summary_betas_slope_SP[,2],
vec_true=rep(minimal_change_baseline, nrow(.summary_betas_slope_SP)))
give_confidence_interval
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[1],
vec_stderr=.summary_betas_slope_SP[2],
vec_true=minimal_change_baseline)
.params_in_ci
.summary_betas_slope_SP
.summary_betas_slope_SP[2]
idx_sp="CNS−Medullo"
cat(idx_sp, '\n')
.betas_SP <- data.frame(plot_betas(diagRE_DMDL_nonexo_SP[[idx_sp]], names_cats= logR_nonexo_notsorted_SP[[idx_sp]],
return_df=T, plot=F))
diagRE_DMDL_nonexo_SP$`CNS-Medullo`
idx_sp
idx_sp=:CNS-Medullo""
idx_sp="CNS-Medullo"
.betas_SP <- data.frame(plot_betas(diagRE_DMDL_nonexo_SP[[idx_sp]], names_cats= logR_nonexo_notsorted_SP[[idx_sp]],
return_df=T, plot=F))
.slopes_minpert_SP <- .betas_SP %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
# print(.slopes_minpert_SP)
## check if the CI of the betas touches this median value
.summary_betas_slope_SP <- python_like_select_rownames(summary(diagRE_DMDL_nonexo_SP[[idx_sp]]), 'beta')[c(F,T),]
nrow(.summary_betas_slope_SP)
minimal_change_baseline <- median(c(.slopes_minpert, 0))
minimal_change_baseline
c(.slopes_minpert, 0)
ct <- "Stomach−AdenoCA"
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
names(diagRE_DMDL_nonexo_SP)
ct <- "Stomach-AdenoCA"
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
print(aaa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')+ggtitle(ct)+labs(x='Log ratio of signatures')+
theme(strip.background = element_blank(), strip.text = element_blank()) )
idx_sp <- ct
idx_sp
cat(idx_sp, '\n')
.betas_SP <- data.frame(plot_betas(diagRE_DMDL_nonexo_SP[[idx_sp]], names_cats= logR_nonexo_notsorted_SP[[idx_sp]],
return_df=T, plot=F))
.slopes_minpert_SP <- .betas_SP %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
# print(.slopes_minpert_SP)
## check if the CI of the betas touches this median value
.summary_betas_slope_SP <- python_like_select_rownames(summary(diagRE_DMDL_nonexo_SP[[idx_sp]]), 'beta')[c(F,T),]
nrow(.summary_betas_slope_SP)
minimal_change_baseline <- median(c(.slopes_minpert_SP, 0))
# print(.summary_betas_slope_SP)
# print(logR_nonexo_notsorted_SP[[idx_sp]])
# print(dim(.summary_betas_slope_SP))
if(!is.null(dim(.summary_betas_slope_SP))){
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[,1],
vec_stderr=.summary_betas_slope_SP[,2]*1.96,
vec_true=rep(minimal_change_baseline, nrow(.summary_betas_slope_SP)))
}else{
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[1],
vec_stderr=.summary_betas_slope_SP[2]*1.96,
vec_true=minimal_change_baseline)
}
.params_in_ci <- sapply(1:length(.params_in_ci), function(i){
## for the ones in which there is a change, say whether it's up- or down-regulated
if(!.params_in_ci[i]){
## if there is a change: not in confidence interval
if(is.null(dim(.summary_betas_slope_SP))){
## one-dim
if(.summary_betas_slope_SP[1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}else{
## multi-dim
if(.summary_betas_slope_SP[i,1] > minimal_change_baseline){
'increase'
}else{
'decrease'
}
}
}else{
'FALSE'
}
})
names(.params_in_ci) <- sapply(logR_nonexo_notsorted_SP[[idx_sp]], function(i) strsplit(i, '/')[[1]][1])
.baseline <- strsplit(logR_nonexo_notsorted_SP[[idx_sp]][[1]], '/')[[1]][2]
.params_in_ci
.summary_betas_slope_SP[,2]*1.96
.summary_betas_slope_SP
minimal_change_baseline
median(c(.slopes_minpert, 0))
minimal_change_baseline
.params_in_ci
# print(.summary_betas_slope_SP)
# print(logR_nonexo_notsorted_SP[[idx_sp]])
# print(dim(.summary_betas_slope_SP))
if(!is.null(dim(.summary_betas_slope_SP))){
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[,1],
vec_stderr=.summary_betas_slope_SP[,2]*1.96,
vec_true=rep(minimal_change_baseline, nrow(.summary_betas_slope_SP)))
}else{
.params_in_ci <- give_params_in_CI(vec_est=.summary_betas_slope_SP[1],
vec_stderr=.summary_betas_slope_SP[2]*1.96,
vec_true=minimal_change_baseline)
}
.params_in_ci
.summary_betas_slope_SP[,2]*1.96
minimal_change_baseline
give_params_in_CI(vec_est=.summary_betas_slope_SP[9,1],
vec_stderr=.summary_betas_slope_SP[9,2]*1.96,
vec_true=rep(minimal_change_baseline, 1))
give_params_in_CI
diagRE_DMDL_nonexo_SP
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
print(aaa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')+ggtitle(ct)+labs(x='Log ratio of signatures')+
theme(strip.background = element_blank(), strip.text = element_blank()) )
}
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa[[1]]
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa[[1]]
lapply(aaa, function(i) cbind(i, gsub("/.*", "", i$LogR)))
lapply(aaa, function(i) cbind(i, gsub("/.*", "", numeratorLogR=i$LogR)))
lapply(aaa, function(i) cbind(i, numeratorLogR=gsub("/.*", "", i$LogR)))
aaa <- lapply(aaa, function(i) cbind(i, numeratorLogR=gsub("/.*", "", i$LogR)))
aaa <- lapply(names(aaa), function(i) cbind(aaa[i], ct=i))
aaa
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa <- lapply(aaa, function(i) cbind(i, numeratorLogR=gsub("/.*", "", i$LogR)))
aaa <- lapply(names(aaa), function(i) cbind(aaa[[i]], ct=i))
aaa
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa
aaa <- list()
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa
aaa <- lapply(aaa, function(i) gsub("/.*", "", i$LogR))
aaa
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa <- lapply(aaa, function(i) cbind(numerator_LogR = gsub("/.*", "", i$LogR)))
aaa
for(ct in names(diagRE_DMDL_nonexo_SP)){
.betas_ct_it <- data.frame(plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]],
names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- .betas_ct_it %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
aaa[[ct]] <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[[ct]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F, only_slope = T, line_zero=F, add_confint = T)
}
aaa <- lapply(aaa, function(i) cbind(i, numerator_LogR = gsub("/.*", "", i$LogR)))
aaa
aaa <- lapply(names(aaa), function(i) cbind(aaa[[i]], ct=i))
aaa
dcast(LogR~ct)
dcast(aaa, formula = LogR~ct)
dcast(aaa, formula = numerator_LogR~ct)
aaa
aaa <- do.call('rbind', aaa)
dcast(aaa, formula = numerator_LogR~ct)
dcast(aaa, formula = Estimate~ct+numerator_LogR)
dcast(aaa, formula = Estimate~ct)
dcast(aaa, formula = numerator_LogR~ct, value.var = Estimate)
dcast(aaa, formula = numerator_LogR~ct, value.var = 'Estimate')
aaa_dcast <- dcast(aaa, formula = numerator_LogR~ct, value.var = 'Estimate')
rownames(aaa_dcast) <- aaa_dcast$Estimate
aaa_dcast <- aaa_dcast[,-1]
View(aaa_dcast)
aaa_dcast <- dcast(aaa, formula = numerator_LogR~ct, value.var = 'Estimate')
rownames(aaa_dcast) <- aaa_dcast$numerator_LogR
aaa_dcast <- aaa_dcast[,-1]
View(aaa_dcast)
pairs(aaa_dcast)
aaa_dcast
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), function(i,j) cor(aaa_dcast[,i], aaa_dcast[,j]))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j) cor(aaa_dcast[,i], aaa_dcast[,j])))
na.action
?na.action
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
cor(na.omit(aaa_dcast[,i], aaa_dcast[,j]))}))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
na.omit(cor(aaa_dcast[,i], aaa_dcast[,j]))}))
i=1
j=2
na.omit(cor(aaa_dcast[,i], aaa_dcast[,j]))
?cor
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs")}))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs")}))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
cor(aaa_dcast[,i], aaa_dcast[,j], use = "all.obs")}))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
cor(aaa_dcast[,i], aaa_dcast[,j], use = "all.obs")}))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs")})))
outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs"))}))
cors <- outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs"))}))
cors
dim(cors)
cors <- apply(cors, 2, as.numeric)
cors
pheatmap::pheatmap(cors)
cors[is.na(cors)] = 0
pheatmap::pheatmap(cors)
aaa_dcast
dim(aaa_dcast)
cors <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs"))}))
cors <- apply(cors, 2, as.numeric)
cors[is.na(cors)] = 0
rownames(nrow)
rownames(aaa_dcast)
rownames(cors) <- colnames(cors) <- rownames(aaa_dcast)
pheatmap::pheatmap(cors)
cors
View(aaa_dcast)
aaa_dcast[i,]
cors <- outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs"))}))
cors <- apply(cors, 2, as.numeric)
cors[is.na(cors)] = 0
rownames(cors) <- colnames(cors) <- colnames(aaa_dcast)
cors <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs"))}))
cors_sigs <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs"))}))
cors <- apply(cors, 2, as.numeric)
cors <- outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[,i], aaa_dcast[,j], use = "complete.obs"))}))
cors <- apply(cors, 2, as.numeric)
cors[is.na(cors)] = 0
rownames(cors) <- colnames(cors) <- colnames(aaa_dcast)
pheatmap::pheatmap(cors)
pheatmap::pheatmap(cors)
pdf("../../results/results_TMB/pcawg/correlation_cancertypes_from_betaslopes.pfd")
pheatmap::pheatmap(cors)
dev.off()
system("open ../../results/results_TMB/pcawg/")
dev.off()
pdf("../../results/results_TMB/pcawg/correlation_cancertypes_from_betaslopes.pdf")
pheatmap::pheatmap(cors)
dev.off()
cors_sigs <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs"))}))
View(cors_sigs)
cors_sigs
View(aaa_dcast)
rownames(aaa_dcast)
i=8
j=9
cors_sigs <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs"))}))
rbind(aaa_dcast[i,], aaa_dcast[j,])
cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs")
cor(aaa_dcast[i,], aaa_dcast[j,])
cor(aaa_dcast[i,], aaa_dcast[j,], use = "all.obs")
?cor
cor(aaa_dcast[i,], aaa_dcast[j,], use = "everything")
cor(aaa_dcast[i,], aaa_dcast[j,], use = "everything")
cor(rbind(aaa_dcast[i,], aaa_dcast[j,]), use = "everything")
cor(cbind(aaa_dcast[i,], aaa_dcast[j,]), use = "everything")
cor(aaa_dcast[i,], aaa_dcast[j,], use = "complete.obs")
cor(aaa_dcast[i,], aaa_dcast[j,], use = "pairwise.complete.obs")
cor(x = as.vector(aaa_dcast[i,]), y = as.vector(aaa_dcast[j,]), use = "pairwise.complete.obs")
i
9
as.vector(aaa_dcast[i,])
cor(x = runif(9), y = runif(9), use = "pairwise.complete.obs")
aaa_dcast[i,]
cor(x = as.vector(aaa_dcast[i,]), y = as.vector(aaa_dcast[j,]))
cor(x = unlist(aaa_dcast[i,]), y = unlist(aaa_dcast[j,]))
cor(x = unlist(aaa_dcast[i,]), y = unlist(aaa_dcast[j,]), use = "pairwise.complete.obs")
cors <- outer(1:ncol(aaa_dcast), 1:ncol(aaa_dcast), Vectorize(function(i,j){
try(cor(x = unlist(aaa_dcast[,i]), y = unlist(aaa_dcast[,j]), use = "pairwise.complete.obs"))}))
cors <- apply(cors, 2, as.numeric)
cors[is.na(cors)] = 0
rownames(cors) <- colnames(cors) <- colnames(aaa_dcast)
pdf("../../results/results_TMB/pcawg/correlation_cancertypes_from_betaslopes.pdf")
pheatmap::pheatmap(cors)
dev.off()
cors_sigs <- outer(1:nrow(aaa_dcast), 1:nrow(aaa_dcast), Vectorize(function(i,j){
try(cor(x = unlist(aaa_dcast[i,]), y = unlist(aaa_dcast[j,]), use = "pairwise.complete.obs"))}))
cors_sigs <- apply(cors_sigs, 2, as.numeric)
cors_sigs[is.na(cors_sigs)] = 0
rownames(cors_sigs) <- colnames(cors_sigs) <- rownames(aaa_dcast)
pheatmap::pheatmap(cors)
pheatmap::pheatmap(cors_sigs)
pdf("../../results/results_TMB/pcawg/correlation_signatures_from_betaslopes.pdf")
pheatmap::pheatmap(cors_sigs)
dev.off()
dev.off()
pdf("../../results/results_TMB/pcawg/correlation_signatures_from_betaslopes.pdf")
print(pheatmap::pheatmap(cors_sigs))
dev.off()
nonexogenous = read.table("../../data/cosmic/exogenous_signatures_SBS.txt", sep = "\t",
comment.char = "#", fill = F)
nonexogenous
nonexogenous$V1
cors_sigs
rownames(cors_sigs) <- colnames(cors_sigs) <- paste0('SBS', rownames(aaa_dcast))
nonexogenous = read.table("../../data/cosmic/exogenous_signatures_SBS.txt", sep = "\t",
comment.char = "#", fill = F)
nonexogenous
rownames(cors_sigs) %in% nonexogenous$V1
(rownames(cors_sigs) %in% nonexogenous$V1) & !(rownames(cors_sigs) %in% c('SBS1', 'SBS5'))
(rownames(cors_sigs) %in% nonexogenous$V1)
rownames(cors_sigs)
nonexogenous$V1
print(pheatmap::pheatmap(cors, color = viridis::inferno(10)))
dev.off()
