)
obj <- MakeADFun(data, parameters, DLL="fullRE_ME_singlelambda_dirichletmultinomial", random = "u_large")
}else if(model == "diagRE_DM"){
data$num_individuals = n
data$lambda_accessory_mat = (cbind(c(rep(1,n),rep(0,n)), c(rep(0,n),rep(1,n))))
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_large = matrix(rep(1, (d-1)*n), nrow=n),
logs_sd_RE=rep(1, d-1),
log_lambda = matrix(c(2,2))
)
obj <- MakeADFun(data, parameters, DLL="diagRE_ME_dirichletmultinomial", random = "u_large")
}else if(model == "fullRE_DM_altpar"){
data$num_individuals = n
data$lambda_accessory_mat = (cbind(c(rep(1,n),rep(0,n)), c(rep(0,n),rep(1,n))))
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_large = matrix(rep(1, (d-1)*n), nrow=n),
logs_sd_RE=rep(1, d-1),
cov_par_RE = rep(1, ((d-1)*(d-1)-(d-1))/2),
log_lambda = matrix(c(2,2))
)
obj <- MakeADFun(data, parameters, DLL="fullRE_ME_dirichletmultinomial_altpar", random = "u_large")
}else{
stop('Specify correct <model>\n')
}
obj$hessian <- TRUE
opt <- do.call("optim", obj)
opt
opt$hessian ## <-- FD hessian from optim
# obj$he()    ## <-- Analytical hessian
return(sdreport(obj))
}
results_Mcat = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_Mcat"),
timeout = 300, onTimeout = "warning")
results_Mcat
plot(results_m$par.fixed,
results_Mcat$par.fixed)
TMB::compile("mm_multinomial/fullRE_ME_categorical.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_categorical"))
## Categorical: not over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_Mcat_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_Mcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_Mcat_", rownames(i), ".RDS"))
})
## Categorical: not over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_Mcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_Mcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_Mcat_", rownames(i), ".RDS"))
})
## Categorical: not over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_Mcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_Mcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_Mcat_", rownames(i), ".RDS"))
})
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/pcawg_robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar"))
TMB::compile("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial"))
TMB::compile("mm_multinomial/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_categorical.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_categorical"))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
# table(samples_files[,1], samples_files[,2])
# ct = "Bladder-TCC" #samples_files[1,1]
# typedata =nucleotidesubstitution3  #"signatures" #samples_files[1,2]
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
#-------------------------------------------------------------------------------------------------#
#----------------------------------------------------------------------------------------------------#
## run at random
if(re_run_inference){
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("M_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("DM_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("LNM_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
# mclapply(1:nrow(samples_files), function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "LNM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "LNM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_altpar_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM_altpar"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_DM_altpar_", rownames(i), ".RDS"))
})
## diagonal M
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("diagRE_M_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
outcome_inference="Not good"
counter_tries = 0
while(outcome_inference != "Good" & counter_tries < 6){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "diagRE_M"),
timeout = 300, onTimeout = "warning")
outcome_inference = give_summary_per_sample(x)
counter_tries = counter_tries + 1
}
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "diagRE_M_", rownames(i), ".RDS"))
})
## diagonal DM
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("diagRE_DM_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
outcome_inference="Not good"
counter_tries = 0
while(outcome_inference != "Good" & counter_tries < 6){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "diagRE_DM"),
timeout = 300, onTimeout = "warning")
outcome_inference = give_summary_per_sample(x)
counter_tries = counter_tries + 1
}
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "diagRE_DM_", rownames(i), ".RDS"))
})
## Categorical: not over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_Mcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_Mcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_Mcat_", rownames(i), ".RDS"))
})
}
#----------------------------------------------------------------------------------------------------#
results_TMB_M = lapply( python_like_select(list.files(folder_robjs), "^M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_M) = sapply(python_like_select(list.files(folder_robjs), "^M_"), clean_name)
results_TMB_DM = lapply( python_like_select(list.files(folder_robjs), "^DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_DM) = sapply(python_like_select(list.files(folder_robjs), "^DM_"), clean_name)
# results_TMB_DM_dep = lapply( python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"),
#                              function(i) readRDS(paste0("../../data/robjects_cache/tmb_results_dep/", i)))
# names(results_TMB_DM_dep) = sapply(python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"), clean_name)
results_TMB_LNM = lapply( python_like_select(list.files(folder_robjs), "^LNM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files(folder_robjs), "^LNM_"), clean_name_fullRE)
results_TMB_fullRE_M = lapply( python_like_select(list.files(folder_robjs), "^fullRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_M_"), clean_name_fullRE)
full_RE_DM = python_like_select(list.files(folder_robjs), "^fullRE_DM_"); full_RE_DM = full_RE_DM[-grep("_altpar_", full_RE_DM)]
results_TMB_fullRE_DM = lapply( full_RE_DM, function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DM) = sapply(full_RE_DM, clean_name_fullRE)
results_TMB_diagRE_DM = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DM_"), clean_name_fullRE)
results_TMB_diagRE_M = lapply( python_like_select(list.files(folder_robjs), "^diagRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_M_"), clean_name_fullRE)
results_TMB_fullRE_Mcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), clean_name_fullRE)
names(results_TMB_fullRE_Mcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), clean_name_fullRE)
results_TMB_fullRE_M
results_TMB_fullRE_Mcat
results_TMB_fullRE_M
results_TMB_fullRE_Mcat[[1]]$pdHess
sapply(results_TMB_fullRE_Mcat, `[`, "dpdHess")
sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")
sapply(results_TMB_fullRE_M, `[`, "pdHess")
sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")
table(sapply(results_TMB_fullRE_M, `[`, "pdHess"),
sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))
results_TMB_fullRE_Mcat
names(results_TMB_fullRE_Mcat)
names(results_TMB_fullRE_M)
names(results_TMB_fullRE_Mcat) == names(results_TMB_fullRE_M)
all(names(results_TMB_fullRE_Mcat) == names(results_TMB_fullRE_M))
table(sapply(results_TMB_fullRE_M, `[`, "pdHess"),
sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))
table(as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
as.vector(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess"))
table(cbind(as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
as.vector(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))))
table(rbind(as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
as.vector(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))))
as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess"))
table(as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
as.vector(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
as.vector(sapply(results_TMB_fullRE_M, `[`, "pdHess"))
table(unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
## in general there is agreement on whwther there is
table(good_M=unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
good_Mcat=unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
## in general there is agreement on whwther the results converged
table(good_M=unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess")),
good_Mcat=unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
sapply(results_TMB_fullRE_Mcat, `[`, "par.fixed")
sapply(results_TMB_fullRE_M, `[`, "par.fixed")
unlist(sapply(results_TMB_fullRE_Mcat, `[`, "par.fixed"))
## select cases where both converged, only
unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess")) & unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))
unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess"))
## select cases where both converged, only
(sapply(results_TMB_fullRE_M, `[`, "pdHess")) & (sapply(results_TMB_fullRE_Mcat, `[`, "pdHess"))
(sapply(results_TMB_fullRE_M, `[`, "pdHess"))
## select cases where both converged, only
factor(unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess"))) & factor(unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
## select cases where both converged, only
as.logical(unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess"))) & as.logical(unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
## select cases where both converged, only
which_good_conv = as.logical(unlist(sapply(results_TMB_fullRE_M, `[`, "pdHess"))) & as.logical(unlist(sapply(results_TMB_fullRE_Mcat, `[`, "pdHess")))
plot(sapply(results_TMB_fullRE_Mcat[which_good_conv], `[`, "par.fixed"),
sapply(results_TMB_fullRE_M[which_good_conv], `[`, "par.fixed"))
sapply(results_TMB_fullRE_Mcat[which_good_conv], `[`, "par.fixed")
plot(unlist(sapply(results_TMB_fullRE_Mcat[which_good_conv], `[`, "par.fixed")),
unlist(sapply(results_TMB_fullRE_M[which_good_conv], `[`, "par.fixed")))
plot(log(unlist(sapply(results_TMB_fullRE_Mcat[which_good_conv], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_M[which_good_conv], `[`, "par.fixed"))))
log(2^3)
2*log(2)
3*log(2)
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/pcawg_robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar"))
TMB::compile("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial"))
TMB::compile("mm_multinomial/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_categorical.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_categorical"))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
# table(samples_files[,1], samples_files[,2])
# ct = "Bladder-TCC" #samples_files[1,1]
# typedata =nucleotidesubstitution3  #"signatures" #samples_files[1,2]
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical"))
## Categorical: over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DMcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DMcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_DMcat_", rownames(i), ".RDS"))
})
results_TMB_fullRE_M
#----------------------------------------------------------------------------------------------------#
results_TMB_M = lapply( python_like_select(list.files(folder_robjs), "^M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_M) = sapply(python_like_select(list.files(folder_robjs), "^M_"), clean_name)
results_TMB_DM = lapply( python_like_select(list.files(folder_robjs), "^DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_DM) = sapply(python_like_select(list.files(folder_robjs), "^DM_"), clean_name)
# results_TMB_DM_dep = lapply( python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"),
#                              function(i) readRDS(paste0("../../data/robjects_cache/tmb_results_dep/", i)))
# names(results_TMB_DM_dep) = sapply(python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"), clean_name)
results_TMB_LNM = lapply( python_like_select(list.files(folder_robjs), "^LNM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files(folder_robjs), "^LNM_"), clean_name_fullRE)
results_TMB_fullRE_M = lapply( python_like_select(list.files(folder_robjs), "^fullRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_M_"), clean_name_fullRE)
full_RE_DM = python_like_select(list.files(folder_robjs), "^fullRE_DM_"); full_RE_DM = full_RE_DM[-grep("_altpar_", full_RE_DM)]
results_TMB_fullRE_DM = lapply( full_RE_DM, function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DM) = sapply(full_RE_DM, clean_name_fullRE)
results_TMB_diagRE_DM = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DM_"), clean_name_fullRE)
results_TMB_diagRE_M = lapply( python_like_select(list.files(folder_robjs), "^diagRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_M_"), clean_name_fullRE)
results_TMB_fullRE_Mcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_Mcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), clean_name_fullRE)
results_TMB_fullRE_DMcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DMcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), clean_name_fullRE)
results_TMB_fullRE_DMcat
results_TMB_fullRE_DM
which_good_conv_DM = as.logical(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess"))) & as.logical(unlist(sapply(results_TMB_fullRE_DMcat, `[`, "pdHess")))
length(results_TMB_fullRE_DM)
length(results_TMB_fullRE_DMcat)
## Categorical: over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DMcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DMcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_DMcat_", rownames(i), ".RDS"))
})
## Categorical: over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DMcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DMcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_DMcat_", rownames(i), ".RDS"))
})
results_TMB_fullRE_Mcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_Mcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), clean_name_fullRE)
results_TMB_fullRE_DMcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DMcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), clean_name_fullRE)
results_TMB_fullRE_DMcat
results_TMB_fullRE_DM
which_good_conv_DM = as.logical(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess"))) & as.logical(unlist(sapply(results_TMB_fullRE_DMcat, `[`, "pdHess")))
length(results_TMB_fullRE_DMcat)
length(results_TMB_fullRE_DM)
results_TMB_fullRE_Mcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_Mcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_Mcat_"), clean_name_fullRE)
results_TMB_fullRE_DMcat = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DMcat) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DMcat_"), clean_name_fullRE)
## Categorical: over-dispersed
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DMcat_", "", list.files("../../data/pcawg_robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DMcat"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/pcawg_robjects_cache/tmb_results/", "fullRE_DMcat_", rownames(i), ".RDS"))
})
length(results_TMB_fullRE_DMcat)
length(results_TMB_fullRE_DM)
names(results_TMB_fullRE_DMcat)
names(results_TMB_fullRE_DM)
match(names(results_TMB_fullRE_DMcat),names(results_TMB_fullRE_DM))
results_TMB_fullRE_DM_subset = results_TMB_fullRE_DM[match(names(results_TMB_fullRE_DMcat),names(results_TMB_fullRE_DM))]
which_good_conv_DM = as.logical(unlist(sapply(results_TMB_fullRE_DM_subset, `[`, "pdHess"))) & as.logical(unlist(sapply(results_TMB_fullRE_DMcat, `[`, "pdHess")))
plot(log(unlist(sapply(results_TMB_fullRE_Mcat[which_good_conv_DM], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_M[which_good_conv_DM], `[`, "par.fixed"))))
plot(log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
which_good_conv_DM
which_good_conv_DM = T
plot(log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
results_TMB_fullRE_DM_subset[which_good_conv_DM]
results_TMB_fullRE_DMcat[which_good_conv_DM]
plot(log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))
length(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed")))
length(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
length(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed")))
sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed")
sapply(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"), typeof)
sapply(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"), typeof)
sapply(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"), typeof) %>% table
sapply(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"), typeof) %>% table
which_good_conv_DM( ((sapply(sapply(results_TMB_fullRE_DM_subset, `[`, "par.fixed"), typeof) %>% table) == "double") &
((sapply(sapply(results_TMB_fullRE_DMcat, `[`, "par.fixed"), typeof) %>% table) == "double"))
which_good_conv_DM = ( ((sapply(sapply(results_TMB_fullRE_DM_subset, `[`, "par.fixed"), typeof) %>% table) == "double") &
((sapply(sapply(results_TMB_fullRE_DMcat, `[`, "par.fixed"), typeof) %>% table) == "double"))
((sapply(sapply(results_TMB_fullRE_DM_subset, `[`, "par.fixed"), typeof) %>% table) == "double")
which_good_conv_DM = ( ((sapply(sapply(results_TMB_fullRE_DM_subset, `[`, "par.fixed"), typeof) ) == "double") &
((sapply(sapply(results_TMB_fullRE_DMcat, `[`, "par.fixed"), typeof) ) == "double"))
which_good_conv_DM
table(which_good_conv_DM)
plot(log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
abline(coef(c=(0,1)))
abline(coef(c(0,1)))
abline(coef=c(0,1), lty='dashed')
results_TMB_fullRE_DM_subset[which_good_conv_DM]
names(results_TMB_fullRE_DM_subset[which_good_conv_DM])
rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=length(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed")))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=length(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))))
length(log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))))
length(log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))))
length(rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=length(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))))
length(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=sapply(length(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed))))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), each=sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) nrow(i$par.fixed))))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) nrow(i$par.fixed))))
cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed))))
require(ggrepel)
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+geom_label_repel()
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+geom_label_repel()
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, labels=dataset))+geom_point()+geom_label_repel()+guides(col=FALSE)
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+geom_label_repel()+guides(col=FALSE)
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+guides(col=FALSE)
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+guides(col=FALSE)+
geom_abline(slope = 1, intercept = 0)
ggplot(cbind.data.frame(DM=log(unlist(sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], `[`, "par.fixed"))),
DMcat=log(unlist(sapply(results_TMB_fullRE_DMcat[which_good_conv_DM], `[`, "par.fixed"))),
dataset=rep(names(results_TMB_fullRE_DM_subset[which_good_conv_DM]), sapply(results_TMB_fullRE_DM_subset[which_good_conv_DM], function(i) length(i$par.fixed)))),
aes(x=DM, y=DMcat, col=dataset, label=dataset))+geom_point()+guides(col=FALSE)+
geom_abline(slope = 1, intercept = 0)+facet_wrap(.~dataset)
