## split tree into two
get_next_split(tree)
}else{
## do not remove parenthesis; do not split
}
list(.tree[1:idx], .tree[(idx+1):length(.tree)])
list(.tree[1:idx], .tree[(idx+2):length(.tree)])
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(.tree[1:idx], .tree[(idx+2):length(.tree)]))
}
which_close = find_close_parenthesis(.tree)
which_close
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
rm(find_close_parenthesis)
give_split = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
which_close = give_split(.tree)
which_close
splts = give_split(.tree)
splts
find_split(splts[[1]])
find_split(splts[[2]])
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
## Should not be necessary:
z[!is.finite(z)] <- NA
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple")
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", col='blue')
length(x)
rnorm(23)
contour(rnorm(23), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
dev.off()
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
image(x, x, z)
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
library(ASCAT)
ascat.bcMulti <- ascat.loadData(
Tumor_LogR_file = system.file("extdata", "tumour.logR.txt", package="ASCAT"),
Tumor_BAF_file = system.file("extdata", "tumour.BAF.txt", package="ASCAT"),
Germline_LogR_file = system.file("extdata", "singlenormal.logR.txt", package="ASCAT"),
Germline_BAF_file = system.file("extdata", "singlenormal.BAF.txt", package="ASCAT"))
head(ascat.bcMulti$Tumor_LogR)
head(ascat.bcMulti$Tumor_BAF)
ascat.bcMulti
groundTruth1 <- rep(c(2,2,3,2,3,2),times=c(200,100,100,30,50,120))
groundTruth2 <- rep(c(1,2,3,2,3,2),times=c(200,100,100,30,50,120))
par(mar=c(4,4,3,1),yaxp=c(0,3,3))
plot(x=1:length(groundTruth1),y=groundTruth1,type='l',ylim=c(0,3),xlab='Position',ylab='Copy number',main='Sample 1',yaxt='n')
axis(side = 2, at = 0:3, labels = 0:3)
plot(x=1:length(groundTruth2),y=groundTruth2,type='l',ylim=c(0,3),xlab='Position',ylab='Copy number',main='Sample 2',yaxt='n')
axis(side = 2, at = 0:3, labels = 0:3)
ascat.bcMulti <- ascat.asmultipcf(ascat.bcMulti,penalty = 5)
python_like_select = function(vector, grep_substring){
vector[grepl(pattern = grep_substring, x = vector)]
}
results_TMB_LNM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^LNM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
results_TMB_LNM
results_TMB_LNM[[1]]
results_TMB_LNM[[1]]$value
results_TMB_LNM[[1]]$par.fixed
sdreport(results_TMB_LNM[[1]])
(results_TMB_LNM[[1]])
(results_TMB_LNM[[1]]$sd)
(results_TMB_LNM[[2]]$sd)
(results_TMB_LNM[[2]])
timeout_bool = sapply(results_TMB_LNM, typeof) == "character"
timeout_bool
hessian_positivedefinite_bool = sapply(results_TMB_LNM[!timeout_bool], function(i) i$pdHess)
summary_runs = c(sum(timeout_bool), sum(!hessian_positivedefinite_bool), sum(hessian_positivedefinite_bool))
names(summary_runs) = c('(failed) timeout', '(failed) non-positive semi-definite hessian', '(successful) positive semi-definite hessian')
summary_runs
results_TMB_M = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^M_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
results_TMB_DM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^DM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
give_summary_of_runs = function(vector_TMB_objects){
timeout_bool = sapply(vector_TMB_objects, typeof) == "character"
hessian_positivedefinite_bool = sapply(vector_TMB_objects[!timeout_bool], function(i) i$pdHess)
summary_runs = c(sum(timeout_bool), sum(!hessian_positivedefinite_bool), sum(hessian_positivedefinite_bool))
names(summary_runs) = c('(failed) timeout', '(failed) non-positive semi-definite hessian', '(successful) positive semi-definite hessian')
return(summary_runs)
}
give_summary_of_runs(results_TMB_LNM)
give_summary_of_runs(results_TMB_M)
give_summary_of_runs(results_TMB_DM)
names(vector_TMB_objects)
results_TMB_LNM
list.files("~/Desktop/tmb_results/")
clean_name = function(x){
paste0(strsplit(x, "_")[2:3], collapse = "")
}
sapply(list.files("~/Desktop/tmb_results/"), clean_name)
#----------------------------------------------------------------------------------------------------#
python_like_select = function(vector, grep_substring){
vector[grepl(pattern = grep_substring, x = vector)]
}
clean_name = function(x){
gsub(".RDS", "", paste0(strsplit(x, "_")[[1]][2:3], collapse = ""))
}
results_TMB_LNM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^LNM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^LNM_"), clean_name)
#----------------------------------------------------------------------------------------------------#
give_summary_of_runs = function(vector_TMB_objects, long_return){
timeout_bool = sapply(vector_TMB_objects, typeof) == "character"
hessian_positivedefinite_bool = sapply(vector_TMB_objects[!timeout_bool], function(i) i$pdHess)
summary_runs = c(sum(timeout_bool), sum(!hessian_positivedefinite_bool), sum(hessian_positivedefinite_bool))
names(summary_runs) = c('(failed) timeout', '(failed) non-positive semi-definite hessian', '(successful) positive semi-definite hessian')
if(long_return){
list(Timeout=names(vector_TMB_objects)[timeout_bool],
hessian_nonpositivedefinite_bool = names(vector_TMB_objects)[!timeout_bool][!hessian_positivedefinite_bool],
hessian_positivedefinite_bool = names(vector_TMB_objects)[!timeout_bool][hessian_positivedefinite_bool])
}else{
return(summary_runs)
}
}
give_summary_per_sample = function(TMB_object){
if(is.null(TMB_object)){
"Object doesn't exist"
}else{
if(typeof(TMB_object) == "character"){
return('Timeout or some error')
}else{
if(TMB_object$pdHess){
return('Good')
}else{
return('Non-PD')
}
}
}
}
give_summary_of_runs(results_TMB_LNM, long_return = FALSE)
results_TMB_M = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^M_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_M) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^M_"), clean_name)
give_summary_of_runs(results_TMB_M, long_return = FALSE)
results_TMB_DM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^DM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_DM) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^DM_"), clean_name)
give_summary_of_runs(results_TMB_DM, long_return = FALSE)
results_TMB_LNM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^LNM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^LNM_"), clean_name)
results_TMB_M = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^M_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_M) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^M_"), clean_name)
results_TMB_DM = lapply( python_like_select(list.files("~/Desktop/tmb_results/"), "^DM_"), function(i) readRDS(paste0('~/Desktop/tmb_results/', i)))
names(results_TMB_DM) = sapply(python_like_select(list.files("~/Desktop/tmb_results/"), "^DM_"), clean_name)
#----------------------------------------------------------------------------------------------------#
#----------------------------------------------------------------------------------------------------#
give_summary_of_runs = function(vector_TMB_objects, long_return){
timeout_bool = sapply(vector_TMB_objects, typeof) == "character"
hessian_positivedefinite_bool = sapply(vector_TMB_objects[!timeout_bool], function(i) i$pdHess)
summary_runs = c(sum(timeout_bool), sum(!hessian_positivedefinite_bool), sum(hessian_positivedefinite_bool))
names(summary_runs) = c('(failed) timeout', '(failed) non-positive semi-definite hessian', '(successful) positive semi-definite hessian')
if(long_return){
list(Timeout=names(vector_TMB_objects)[timeout_bool],
hessian_nonpositivedefinite_bool = names(vector_TMB_objects)[!timeout_bool][!hessian_positivedefinite_bool],
hessian_positivedefinite_bool = names(vector_TMB_objects)[!timeout_bool][hessian_positivedefinite_bool])
}else{
return(summary_runs)
}
}
give_summary_per_sample = function(TMB_object){
if(is.null(TMB_object)){
"Object doesn't exist"
}else{
if(typeof(TMB_object) == "character"){
return('Timeout or some error')
}else{
if(TMB_object$pdHess){
return('Good')
}else{
return('Non-PD')
}
}
}
}
give_summary_of_runs(results_TMB_LNM, long_return = FALSE)
give_summary_of_runs(results_TMB_M, long_return = FALSE)
give_summary_of_runs(results_TMB_DM, long_return = FALSE)
give_summary_of_runs(results_TMB_DM, long_return = FALSE)
lambd=c(3,2)
x = matrix(cbind(c(rep(0,5),rep(1,5)), c(rep(1,5),rep(0,5))))
x
x = matri(cbind(c(rep(0,5),rep(1,5)), c(rep(1,5),rep(0,5))))
x = (cbind(c(rep(0,5),rep(1,5)), c(rep(1,5),rep(0,5))))
x
lmbda %*% x
lambd %*% x
lambd
lambd %*% t(x)
x %*% lambd
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
wrapper_run_TMB = function(ct, typedata, model, simulation=FALSE, allow_new_LNM=FALSE){
cat(ct)
cat(typedata)
data = load_PCAWG(ct, typedata, simulation)
if(length(data) == 1){
if(is.na(data)){
return(warning('RDS object is NA'))
}
}
data$Y = matrix(data$Y, nrow=nrow(data$Y))
data$x = (matrix(data$x, ncol=2))
d <- ncol(data$Y)
n <- ncol(data$z)
if(model == "M"){
data$num_individuals = n
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_random_effects = matrix(rep(1, n)),
logSigma_RE=1
)
obj <- MakeADFun(data, parameters, DLL="ME_multinomial", random = "u_random_effects")
}else if(model == "fullRE_M"){
data$num_individuals = n
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_large = matrix(rep(1, (d-1)*n), nrow=n),
logs_sd_RE=rep(1, d-1),
cov_par_RE = rep(1, ((d-1)*(d-1)-(d-1))/2)
)
obj <- MakeADFun(data, parameters, DLL="fullRE_ME_multinomial", random = "u_large")
}else if(model == "LNM"){
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_random_effects = matrix(rep(1, n)),
logSigma_RE=0,
cov_par = rep(1, ((d-1)*(d-1)-(d-1))/2)
)
obj <- MakeADFun(data, parameters, DLL="ME_LNM", random = "u_random_effects")
}else if(model == "fullRE_LNM"){
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_large = matrix(rep(1, (d-1)*n), nrow=n),
logSigma_RE=0,
cov_par = rep(1, ((d-1)*(d-1)-(d-1))/2),
logs_sd_RE=rep(1, d-1),
cov_par_RE = rep(1, ((d-1)*(d-1)-(d-1))/2)
)
obj <- MakeADFun(data, parameters, DLL="fullRE_ME_LNM", random = "u_large")
}else if(model == "DM"){
data$num_individuals = n
data$lambda_accessory_mat = (cbind(c(rep(1,n),rep(0,n)), c(rep(0,n),rep(1,n))))
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_random_effects = matrix(rep(1, n)),
logSigma_RE=1,
log_lambda = matrix(c(2,2))
)
obj <- MakeADFun(data, parameters, DLL="ME_dirichletmultinomial", random = "u_random_effects")
}else if(model == "fullRE_DM"){
data$num_individuals = n
data$lambda_accessory_mat = (cbind(c(rep(1,n),rep(0,n)), c(rep(0,n),rep(1,n))))
parameters <- list(
beta = (matrix(rep(runif(1, min = -4, max = 4), 2*(d-1)),
nrow = 2, byrow=TRUE)),
u_large = matrix(rep(1, (d-1)*n), nrow=n),
logs_sd_RE=rep(1, d-1),
cov_par_RE = rep(1, ((d-1)*(d-1)-(d-1))/2),
log_lambda = matrix(c(2,2))
)
obj <- MakeADFun(data, parameters, DLL="fullRE_ME_dirichletmultinomial", random = "u_large")
}else{
stop('Specify correct <model>\n')
}
obj$hessian <- TRUE
opt <- do.call("optim", obj)
opt
opt$hessian ## <-- FD hessian from optim
# obj$he()    ## <-- Analytical hessian
return(sdreport(obj))
}
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
?withTimeout
library(TMB)
library(ggplot2)
require(R.utils)
install.packages('R.utils')
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
require(R.utils)
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
