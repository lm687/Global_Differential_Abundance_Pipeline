res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
coef(res_multinom)
beta
coef(res_multinom)[(d-1):1,]
coef(res_multinom)[(d-1):1,]
t(beta)
list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta))
give_est = function()
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
}
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
ests = replicate(n = 100, give_est())
ests
ests[est_beta,]
ests['est_beta',]
sapply(ests['est_beta',], as.vector)
head(melt(sapply(ests['est_beta',], as.vector)))
library(reshape2)
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
library(ggplot2)
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ests
sapply(ests['est_beta',], as.vector)
beta
as.vector(beta)
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(beta))
bias
ggplot(bias, aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ggplot(melt(bias), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
bias
bias = melt(bias)
bias
bias$Var1
bias$type_beta = rep('Intercept', 'Slope')
bias$type_beta
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*2*n)
bias
dim(bias)
d-1
n
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
head(bias)
1:(d-1)
rep(c(1:(d-1), each=2))
rep(1:(d-1), each=2)
rep(rep(1:(d-1), each=2), n/2)
length(rep(rep(1:(d-1), each=2), n/2))
dim(bias)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ests
ests['est_beta',]
head(melt(ests['est_beta',]))
ests['est_beta',]
head(melt(as.vector(ests['est_beta',])))
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()
beta
as.vector(beta)
cbind(1:(2*(d-1)), as.vector(beta))
cbind.data.frame(Var11:(2*(d-1)), value=as.vector(beta))
cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()+
geom_line(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
beta
ests['est_beta',
]
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(t(beta)))
bias = melt(bias)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(t(beta))), aes(x=Var1, y=value))
TPM = read.csv("../DE_resistant_sensitive/files/20191218_ViasM_BJ_orgaBrs_tpm.csv", stringsAsFactors = FALSE)
TPM = read.csv("../RNASeq_DE_resistant_sensitive/files/20191218_ViasM_BJ_orgaBrs_tpm.csv", stringsAsFactors = FALSE)
all_ploidies_2_df_t = t(all_ploidies_2_df)
TPM = read.csv("../RNASeq_DE_resistant_sensitive/files/20191218_ViasM_BJ_orgaBrs_tpm.csv", stringsAsFactors = FALSE)
ggthemr_reset
?ggthemr_reset
library(ggthemr)
?ggthemr_reset
rm(list = ls())
setwd("~/Documents/PhD/GlobalDA/code/2_inference_TMB/")
library(TMB)
library(ggplot2)
library(dplyr)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
source("../2_inference/helper/helper_DA_stan.R") ## for normalise_rw
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
ct = "Kidney-RCC.clearcell" #samples_files[1,1]
typedata =  "signatures" #samples_files[1,2]
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
# TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
# dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
results_DMsl
results_DMoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_DM'))
results_DMoldRE
results_M = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_multinomial_REv2'))
results_M
results_MoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_M'))
results_MoldRE
results_MoldRE
pairs(cbind(results_DMsl$par.fixed[1:18],
results_DMoldRE$par.fixed[1:18],
results_M$par.fixed,
results_MoldRE$par.fixed))
cbind_est <- cbind.data.frame(results_DMsl$par.fixed[1:18],
results_DMoldRE$par.fixed[1:18],
results_M$par.fixed,
results_MoldRE$par.fixed)
cbind_est
cbind_est <- cbind.data.frame(results_DMsl=results_DMsl$par.fixed[1:18],
results_DMoldRE=results_DMoldRE$par.fixed[1:18],
results_M=results_M$par.fixed,
results_MoldRE=results_MoldRE$par.fixed)
cbind_est
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()
i=1
j=2
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
plts_pairs <- outer(X = 1:1:ncol(cbind_est), Y = 1:ncol(cbind_est), ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed'))
plts_pairs <- outer(X = 1:1:ncol(cbind_est), Y = 1:ncol(cbind_est),
function(x, y){
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
})
plts_pairs <- outer(X = 1:ncol(cbind_est), Y = 1:ncol(cbind_est),
function(x, y){
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}, )
plts= matrix(NA, nrow = ncol(cbind_est), ncol = ncol(cbind_est))
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[i,j] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
i
j
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
plts= matrix(NA, nrow = ncol(cbind_est), ncol = ncol(cbind_est))
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[i,j] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
plts= rep(NA, ncol(cbind_est)^2)
plts= rep(NA, ncol(cbind_est)^2)
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[(i-1)*4,j] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
plts= rep(NA, ncol(cbind_est)^2)
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[(i-1)*4+j] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
warnings()
(i-1)*4+j
replicate(NA, ncol(cbind_est)^2)
replicate(n = ncol(cbind_est)^2, list)
replicate(n = ncol(cbind_est)^2, list())
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[[(i-1)*4+j]] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j]), aes(x=x,y=y))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
plts
library(gridExtra)
do.call("grid.arrange", list(grobs=plts, ncol=4))
cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j])
cbind_est
results_DMsl$par.fixed[1:18]
names(results_DMsl$par.fixed[1:18])
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[[(i-1)*4+j]] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
cbind_est
colnames(cbind_est)
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[[(i-1)*4+j]] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
plts[[(i-1)*4+j]] = ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
ggplot()
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
plt_it <- ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
plt_it <- ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
samples_files
ct = "Thy-AdenoCA" #samples_files[1,1]
typedata =  "signatures" #samples_files[1,2]
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
results_DMsl
results_DMoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_DM'))
results_DMoldRE
results_M = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_multinomial_REv2'))
results_M
results_MoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_M'))
results_MoldRE
cbind_est <- cbind.data.frame(results_DMsl=results_DMsl$par.fixed[1:18],
results_DMoldRE=results_DMoldRE$par.fixed[1:18],
results_M=results_M$par.fixed,
results_MoldRE=results_MoldRE$par.fixed)
pairs(cbind_est)
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
plt_it <- ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
plt_it <- ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
dev.off()
dev.off()
do.call("grid.arrange", list(grobs=plts, ncol=4))
samples_files
ct = "SoftTissue-Liposarc"
typedata =  "signatures" #samples_files[1,2]
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
fivedimobject
ct
ct = "Thy-AdenoCA"
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
fivedimobject
stopifnot(ncol(fivedimobject$Y) == 5)
ct = "SoftTissue-Liposarc"
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
stopifnot(ncol(fivedimobject$Y) == 5)
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
results_DMsl
results_DMoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_DM'))
results_DMoldRE
results_M = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_multinomial_REv2'))
results_M
results_MoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_M'))
results_MoldRE
cbind_est <- cbind.data.frame(results_DMsl=results_DMsl$par.fixed[1:18],
results_DMoldRE=results_DMoldRE$par.fixed[1:18],
results_M=results_M$par.fixed,
results_MoldRE=results_MoldRE$par.fixed)
# pairs(cbind_est)
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
plt_it <- ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
plt_it <- ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
dev.off()
do.call("grid.arrange", list(grobs=plts, ncol=4))
samples_files
dev.off()
### Troubleshooting inference with TMB
rm(list = ls())
setwd("~/Documents/PhD/GlobalDA/code/2_inference_TMB/")
library(TMB)
library(ggplot2)
library(dplyr)
library(gridExtra)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
source("../2_inference/helper/helper_DA_stan.R") ## for normalise_rw
source("../../../CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
ct = "Kidney-RCC.clearcell"
ct = "Thy-AdenoCA"
ct = "SoftTissue-Liposarc"
ct = "Uterus-AdenoCA"
typedata =  "signatures" #samples_files[1,2]
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial_REv2.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_REv2"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
stopifnot(ncol(fivedimobject$Y) == 5)
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
results_DMsl
results_DMoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_DM'))
results_DMoldRE
results_M = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_multinomial_REv2'))
results_M
results_MoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_M'))
results_MoldRE
cbind_est <- cbind.data.frame(results_DMsl=results_DMsl$par.fixed[1:18],
results_DMoldRE=results_DMoldRE$par.fixed[1:18],
results_M=results_M$par.fixed,
results_MoldRE=results_MoldRE$par.fixed)
# pairs(cbind_est)
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
plt_it <- ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
plt_it <- ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
stopifnot(ncol(fivedimobject$Y) == 5)
fivedimobject
fivedimobject
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
fivedimobject$Y
colSums(fivedimobject$Y)
sort(colSums(fivedimobject$Y))
sort(colSums(fivedimobject$Y), d=T)
sort(colSums(fivedimobject$Y), d=T)[1:5]
sort(colSums(fivedimobject$Y), d=T)[-(1:5)]
names(sort(colSums(fivedimobject$Y), d=T)[-(1:5)])
# fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
fivedimobject = give_subset_sigs_TMBobj(fivedimobject,
sigs_to_remove = names(sort(colSums(fivedimobject$Y), d=T)[-(1:5)]))
## it's 5-dimensional
fivedimobject = load_PCAWG(ct = ct, typedata = typedata)
# fivedimobject = give_subset_sigs_TMBobj(fivedimobject, sigs_to_remove = c('SBS3', 'SBS24', 'SBS26', 'SBS22', 'SBS29', 'SBS40', 'SBS41', 'SBS13'))
fivedimobject = give_subset_sigs_TMBobj(fivedimobject,
sigs_to_remove = names(sort(colSums(fivedimobject$Y), d=T)[-(1:5)]))
stopifnot(ncol(fivedimobject$Y) == 5)
results_DMsl = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_dirichletmultinomial_singlelambda_REv2'))
results_DMsl
results_DMoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_DM'))
results_DMoldRE
results_DMsl
results_M = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_multinomial_REv2'))
results_M
results_MoldRE = (wrapper_run_TMB(object = fivedimobject, model = 'fullRE_M'))
results_MoldRE
results_M
cbind_est <- cbind.data.frame(results_DMsl=results_DMsl$par.fixed[1:18],
results_DMoldRE=results_DMoldRE$par.fixed[1:18],
results_M=results_M$par.fixed,
results_MoldRE=results_MoldRE$par.fixed)
plts= replicate(n = ncol(cbind_est)^2, list())
for(i in 1:ncol(cbind_est)){
for(j in 1:ncol(cbind_est)){
if(i != j){
plt_it <- ggplot(cbind.data.frame(x=cbind_est[,i], y=cbind_est[,j], col=names(results_DMsl$par.fixed[1:18])),
aes(x=x,y=y, col=col))+geom_point()+labs(x=colnames(cbind_est)[i], y=colnames(cbind_est)[j])+
geom_abline(slope = 1, intercept = 0, lty='dashed')
}else{
plt_it <- ggplot()
}
plts[[(i-1)*4+j]] = plt_it
}
}
do.call("grid.arrange", list(grobs=plts, ncol=4))
