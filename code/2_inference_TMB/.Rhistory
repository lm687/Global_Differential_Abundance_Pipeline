sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30')),
model = "fullRE_DM", use_nlminb=T, smart_init_vals=F)
fullDM_no_small_sigs
fullDM_no_small_sigs <- wrapper_run_TMB(object = give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30')),
model = "fullRE_DM", use_nlminb=T, smart_init_vals=F)
fullDM_no_small_sigs
wald_TMB_wrapper(fullDM_no_small_sigs, fail_non_converged = F)
nonexogenous
nonexogenous$V1
fullDM_no_small_sigs_nonexo <- wrapper_run_TMB(object = give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = unique(c(c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'),
nonexogenous$V1))),
model = "fullRE_DM", use_nlminb=T, smart_init_vals=F)
fullDM_no_small_sigs_nonexo
wald_TMB_wrapper(fullDM_no_small_sigs_nonexo, fail_non_converged = F)
load_PCAWG
##-----------------------------------------------------------------------------------------------------##
read_info <- function(ct){
.x <- list(fullRE_M_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREM_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambda_", ct, "_signaturesPCAWG.RDS"))),
fullRE_M_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREMnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_nonexo_SP =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_wSBS1SBS5nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMwSBS1SBS5nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo_subsets_and_amalgamations <- try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexosubset_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambda2nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambda2nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SPSaA = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWGSaA.RDS"))),
dataset_all_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/"),
dataset_nucleotidesubstitution1 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution1", path_to_data = "../../data/"))
.x$dataset_nonexo <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenous$V1)
.x$dataset_nonexoSBS1SBS5 <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenouswSBS1SBS5$V1)
.x$colnames_notsorted_SP <- try(colnames(.x$dataset_all_sigs$Y))
.x$logR_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_notsorted_SP))
.x$colnames_nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexo$Y))
.x$logR_nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_nonexo_notsorted_SP))
## nonexo, with SBS1 and SBS5
.x$colnames_wSBS1SBS5nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexoSBS1SBS5$Y))
.x$logR_wSBS1SBS5nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_wSBS1SBS5nonexo_notsorted_SP))
return(.x)
}
read_info_list <- lapply(enough_samples, read_info)
names(read_info_list) <- enough_samples
read_info_list[[ct]]$dataset_nucleotidesubstitution1
fullRE_DMDL_features =  wrapper_run_TMB(object = read_info_list[[ct]]$dataset_nucleotidesubstitution1,
model = "fullRE_DM", use_nlminb=T, smart_init_vals=F)
fullRE_DMDL_features
plot_betas(fullRE_DMDL_features)
paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)])
sort(unlist( sapply(c('C', 'T'), function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))
plot_betas(fullRE_DMDL_features, names_cats = c(sort(unlist( sapply(c('C', 'T'), function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))
vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'), function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) }))))
plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'), function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) }))))))
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../")))
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../")), nrow=2)
dev.off()
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=2))
dev.off()
fullDM_no_small_sigs
plot_betas(fullDM_no_small_sigs)
give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))
colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)
plot_betas(fullDM_no_small_sigs, TMB_obj = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
plot_betas(fullDM_no_small_sigs, TMB_obj = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
plot_betas(fullDM_no_small_sigs, TMB_obj = fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y))
fullDM_no_small_sigs
plot_betas(fullDM_no_small_sigs, TMB_obj = fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
plot_betas(fullDM_no_small_sigs, TMB_obj = fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)))
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=2, rel_heights = c(1,3)))
dev.off()
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::pplot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=2, rel_heights = c(1,3)))
dev.off()
library(cowplot)
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=2, rel_heights = c(1,3)))
dev.off()
read_info_list[[ct]]$dataset_all_sigs$Y
read_info_list[[ct]]$dataset_all_sigs$Y[,'SBS17a', 'SBS17b']
read_info_list[[ct]]$dataset_all_sigs$Y[,c('SBS17a', 'SBS17b')]
plot_scatter <- function(m){
names_sigs <- colnames(m)
colnames(m) <- c('x1', 'x2')
ggplot(m, aes(x=x1, y=x2))+geom_point()+theme_bw()+labs(x=names_sigs[1], y=names_sigs[2])
}
plot_scatter(read_info_list[[ct]]$dataset_all_sigs$Y[,c('SBS17a', 'SBS17b')])
plot_scatter <- function(m){
m <- data.frame(m)
names_sigs <- colnames(m)
colnames(m) <- c('x1', 'x2')
ggplot(m, aes(x=x1, y=x2))+geom_point()+theme_bw()+labs(x=names_sigs[1], y=names_sigs[2])
}
plot_scatter(read_info_list[[ct]]$dataset_all_sigs$Y[,c('SBS17a', 'SBS17b')])
plot_scatter(read_info_list[[ct]]$dataset_all_sigs$Y[,c('SBS2', 'SBS3')])
##-----------------------------------------------------------------------------------------------------##
read_info <- function(ct){
.x <- list(fullRE_M_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREM_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambda_", ct, "_signaturesPCAWG.RDS"))),
fullRE_M_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREMnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_nonexo_SP =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_wSBS1SBS5nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMwSBS1SBS5nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo_subsets_and_amalgamations <- try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexosubset_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambda2nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambda2nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SPSaA = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWGSaA.RDS"))),
dataset_all_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/"),
dataset_nucleotidesubstitution1 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution1", path_to_data = "../../data/"),
z_DMM = list(all=lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.z"), sep = ',', skip = 1))))
)
.x$dataset_nonexo <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenous$V1)
.x$dataset_nonexoSBS1SBS5 <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenouswSBS1SBS5$V1)
.x$colnames_notsorted_SP <- try(colnames(.x$dataset_all_sigs$Y))
.x$logR_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_notsorted_SP))
.x$colnames_nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexo$Y))
.x$logR_nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_nonexo_notsorted_SP))
## nonexo, with SBS1 and SBS5
.x$colnames_wSBS1SBS5nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexoSBS1SBS5$Y))
.x$logR_wSBS1SBS5nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_wSBS1SBS5nonexo_notsorted_SP))
return(.x)
}
read_info_list <- lapply(enough_samples, read_info)
names(read_info_list) <- enough_samples
read_info_list[[ct]]
read_info_list[[ct]]$z_DMM
read_info_list[[ct]]$z_DMM[[1]]
length(read_info_list[[ct]]$z_DMM)
read_info_list[[ct]]$z_DMM
read_info_list[[ct]]$z_DMM[[1]][[1]]
read_info_list[[ct]]$z_DMM[[1]][[2]]
##-----------------------------------------------------------------------------------------------------##
read_info <- function(ct){
.x <- list(fullRE_M_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREM_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambda_", ct, "_signaturesPCAWG.RDS"))),
fullRE_M_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREMnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullRE_DMSL_nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMsinglelambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDM_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_nonexo_SP =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS"))),
diagRE_DMDL_wSBS1SBS5nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMwSBS1SBS5nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo =  try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMnoscaling_SP_nonexo_subsets_and_amalgamations <- try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMnoscalingnonexosubset_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambda2nonexo_SP = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambda2nonexo_", ct, "_signaturesPCAWG.RDS"))),
fullREDMonefixedlambdanonexo_SPSaA = try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/fullREDMonefixedlambdanonexo_", ct, "_signaturesPCAWGSaA.RDS"))),
dataset_all_sigs = load_PCAWG(ct = ct, typedata = "signaturesPCAWG", path_to_data = "../../data/"),
dataset_nucleotidesubstitution1 = load_PCAWG(ct = ct, typedata = "nucleotidesubstitution1", path_to_data = "../../data/"),
DMM = list(z_DMM=lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.z"), sep = ',', skip = 1))),
fit_DMM = lapply(1:8, function(k) try(read.table(paste0("../../data/roo_for_DMM_SPpcawg/DMM_output/", ct, "_signaturesPCAWG_all", k, "_dmm.fit"), sep = ' '))))
)
.x$dataset_nonexo <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenous$V1)
.x$dataset_nonexoSBS1SBS5 <- give_subset_sigs_TMBobj(.x$dataset_all_sigs, nonexogenouswSBS1SBS5$V1)
.x$colnames_notsorted_SP <- try(colnames(.x$dataset_all_sigs$Y))
.x$logR_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_notsorted_SP))
.x$colnames_nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexo$Y))
.x$logR_nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_nonexo_notsorted_SP))
## nonexo, with SBS1 and SBS5
.x$colnames_wSBS1SBS5nonexo_notsorted_SP <- try(colnames(.x$dataset_nonexoSBS1SBS5$Y))
.x$logR_wSBS1SBS5nonexo_notsorted_SP <- try(vector_cats_to_logR(.x$colnames_wSBS1SBS5nonexo_notsorted_SP))
return(.x)
}
read_info_list <- lapply(enough_samples, read_info)
names(read_info_list) <- enough_samples
read_info_list[[ct]]$DMM$z_DMM[[1]]
read_info_list[[ct]]$DMM$fit_DMM[[2]]
read_info_list[[ct]]$DMM$fit_DMM
sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)
plot(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2))
plot(as.vector(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))
as.vector(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2))
plot(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))
which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))
read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]]
read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3]
apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)
read_info_list[[ct]]$dataset_all_sigs$Y
head(melt(read_info_list[[ct]]$dataset_all_sigs$Y))
head(melt(read_info_list[[ct]]$dataset_all_sigs$Y))
apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)
head(cbind(melt(read_info_list[[ct]]$dataset_all_sigs$Y), apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)))
head(cbind(melt(read_info_list[[ct]]$dataset_all_sigs$Y), group=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)))
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)), group=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)),
aes(x=Var1, y=value, col=Var2))+geom_bar(stat = "identity")+facet_wrap(.~group)
read_info_list[[ct]]$dataset_all_sigs$Y
dim(read_info_list[[ct]]$dataset_all_sigs$Y)
dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c(1,2), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)),
aes(x=Var1, y=value, col=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM)
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c(1,2), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max)),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)
createBarplot
give_mycolours <- function(n){
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
myColors <- col_vector[1:n]
}
ncol(read_info_list[[ct]]$dataset_all_sigs$Y)
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = myColors(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))
give_mycolours <- function(n){
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unique(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
myColors <- col_vector[1:n]
}
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y))),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=2, rel_heights = c(1,1,3)))
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y))),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=3, rel_heights = c(1,1,3)))
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
ggplot(cbind(melt(normalise_rw(read_info_list[[ct]]$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(read_info_list[[ct]]$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(read_info_list[[ct]]$DMM$z_DMM[[which.min(unlist(sapply(read_info_list[[ct]]$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))+theme_bw(),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=3, rel_heights = c(1,2,2)))
dev.off()
give_DMM_plot <- function(TMB_obj){
ggplot(cbind(melt(normalise_rw(TMB_obj$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(TMB_obj$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(TMB_obj$DMM$z_DMM[[which.min(unlist(sapply(TMB_obj$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))+theme_bw()
}
createBarplot
give_DMM_plot <- function(TMB_obj){
ggplot(cbind(melt(normalise_rw(TMB_obj$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(TMB_obj$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(TMB_obj$DMM$z_DMM[[which.min(unlist(sapply(TMB_obj$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))+theme_bw()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullDM_no_small_sigs, names_cats = vector_cats_to_logR(colnames(give_subset_sigs_TMBobj(read_info_list[[ct]]$dataset_all_sigs,
sigs_to_remove = c('SBS13', 'SBS17a', 'SBS17b', 'SBS30'))$Y)), title = "Removing various sigs")),
give_DMM_plot(read_info_list[[ct]]),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=3, rel_heights = c(1,2,2)))
dev.off()
enough_samples$V1[2]
enough_samples[,1]
enough_samples
##-----------------------------------------------------------------------------------------------------##
ct <- "Breast-AdenoCA"
read_info_list[[ct]]$dataset_all_sigs
read_info_list[[ct]]$dataset_all_sigs$Y
rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)
sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y))
sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 1500
select_self <- function(i) i[i]
select_self(sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 1500)
select_self(sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 15000)
names(unique(select_self(sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 15000)))
unique(names(select_self(sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 15000)))
hypermut <- unique(names(select_self(sort(rowSums(read_info_list[[ct]]$dataset_all_sigs$Y)) > 15000)))
give_subset_sigs_TMBobj
give_subset_samples_TMBobj = function(sig_obj, samples_to_remove){
keep_samps <- !(rownames(sig_obj$Y) %in% samples_to_remove)
sig_obj$Y = sig_obj$Y[keep_samps,]
sig_obj$x = sig_obj$x[keep_samps,]
sig_obj$z = sig_obj$z[keep_samps,]
sig_obj$z <- sig_obj$z[,colSums(sig_obj$z)>0]
return(sig_obj)
}
give_subset_samples_TMBobj( read_info_list[[ct]]$dataset_all_sigs, samples_to_remove = hypermut)
fullRE_DMDL_nonhypermutated =  wrapper_run_TMB(object =give_subset_samples_TMBobj( read_info_list[[ct]]$dataset_all_sigs, samples_to_remove = hypermut),
model = "fullRE_DM", use_nlminb=T, smart_init_vals=F)
fullRE_DMDL_nonhypermutated
system("mkdir ../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/")
give_subset_samples_TMBobj( read_info_list[[ct]]$dataset_all_sigs, samples_to_remove = hypermut)
saveRDS(fullRE_DMDL_nonhypermutated, paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, fullRE_DMDL_nonhypermutated, '.RDS'))
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, fullRE_DMDL_nonhypermutated, '.RDS')
saveRDS(object = fullRE_DMDL_nonhypermutated, file = paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, fullRE_DMDL_nonhypermutated, '.RDS'))
fullRE_DMDL_nonhypermutated
saveRDS(object = fullRE_DMDL_nonhypermutated, file = paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, fullRE_DMDL_nonhypermutated, '.RDS'))
paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, fullRE_DMDL_nonhypermutated, '.RDS')
saveRDS(object = fullRE_DMDL_nonhypermutated, file = paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, 'fullRE_DMDL_nonhypermutated', '.RDS'))
saveRDS(object = give_subset_samples_TMBobj( read_info_list[[ct]]$dataset_all_sigs, samples_to_remove = hypermut), file = paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/particular_runs/", ct, 'ROO_nonhypermutated', '.RDS'))
ct
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features, names_cats = c(vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) })))))),
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples")),
give_DMM_plot(read_info_list[[ct]]),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=3, rel_heights = c(1,2,2)))
fullRE_DMDL_features
vector_cats_to_logR
logR_nucleotidesubs1 <- vector_cats_to_logR(sort(unlist( sapply(c('C', 'T'),
function(base){ paste0(base, '>', c('A', 'C', 'G', 'T')[! (c('A', 'C', 'G', 'T') == base)]) }))))
logR_nucleotidesubs1
plot_betas(fullRE_DMDL_features,
names_cats = logR_nucleotidesubs1),
plot_betas(fullRE_DMDL_features,
names_cats = logR_nucleotidesubs1)
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples"))
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples")
cowplot::plot_grid(plot_betas(fullRE_DMDL_features,
names_cats = logR_nucleotidesubs1),
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples"))
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../")
give_DMM_plot(read_info_list[[ct]])
read_info_list[[ct]]$DMM
read_info_list$`Bone-Osteosarc`$DMM
read_info_list[[ct]]$DMM
read_info_list[[ct]]$DMM$z_DMM
sapply(read_info_list[[ct]]$DMM$z_DMM, typeof)
give_DMM_plot <- function(TMB_obj){
if(all(sapply(read_info_list[[ct]]$DMM$z_DMM, typeof) == 'character')){
ggplot()+theme_bw()
}else{
ggplot(cbind(melt(normalise_rw(TMB_obj$dataset_all_sigs$Y)),
grouptiming=rep(c('Clonal','Subclonal'), each=dim(TMB_obj$dataset_all_sigs$Y)[1]/2),
groupDMM=paste0('DMM ', apply(TMB_obj$DMM$z_DMM[[which.min(unlist(sapply(TMB_obj$DMM$fit_DMM, `[`, 2)))]][,2:3], 1, which.max))),
aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = "identity")+facet_wrap(.~grouptiming+groupDMM, ncol=2)+
scale_fill_manual(name = "grp",values = give_mycolours(ncol(read_info_list[[ct]]$dataset_all_sigs$Y)))+theme_bw()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
}
give_DMM_plot(read_info_list[[ct]])
dev.off()
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features,
names_cats = logR_nucleotidesubs1),
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples")),
give_DMM_plot(read_info_list[[ct]]),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"), nrow=3, rel_heights = c(1,2,2)))
dev.off()
read_info_list[[ct]]$colnames_notsorted_SP
match(read_info_list[[ct]]$colnames_notsorted_SP, c('SBS9', 'SBS40'))
match( c('SBS9', 'SBS40'), read_info_list[[ct]]$colnames_notsorted_SP)
give_plot_bleeding(names_sigs =  c('SBS9', 'SBS40'),
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0))[match( c('SBS9', 'SBS40'), read_info_list[[ct]]$colnames_notsorted_SP)],
rel_path = "../../")
softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0))[match( c('SBS9', 'SBS40'), read_info_list[[ct]]$colnames_notsorted_SP)]
give_plot_bleeding <- function(names_sigs, abundances=NULL, rel_path='../../../'){
## rel_path: rel_path to main folder for GlobalDA
library(ggplot2)
source(paste0(rel_path, "code/1_create_ROO/helper_1_create_ROO.R"))
n <- 200
nlambda <- rpois(n, 260) ## number of mutations per observation
# names_sigs <- c('SBS1', 'SBS40', 'SBS3', 'SBS17a', 'SBS2')
k <- length(names_sigs)
sigs_cosmic <- read.table(paste0(rel_path, "data/cosmic/sigProfiler_SBS_signatures_2019_05_22.csv"),
stringsAsFactors = FALSE, sep = ',', header = TRUE)
rownames(sigs_cosmic) <- apply(sigs_cosmic, 1, function(i) paste0(substr(i[2], 1, 1), '[', i[1], ']', substr(i[2], 3, 3)))
sigs_cosmic <- sigs_cosmic[,-c(1:2)]
## get exposures
if(is.null(abundances)){
exposures <- MCMCpack::rdirichlet(n=n, rep(1/k, k))
}else{
exposures <- MCMCpack::rdirichlet(n=n, abundances*5)
}
nlambda_sig <- t(sapply(1:n, function(n_it) rowSums(rmultinom(n = nlambda[n_it], size=1, prob = exposures[n_it,]) ))) ## number of mutations per observation per signature
colnames(nlambda_sig) <- names_sigs
all(rowSums(nlambda_sig) == nlambda)
## get mutations
## for each signature, choose at random a mutation it creates
count_obs <- t(apply(nlambda_sig, 1, function(i) {rowSums(sapply(1:k, function(i_sig) rowSums(rmultinom(n = i[i_sig], size=1, prob=sigs_cosmic[,names_sigs[i_sig]] )  ))) }))
all(rowSums(count_obs) == nlambda)
min(nlambda)
colnames(count_obs) <- rownames(sigs_cosmic)
rownames(count_obs) <- paste0('Sample', 1:n)
## get exposures (recovery)
count_obs_sample = count_obs[1,]
sigsQP <- t(apply(count_obs, 1, function(count_obs_sample) sum(count_obs_sample)*QPsig(tumour.ref = rep(names(count_obs_sample), count_obs_sample),
signatures.ref = as(sigs_cosmic[,names_sigs], 'matrix'))))
df_compare_bleeding <- cbind.data.frame(exposuressigsQP=round(as.vector(sigsQP)),
exposures=as.vector(nlambda_sig),
sig=rep(names_sigs, each=n),
sample=rep(rownames(count_obs), k))#,
#expSBS3=rep(nlambda_sig[,'SBS3'], k))
ggplot(df_compare_bleeding, aes(x=exposures, y=exposuressigsQP, shape=exposures>exposuressigsQP))+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
geom_point()+facet_wrap(.~sig)+theme_bw()
}
give_plot_bleeding(names_sigs =  c('SBS9', 'SBS40'),
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0))[match( c('SBS9', 'SBS40'), read_info_list[[ct]]$colnames_notsorted_SP)],
rel_path = "../../")
pdf(paste0("../../results/results_TMB/pcawg/reports_per_cancer_type/", ct, "_report2.pdf"), onefile=FALSE, height = 12)
print(cowplot::plot_grid(cowplot::plot_grid(plot_betas(fullRE_DMDL_features,
names_cats = logR_nucleotidesubs1),
plot_betas(fullRE_DMDL_nonhypermutated, names_cats = read_info_list[[ct]]$logR_notsorted_SP, title = "Removing hypermut samples")),
give_DMM_plot(read_info_list[[ct]]),
give_plot_bleeding(names_sigs = read_info_list[[ct]]$colnames_notsorted_SP,
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0)),
rel_path = "../../"),
give_plot_bleeding(names_sigs =  c('SBS9', 'SBS40'),
abundances = softmax(c(python_like_select_name(read_info_list[[ct]]$diagRE_DMDL_SP$par.fixed, 'beta')[c(T,F)], 0))[match( c('SBS9', 'SBS40'), read_info_list[[ct]]$colnames_notsorted_SP)],
rel_path = "../../"),
nrow=4, rel_heights = c(1,2,2, 1)))
dev.off()
