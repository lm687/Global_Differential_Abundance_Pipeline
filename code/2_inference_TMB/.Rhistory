table(DA_bool, LNM=pvals_LNM_adj <= 0.05)
## which datasets are TP, TN, FP and FN?
which_contingency = lapply(list(pvals_M_adj, pvals_DM_adj#, pvals_LNM_adj
), function(i) list(TP = as.vector(which(DA_bool & (i <= 0.05))),
TN = as.vector(which(!DA_bool & (i > 0.05))),
FP = as.vector(which(!DA_bool & (i <= 0.05))),
FN = as.vector(which(DA_bool & (i > 0.05)))))
names(which_contingency) = c('M', 'DM')#, 'LNM')
## It doesn't seem to have to do with the number of patients in the datasets
lapply(which_contingency, function(i) sapply(i, function(j) sapply(j, function(k) datasets[[k]]$n)))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
## compare estimated betas to actual betas
for(j in which(sapply(runs_M, typeof) %in% c("logical", "character"))){
runs_M[[j]] = list(par.fixed=c(beta=rep(NA, 2*(datasets[[j]]$d-1)))) ## *2 for slope and intercept
}
for(j in which(sapply(runs_DM, typeof) %in% c("logical", "character"))){
runs_DM[[j]] = list(par.fixed=c(beta=rep(NA, 2*(datasets[[j]]$d-1)))) ## *2 for slope and intercept
}
# for(j in which(sapply(runs_LNM, typeof) %in% c("logical", "character"))){
#   runs_LNM[[j]] = list(par.fixed=c(beta=rep(NA, 2*(datasets[[j]]$d-1)))) ## *2 for slope and intercept
# }
## beta slopes are not well recovered, even though in fullinterceptRE_ME_multinomial.R it's done well!
true_slope_dataset = (sapply(datasets, function(i) i$beta[2,]))
inferred_slope_M = sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)))
par(mfrow=c(1,1))
plot(unlist(true_slope_dataset),
unlist(inferred_slope_M))
abline(coef = c(0, 1))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
pairs(df_beta_recovery[,c('pvals_M_adj', 'pvals_DM_adj'#, 'pvals_LNM_adj'
)], main='Pairs plot of p-values')
pairs(df_beta_recovery[,c('beta_est_M', 'beta_est_DM'#, 'beta_est_LNM'
)], main='Pairs plot of betas')
table(na.omit(df_beta_recovery$pvals_M_adj <= 0.05))
table(na.omit(df_beta_recovery$pvals_DM_adj <= 0.05))
table(na.omit(df_beta_recovery$pvals_LNM_adj <= 0.05))
#-------------------------------------------------------------------------------------------------#
## zero slopes are not well detected
ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=beta_gamma_shape))+geom_point()+
geom_abline(intercept = 0, slope = 1)
#-------------------------------------------------------------------------------------------------#
## plotting separately the differentially abundant (right) and non-differentially abundant (left) datasets
ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=n))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~bool_zero_true_beta, scales = "free_x")
df_beta_recovery$bool_zero_true_beta = df_beta_recovery$beta_true == 0
#-------------------------------------------------------------------------------------------------#
## zero slopes are not well detected
ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=beta_gamma_shape))+geom_point()+
geom_abline(intercept = 0, slope = 1)
#-------------------------------------------------------------------------------------------------#
## plotting separately the differentially abundant (right) and non-differentially abundant (left) datasets
ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=n))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~bool_zero_true_beta, scales = "free_x")
df_beta_recovery$bool_zero_true_beta = factor(df_beta_recovery$beta_true == 0, levels=c(TRUE, FALSE))
#-------------------------------------------------------------------------------------------------#
## plotting separately the differentially abundant (right) and non-differentially abundant (left) datasets
ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=n))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~bool_zero_true_beta, scales = "free_x")
## Multinomial
p <- ggplot(df_beta_recovery,
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~bool_zero_true_beta, scales = "free_x")
gp <- ggplotGrob(p); facet.columns <- gp$layout$l[grepl("panel", gp$layout$name)]; gp$widths[facet.columns] <- gp$widths[facet.columns] * c(1,4); grid::grid.draw(gp)
plot(gp)
grid::grid.draw(gp)
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
facet_wrap(.~idx)
(runs_M$`20200625_10_100_10_3_0_dataset`)
sdreport(runs_M$`20200625_10_100_10_3_0_dataset`)
runs_M$`20200625_10_100_10_3_0_dataset`[,2]
runs_M$`20200625_10_100_10_3_0_dataset`[[1]]
runs_M$`20200625_10_100_10_3_0_dataset`[[2]]
runs_M$`20200625_10_100_10_3_0_dataset`$env$random
runs_M$`20200625_10_100_10_3_0_dataset`$env$ADreportDims
summary.sdreport(runs_M$`20200625_10_100_10_3_0_dataset`)
summary.sdreport(runs_M$`20200625_10_100_10_3_0_dataset`)[,2]
select_slope_2(python_like_select_name(summary.sdreport(runs_M$`20200625_10_100_10_3_0_dataset`)[,2], "beta"))
select_slope_2(python_like_select_name(summary.sdreport(runs_M$`20200625_10_100_10_3_0_dataset`)[,2], "beta"), verbatim = FALSE)
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE)))
unlist(sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))))
as.numeric(unlist(sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE)))))
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = as.numeric(unlist(sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))))),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = as.numeric(unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE)))),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
as.numeric(unlist(sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE)))))
length(as.numeric(unlist(sapply(runs_M, function(i) try(select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))))))
length(unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))))
as.numeric(unlist(sapply(runs_M, function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != .betas){
rep(NA, length(.betas))
}
})))
length(as.numeric(unlist(sapply(runs_M, function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != .betas){
rep(NA, length(.betas))
}
}))))
sapply(runs_M, function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != .betas){
rep(NA, length(.betas))
}
})
sapply(runs_M[1:10], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != .betas){
rep(NA, length(.betas))
}
})
i=runs_M[[1]]
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.x
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != .betas){
rep(NA, length(.betas))
}
length(.x)
as.numeric(unlist(sapply(runs_M, function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
rep(NA, length(.betas))
}
})))
as.numeric(unlist(sapply(runs_M[1:10], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
rep(NA, length(.betas))
}
})))
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
rep(NA, length(.betas))
}
unlist(sapply(runs_M, function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:10], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:50], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:100], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:75], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:60], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:65], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:70], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:68], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[1:67], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
unlist(sapply(runs_M[68], function(i){
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
.betas = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE)
if(length(.x) != length(.betas)){
.x = rep(NA, length(.betas))
}
.x
}))
runs_M[[68]]
length(runs_M[[68]])
length(runs_M[[67]])
length(runs_M[[68]])
unlist(sapply(runs_M, function(i){
if(length(i) == 1){ ## they are just NAs
.x = i$par.fixed ## repeat the NAs
}else{
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
}
.x
}))
#-------------------------------------------------------------------------------------------------#
give_stderr = function(i){
if(length(i) == 1){ ## they are just NAs
.x = i$par.fixed ## repeat the NAs
}else{
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
}
.x
}
unlist(sapply(runs_M, give_stderr))
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, give_stderr)),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, give_stderr)),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
length(unlist(sapply(runs_DM, give_stderr)))
length(unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))))
length(unlist(sapply(runs_M, give_stderr)))
runs_M[[68]]
}
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, give_stderr)),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, give_stderr)),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
#-------------------------------------------------------------------------------------------------#
give_stderr = function(i){
if(length(i) == 1){ ## they are just NAs
.x = select_slope_2(python_like_select_name(i$par.fixed)) ## repeat the NAs
}else{
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
}
.x
}
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, give_stderr)),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, give_stderr)),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
df_beta_recovery
#-------------------------------------------------------------------------------------------------#
give_stderr = function(i){
if(length(i) == 1){ ## they are just NAs
.x = select_slope_2(python_like_select_name(i$par.fixed, "beta")) ## repeat the NAs
}else{
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
}
.x
}
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, give_stderr)),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, give_stderr)),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
warnings()
#-------------------------------------------------------------------------------------------------#
give_stderr = function(i){
if(length(i) == 1){ ## they are just NAs
.x = select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE) ## repeat the NAs
}else{
.x = (select_slope_2(python_like_select_name(summary.sdreport(i)[,2], "beta"), verbatim = FALSE))
}
.x
}
#-------------------------------------------------------------------------------------------------#
## here there is only the intercept
df_beta_recovery = cbind.data.frame(beta_true = unlist(sapply(datasets, function(i) i$beta[2,])),
idx = rep(1:length(datasets) , unlist(sapply(datasets, function(i) i$d))-1),
d =  rep(unlist(sapply(datasets, function(i) i$d)), unlist(sapply(datasets, function(i) i$d))-1),
n =  rep(unlist(sapply(datasets, function(i) i$n)), unlist(sapply(datasets, function(i) i$d))-1),
beta_gamma_shape =  rep(unlist(sapply(datasets, function(i) i$beta_gamma_shape)), unlist(sapply(datasets, function(i) i$d))-1),
beta_est_M = unlist(sapply(runs_M, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_M = unlist(sapply(runs_M, give_stderr)),
beta_est_DM = unlist(sapply(runs_DM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
beta_stderr_DM = unlist(sapply(runs_DM, give_stderr)),
# beta_est_LNM = unlist(sapply(runs_LNM, function(i) select_slope_2(python_like_select_name(i$par.fixed, "beta"), verbatim = FALSE))),
pvals_M_adj=rep(pvals_M_adj, unlist(sapply(datasets, function(i) i$d))-1),
pvals_DM_adj=rep(pvals_DM_adj, unlist(sapply(datasets, function(i) i$d))-1),
# pvals_LNM_adj=rep(pvals_LNM_adj, unlist(sapply(datasets, function(i) i$d))-1)
DA_bool=rep(DA_bool, unlist(sapply(datasets, function(i) i$d))-1),
idx_within_dataset=unlist(sapply(datasets, function(i) 1:(i$d-1))))
df_beta_recovery$bool_zero_true_beta = factor(df_beta_recovery$beta_true == 0, levels=c(TRUE, FALSE))
pairs(df_beta_recovery[,c('pvals_M_adj', 'pvals_DM_adj'#, 'pvals_LNM_adj'
)], main='Pairs plot of p-values')
pairs(df_beta_recovery[,c('beta_est_M', 'beta_est_DM'#, 'beta_est_LNM'
)], main='Pairs plot of betas')
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
facet_wrap(.~idx)
#facet_wrap(.~bool_zero_true_beta, scales = "free_x")
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
facet_wrap(.~idx)
head(df_beta_recovery)
#facet_wrap(.~bool_zero_true_beta, scales = "free_x")
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx)
#facet_wrap(.~bool_zero_true_beta, scales = "free_x")
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx, scales='free_x')
#facet_wrap(.~bool_zero_true_beta, scales = "free_x")
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx, scales='free_x')
ggplot(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 6, width = 4)
#facet_wrap(.~bool_zero_true_beta, scales = "free_x")
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx, scales='free_x')
ssave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 6, width = 4)
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 6, width = 4)
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 10, width = 8)
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 6, width = 8)
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr.pdf"), height = 8, width = 8)
gp <- ggplotGrob(p); facet.columns <- gp$layout$l[grepl("panel", gp$layout$name)]; gp$widths[facet.columns] <- gp$widths[facet.columns] * c(1,4); grid::grid.draw(gp)
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
facet_wrap(.~idx)
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~bool_zero_true_beta, scales = "free_x")
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~(pvals_M_adj<0.05), scales = "free_x")
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr_nonDA.pdf"), height = 8, width = 8)
## Looking at true zeros
## i.e. runs where all beta slopes are zero
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~(pvals_M_adj<0.05), scales = "free_x")
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_nonDA.pdf"), height = 8, width = 8)
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx, scales='free_x')
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr_nonDA.pdf"), height = 8, width = 8)
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_nonDA.pdf"), height = 3, width = 8)
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=(beta_true), y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_abline(intercept = 0, slope = 1)+facet_wrap(.~(pvals_M_adj<0.05), scales = "free_x")
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_nonDA.pdf"), height = 3, width = 8)
ggplot(df_beta_recovery[!(df_beta_recovery$DA_bool),],
aes(x=idx_within_dataset, y=(beta_est_M), col=(pvals_M_adj<0.05)))+geom_point()+
geom_errorbar(aes(ymin=beta_est_M-beta_stderr_M, ymax=beta_est_M+beta_stderr_M), width=.2,
position=position_dodge(.9))+
facet_wrap(.~idx, scales='free_x')
ggsave(paste0("../../results/TMB/", dataset_generation, "_betaslopes_stderr_nonDA.pdf"), height = 8, width = 8)
