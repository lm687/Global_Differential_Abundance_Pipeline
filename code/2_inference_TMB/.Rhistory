View(X20191107_auc)
PDS_PDO$sample <- as.factor(PDS_PDO$sample)
PDS_PDO$sample <- as.factor(PDS_PDO$sample)
PDS_PDO.plot<- ggplot(data = PDS_PDO, aes(auc_ll5.sph, auc_ll5.org, colour = sample))+
geom_point() +
labs(x="Patient-derived spheroids", y="Patient-derived organoids")+
theme_classic() +
geom_smooth(method=lm, se=FALSE)
cor.test(PDS_PDO$auc_ll5.org, PDS_PDO$auc_ll5.sph, method = "pearson", conf.level = 0.95)
plot(PDS_PDO.plot)
passagesorganoids <- read_csv ("../data/AUCdifferentPassagesW.csv")
passagesorganoids$sample <- as.factor(passagesorganoids$sample)
passagesorganoids<-spread(passagesorganoids, key=passage, value=AUC)
passagesorganoid.plot<- ggplot(data = passagesorganoids, aes(early, late, colour = sample))+
geom_point() +
theme_classic() +
geom_smooth(method=lm)
plot(passagesorganoid.plot)
bioreporganoids <- read_csv ("../data/AUCbiolrepW.csv")
bioreporganoids$sample <- as.factor(bioreporganoids$sample)
bioreporganoids<-spread(bioreporganoids, key=replicate, value=AUC)
bioreporganoid.plot<- ggplot(data = bioreporganoids, aes(rep1, rep2, colour = sample))+
geom_point() +
theme_classic() +
geom_smooth(method=lm)
cor.test(bioreporganoids$rep1, bioreporganoids$rep2, method = "pearson", conf.level = 0.95)
plot(bioreporganoid.plot)
install.packages("googlesheets")
googlesheets::gs_url("https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0")
remove.packages("googlesheets")
install.packages('gsheet')
library(gsheet)
gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file = gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
summary_file$`<!DOCTYPE html>`
summary_file = gsheet2text('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file = gsheet2text('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
summary_file = gsheet2tbl('https://docs.google.com/spreadsheets/d/1ulHgNIMsoFECt8cim2va5pTXu3LaCJlqaiSfvTCPAxs/edit#gid=0"')
summary_file
xtable::xtable(summary_file)
require(GSVA)
require(GSVAdata)
c2BroadSets
#--------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------#
data(c2BroadSets) ## from GSVAdata
c2BroadSets
c2BroadSets$NAKAMURA_CANCER_MICROENVIRONMENT_UP
c2BroadSets
c2BroadSets$NAKAMURA_CANCER_MICROENVIRONMENT_DN
names(c2BroadSets)
names(c2BroadSets)[grep('microenvironment', names(c2BroadSets))]
View(names(c2BroadSets))
vignette(gsvaData)
vignette("gsvaData")
vignette("GSVAData")
vignette
vignette("GSVAdata")
?GSVAdata
d <- 5
beta = rbind(runif(d-1), runif(d-1))
beta
n <- 200
rep(c(0,1), each=n2)
rep(c(0,1), each=n)
x = cbind(rep(1, n*2), rep(c(0,1), each=n))
x %*% beta
probs = x %*% beta
lambda_nmuts <- 150
beta = rbind(runif(d-1), runif(d-1))
x = cbind(rep(1, n*2), rep(c(0,1), each=n))
probs = x %*% beta
apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1)
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
Y
probs
probs = cbind(x %*% beta, 0)
probs
source("~/Documents/PhD/GlobalDA/code/2_inference_TMB/helper_TMB.R")
probs = softmax(cbind(x %*% beta, 0))
probs
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## are there bias in standard multinomial regression from nnet?
library(nnet)
nnet::multinom(formula = Y~x)
res_multinom = nnet::multinom(formula = Y~x)
res_multinom
res_multinom$coefnames
coef(res_multinom)
res_multinom = nnet::multinom(formula = Y~x[,2])
res_multinom
coef(res_multinom)
beta
Y
Y[,ncol(Y):1]
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
coef(res_multinom)
beta
coef(res_multinom)[(d-1):1,]
coef(res_multinom)[(d-1):1,]
t(beta)
list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta))
give_est = function()
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
}
give_est = function(){
probs = softmax(cbind(x %*% beta, 0))
Y = t(apply(probs, 1, rmultinom, size = rpois(n = 1, lambda = lambda_nmuts), n = 1))
image(Y)
## nnet uses first category as baseline
res_multinom = nnet::multinom(formula = Y[,ncol(Y):1]~x[,2])
return(list(est_beta=coef(res_multinom)[(d-1):1,],
true_beta=t(beta)))
}
ests = replicate(n = 100, give_est())
ests
ests[est_beta,]
ests['est_beta',]
sapply(ests['est_beta',], as.vector)
head(melt(sapply(ests['est_beta',], as.vector)))
library(reshape2)
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
library(ggplot2)
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_boxplot()
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ests
sapply(ests['est_beta',], as.vector)
beta
as.vector(beta)
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(beta))
bias
ggplot(bias, aes(x=Var1, group=Var1, y=value))+geom_boxplot()
ggplot(melt(bias), aes(x=Var1, group=Var1, y=value))+geom_boxplot()
bias
bias = melt(bias)
bias
bias$Var1
bias$type_beta = rep('Intercept', 'Slope')
bias$type_beta
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*2*n)
bias
dim(bias)
d-1
n
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
head(bias)
1:(d-1)
rep(c(1:(d-1), each=2))
rep(1:(d-1), each=2)
rep(rep(1:(d-1), each=2), n/2)
length(rep(rep(1:(d-1), each=2), n/2))
dim(bias)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ests
ests['est_beta',]
head(melt(ests['est_beta',]))
ests['est_beta',]
head(melt(as.vector(ests['est_beta',])))
head(melt(sapply(ests['est_beta',], as.vector)))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()
beta
as.vector(beta)
cbind(1:(2*(d-1)), as.vector(beta))
cbind.data.frame(Var11:(2*(d-1)), value=as.vector(beta))
cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_point()+
geom_line(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(beta)), aes(x=Var1, y=value))
beta
ests['est_beta',
]
bias = sapply(ests['est_beta',], function(i) as.vector(i) - as.vector(t(beta)))
bias = melt(bias)
bias$type_beta = rep(c('Intercept', 'Slope'), (d-1)*n/2)
bias$idx_param = rep(rep(1:(d-1), each=2), n/2)
bias$param = paste0(bias$type_beta, bias$idx_param)
ggplot(bias, aes(x=param, group=param, y=value))+geom_boxplot()+facet_wrap(.~type_beta, scales = "free_x")
ggplot(melt(sapply(ests['est_beta',], as.vector)), aes(x=Var1, group=Var1, y=value))+geom_violin()+
geom_point(data = cbind.data.frame(Var1=1:(2*(d-1)), value=as.vector(t(beta))), aes(x=Var1, y=value))
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(jcolors)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/pcawg_robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar"))
TMB::compile("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial"))
TMB::compile("mm_multinomial/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_ME_dirichletmultinomial"))
# TMB::compile("mm_multinomial/fullRE_ME_multinomial_categorical.cpp", "-std=gnu++17")
# dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_categorical"))
# TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical.cpp", "-std=gnu++17")
# dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical"))
TMB::compile("mm_multinomial/diagRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_dirichletmultinomial_single_lambda"))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda"))
TMB::compile("mm_multinomial/diagRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_dirichletmultinomial_single_lambda"))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
# table(samples_files[,1], samples_files[,2])
# ct = "Bladder-TCC" #samples_files[1,1]
# typedata =nucleotidesubstitution3  #"signatures" #samples_files[1,2]
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
#-------------------------------------------------------------------------------------------------#
enough_samples = readLines("~/Desktop/CT_sufficient_samples.txt")
df_all_samples = data.frame(do.call('rbind', lapply(enough_samples, function(i) rbind(c(i, 'signatures'), c(i, "nucleotidesubstitution1")))))
dim(df_all_samples)
rm(list = ls())
setwd("/Users/morril01/Documents/PhD/GlobalDA/code/")
require(reshape2)
require(ggplot2)
require(ggrepel)
folder_objects="../data/roo/"
#----------------------------------------------------------------------------------------#
## Read all the ROO files which contain exposures in two groups
fles_in = list.files(folder_objects, full.names=TRUE)
roo_files = sapply(fles_in, readRDS)
#----------------------------------------------------------------------------------------#
roo_files
names(roo_files)
roo_files = roo_files[grep('signatures', names(roo_files))]
roo_files
names(roo_files)
baseli
basename(names(roo_files))
names(roo_files) = gsub("_signatures_ROO.RDS", "", basename(names(roo_files)))
names(roo_files)
roo_files
roo_files[[1]]
roo_files[[1]]
get_signatures = function(roo_obj){
attr(roo_obj,"count_matrices_active")[[1]]
}
get_signatures(roo_files[[1]])
get_signatures = function(roo_obj){
colnames(attr(roo_obj,"count_matrices_active")[[1]])
}
get_signatures(roo_files[[1]])
sapply(roo_files, get_signatures)
get_signatures(roo_files$`Skin-Melanoma.mucosal`)
roo_files$`Skin-Melanoma.mucosal`
get_signatures(roo_files$`Breast-DCIS`)
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(jcolors)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/pcawg_robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar"))
TMB::compile("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial"))
TMB::compile("mm_multinomial/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_ME_dirichletmultinomial"))
# TMB::compile("mm_multinomial/fullRE_ME_multinomial_categorical.cpp", "-std=gnu++17")
# dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial_categorical"))
# TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical.cpp", "-std=gnu++17")
# dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_categorical"))
TMB::compile("mm_multinomial/diagRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_dirichletmultinomial_single_lambda"))
TMB::compile("mm_multinomial/fullRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_dirichletmultinomial_single_lambda"))
TMB::compile("mm_multinomial/diagRE_dirichletmultinomial_single_lambda.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_dirichletmultinomial_single_lambda"))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
folder_robjs
folder_robjs_nlminb = "../../data/pcawg_robjects_cache/tmb_results/nlminb/"
results_TMB_fullRE_DM_nlminb = lapply( python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DM_"), function(i) readRDS(paste0(folder_robjs_nlminb, i)))
names(results_TMB_fullRE_DM_nlminb) = sapply(python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DM_"), clean_name_fullRE)
results_TMB_fullRE_DM_nlminb
results_TMB_fullRE_M = lapply( python_like_select(list.files(folder_robjs), "^fullRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_M_"), clean_name_fullRE)
full_RE_DM = python_like_select(list.files(folder_robjs), "^fullRE_DM_"); full_RE_DM = full_RE_DM[-grep("_altpar_", full_RE_DM)]
results_TMB_fullRE_DM = lapply( full_RE_DM, function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DM) = sapply(full_RE_DM, clean_name_fullRE)
results_TMB_diagRE_DM = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DM_"), clean_name_fullRE)
results_TMB_diagRE_M = lapply( python_like_select(list.files(folder_robjs), "^diagRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_M_"), clean_name_fullRE)
results_TMB_fullRE_DMSL = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DMSL_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DMSL) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DMSL_"), clean_name_fullRE)
results_TMB_diagRE_DMSL = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DMSL_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DMSL) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DMSL_"), clean_name_fullRE)
results_TMB_fullRE_DM_nlminb = lapply( python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DM_"), function(i) readRDS(paste0(folder_robjs_nlminb, i)))
names(results_TMB_fullRE_DM_nlminb) = sapply(python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DM_"), clean_name_fullRE)
if(give_summary_runs){
#----------------------------------------------------------------------------------------------------#
## checking how many errors were there
## a) timeout
## b) non-positive-definite hessian
## c) good convergence
give_summary_of_runs(results_TMB_LNM, long_return = FALSE)
give_summary_of_runs(results_TMB_M, long_return = FALSE)
give_summary_of_runs(results_TMB_DM, long_return = FALSE)
# long and short version of summaries
sapply(give_summary_of_runs(results_TMB_LNM, long_return = TRUE), length)
give_summary_of_runs(results_TMB_M, long_return = TRUE)
results_TMB_M[['Biliary-AdenoCAnucleotidesubstitution1']]
results_TMB_DM[['Biliary-AdenoCAnucleotidesubstitution1']]
results_TMB_LNM[['Biliary-AdenoCAnucleotidesubstitution1']]
## for creating spreadsheet
for(i in sort(unique(samples_files$CT))){cat(i, '\n')}
## see if nuc1 is positive semi-definite or has some problem
for(i in sort(unique(samples_files$CT))){cat(i, '\n')}
length(unique(samples_files$CT))
length(results_TMB_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))])
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# for(i in sapply(results_TMB_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
#        give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution3", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_fullRE_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_fullRE_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution3", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_fullRE_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# for(i in sapply(results_TMB_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution3", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
# for(i in sapply(results_TMB_fullRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_fullRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution3", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_fullRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_fullRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_fullRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
## uncorrelated RE
for(i in sapply(results_TMB_diagRE_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_diagRE_M[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_diagRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
for(i in sapply(results_TMB_diagRE_DM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
give_summary_per_sample)){cat(i,'\n')}
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
# for(i in sapply(results_TMB_LNM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution1", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_LNM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "nucleotidesubstitution3", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#
# for(i in sapply(results_TMB_LNM[sapply(as.character(unique(samples_files$CT)), function(i) paste0(i, "", "signatures", collapse=""))],
#                 give_summary_per_sample)){cat(i,'\n')}
#------------------------------------------------------------------------------------------------------------------------#
#------------------------------------------------------------------------------------------------------------------------#
stan_results = read.table("../inference_diagnostics20200828.csv", sep = ",", stringsAsFactors = FALSE, header = TRUE)
for(i in get_summary_stan("M", "nucleotidesubstitution1")){cat(i,'\n')}
for(i in get_summary_stan("M", "nucleotidesubstitution3")){cat(i,'\n')}
for(i in get_summary_stan("M", "signatures")){cat(i,'\n')}
for(i in get_summary_stan("DM", "nucleotidesubstitution1")){cat(i,'\n')}
for(i in get_summary_stan("DM", "nucleotidesubstitution3")){cat(i,'\n')}
for(i in get_summary_stan("DM", "signatures")){cat(i,'\n')}
for(i in get_summary_stan("LNM", "nucleotidesubstitution1")){cat(i,'\n')}
for(i in get_summary_stan("LNM", "nucleotidesubstitution3")){cat(i,'\n')}
for(i in get_summary_stan("LNM", "signatures")){cat(i,'\n')}
## showing that I was not doing the parallelising correctly
plot(stan_results$total.time..s., stan_results$real.time..s.)
plot(density(na.omit(stan_results$real.time..s./stan_results$total.time..s.)))
## see if there is one run for each combination, and no more
sort(table(apply(cbind(stan_results$CT, stan_results$features, stan_results$model), 1, paste0, collapse="")))
## there should be only one of each
all_runs_summary = lapply(list(results_TMB_M, results_TMB_diagRE_M, results_TMB_fullRE_M, results_TMB_fullRE_Mcat,
results_TMB_DM, results_TMB_diagRE_DM, results_TMB_fullRE_DM, results_TMB_fullRE_DMcat),
give_summary_of_runs2, long_return = T)
names(all_runs_summary) = c('results_TMB_M', 'results_TMB_diagRE_M', 'results_TMB_fullRE_M', 'results_TMB_fullRE_Mcat',
'results_TMB_DM', 'results_TMB_diagRE_DM', 'results_TMB_fullRE_DM', 'results_TMB_fullRE_DMcat')
all_runs_summary_melt = melt(all_runs_summary)
all_runs_summary_melt$ct = sapply(as.character(all_runs_summary_melt$value), function(i) gsub("nucleotidesubstitution1", "", gsub("signatures", "", i)))
all_runs_summary_melt$type = sapply(1:length(all_runs_summary_melt$ct), function(j) gsub(all_runs_summary_melt$ct[j], "", all_runs_summary_melt$value[j]))
all_runs_summary_melt$L1 = factor(all_runs_summary_melt$L1, levels = (c('results_TMB_M', 'results_TMB_diagRE_M', 'results_TMB_fullRE_M', 'results_TMB_fullRE_Mcat',
'results_TMB_DM', 'results_TMB_diagRE_DM', 'results_TMB_fullRE_DM', 'results_TMB_fullRE_DMcat')))
ggplot(all_runs_summary_melt, aes(group=value, y=L2))+geom_bar(position = 'stack')+facet_wrap(.~L1)
ggplot(all_runs_summary_melt, aes(x=interaction(ct, type), y=L2, col=type))+geom_point()+facet_wrap(.~L1)
ggplot(all_runs_summary_melt, aes(y=interaction(type, ct), x=L1, fill=L2))+geom_tile()+
theme(axis.text.x = element_text(angle = 45, hjust=1), legend.position = "bottom", legend.title = element_blank())+
scale_fill_manual(values = c("red", "#aef7b3", "#f7baae"))+guides(fill=guide_legend(nrow=2))
ggsave("../../results/results_TMB/pcawg/summary_runs.png", height = 12, width = 7)
}
# pvals_M = sapply(results_TMB_M, wald_TMB_wrapper)
# pvals_DM = sapply(results_TMB_DM, wald_TMB_wrapper)
# pvals_LNM = sapply(results_TMB_LNM, wald_TMB_wrapper)
pvals_M_fullRE = sapply(results_TMB_fullRE_M, wald_TMB_wrapper)
pvals_M_diagRE = sapply(results_TMB_diagRE_M, wald_TMB_wrapper)
pvals_M_fullRE_good = pvals_M_fullRE[sapply(results_TMB_fullRE_M, give_summary_per_sample) == "Good"]
pvals_DM_fullRE = sapply(results_TMB_fullRE_DM, function(i) try(wald_TMB_wrapper(i)))
pvals_DM_fullRE_good = pvals_DM_fullRE[sapply(results_TMB_fullRE_DM, give_summary_per_sample) == "Good"]
pvals_DM_diagRE = sapply(results_TMB_diagRE_DM, function(i) try(wald_TMB_wrapper(i)))
pvals_fullRE_DMSL = sapply(results_TMB_fullRE_DMSL, function(i) try(wald_TMB_wrapper(i)))
pvals_diagRE_DMSL = sapply(results_TMB_diagRE_DMSL, function(i) try(wald_TMB_wrapper(i)))
pvals_DM_fullRE_nlminb = sapply(results_TMB_fullRE_DM_nlminb, function(i) try(wald_TMB_wrapper(i)))
pvals_DM_fullRE_nlminb
sapply(list(M_single=pvals_M, DM_single=pvals_DM, LNM_single=pvals_LNM, M_full=pvals_M_fullRE, DM_full=pvals_DM_fullRE), max, na.rm = TRUE)
cat(paste0(sapply(c(pvals_DM_fullRE_nlminb < 0.05)[match(names(pvals_M_fullRE), names(pvals_DM_fullRE_nlminb))],
paste0, collapse='\t'), collapse = '\n'))
results_TMB_fullRE_DMSL_nlminb = lapply( python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DMSL_"), function(i) readRDS(paste0(folder_robjs_nlminb, i)))
names(results_TMB_fullRE_DMSL_nlminb) = sapply(python_like_select(list.files(folder_robjs_nlminb), "^fullRE_DMSL_"), clean_name_fullRE)
results_TMB_fullRE_DMSL_nlminb
sapply(results_TMB_fullRE_DMSL_nlminb, `[``, 'pdHess')
``
sapply(results_TMB_fullRE_DMSL_nlminb, `[`, 'pdHess')
table(sapply(results_TMB_fullRE_DMSL_nlminb, `[`, 'pdHess'))
pvals_DMSL_fullRE_nlminb = sapply(results_TMB_fullRE_DMSL_nlminb, function(i) try(wald_TMB_wrapper(i)))
cat(paste0(sapply(c(pvals_DMSL_fullRE_nlminb < 0.05)[match(names(pvals_M_fullRE), names(pvals_DMSL_fullRE_nlminb))],
paste0, collapse='\t'), collapse = '\n'))
results_TMB_diagRE_DMSL_nlminb = lapply( python_like_select(list.files(folder_robjs_nlminb), "^diagRE_DMSL_"), function(i) readRDS(paste0(folder_robjs_nlminb, i)))
names(results_TMB_diagRE_DMSL_nlminb) = sapply(python_like_select(list.files(folder_robjs_nlminb), "^diagRE_DMSL_"), clean_name_fullRE)
pvals_DMSL_diagRE_nlminb = sapply(results_TMB_diagRE_DMSL_nlminb, function(i) try(wald_TMB_wrapper(i)))
cat(paste0(sapply(c(pvals_DMSL_diagRE_nlminb < 0.05)[match(names(pvals_M_fullRE), names(pvals_DMSL_diagRE_nlminb))],
paste0, collapse='\t'), collapse = '\n'))
