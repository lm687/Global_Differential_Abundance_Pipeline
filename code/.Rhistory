get_next_split = function(tree){
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
which(.tree)
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
split_tree(.tree)
split_tree(.tree)
(.tree)
split(.tree, "")
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", , drop = drop)[[1]]
}
split_tree(.tree, "", drop = FALSE)
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", , drop = drop)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", drop = drop)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, ...){
strsplit(tree, split = "\\(|\\)|\\,", ....)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, ...){
strsplit(tree, split = "\\(|\\)|\\,", ...)[[1]]
}
split_tree(.tree,  drop = FALSE)
strsplit(.tree, "(?=[/&])", perl = TRUE)
strsplit(.tree, "(?=[/,])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(|/(])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(|/)])", perl = TRUE)[[1]]
split_tree = function(tree, keep=FALSE){
if(keep){
strsplit(tree, "(?=[/,|/(|/)])", perl = TRUE)[[1]]
}else{
strsplit(tree, split = "\\(|\\)|\\,", ...)[[1]]
}
}
split_tree(.tree,  keep = TRUE)
.tree = split_tree(.tree,  keep = TRUE)
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
which(.tree = "(")
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
which(.tree == "(")
which(.tree == ",")
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
min(which(.tree == "("))
min(which(.tree == ","))
.tree
nparsleft = 0; nparsright = 0
## .tree is a vector with split characters
dontstop = TRUE; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree == "("){
nparsleft = nparsleft + 1
}
if(.tree == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
}
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
nparsleft
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
.tree
.tree[1:idx]
list(.tree[1:idx], .tree[(idx+1):length(.tree)]
}
find_split = function(.tree){
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
if(min(which(.tree == "(")) < min(which(.tree == ","))){
prnths = TRUE
}else{
prnths = FALSE
}
if(prnths){
which_close = find_close_parenthesis(.tree)
}
}
give_leaves = function(tree){
.x = split_tree(tree)
.x[.x != ""]
}
give_nleaves = function(tree){
length(give_leaves(tree))
}
get_next_split = function(tree){
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
.tree = split_tree(.tree,  keep = TRUE)
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
if(nleaves > 1){
## split tree into two
get_next_split(tree)
}else{
## do not remove parenthesis; do not split
}
list(.tree[1:idx], .tree[(idx+1):length(.tree)])
list(.tree[1:idx], .tree[(idx+2):length(.tree)])
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(.tree[1:idx], .tree[(idx+2):length(.tree)]))
}
which_close = find_close_parenthesis(.tree)
which_close
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
rm(find_close_parenthesis)
give_split = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
which_close = give_split(.tree)
which_close
splts = give_split(.tree)
splts
find_split(splts[[1]])
find_split(splts[[2]])
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
## Should not be necessary:
z[!is.finite(z)] <- NA
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple")
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", col='blue')
length(x)
rnorm(23)
contour(rnorm(23), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
dev.off()
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
image(x, x, z)
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
library(optparse)
option_list = list(
make_option(c("--file_ROO"), type="character", default=NA,
help="File with the posterior, with directory included", metavar="character")
);
opt_parser = OptionParser(option_list=option_list)
opt = parse_args(opt_parser)
opt = list(); opt$file_ROO = "../data/roo/Biliary-AdenoCA_nucleotidesubstitution1_ROO.RDS"
roo_file = readRDS(opt$file_ROO)
fles_in = list.files("../data/roo/", full.names=TRUE)
setwd("/Users/morril01/Documents/PhD/GlobalDA/code/")
library(optparse)
option_list = list(
make_option(c("--file_ROO"), type="character", default=NA,
help="File with the posterior, with directory included", metavar="character")
);
opt_parser = OptionParser(option_list=option_list)
opt = parse_args(opt_parser)
opt = list(); opt$file_ROO = "../data/roo/Biliary-AdenoCA_nucleotidesubstitution1_ROO.RDS"
roo_file = readRDS(opt$file_ROO)
fles_in = list.files("../data/roo/", full.names=TRUE)
roo_files = sapply(fles_in, readRDS)
nrow(roo_file@count_matrices_all[[1]])
roo_file@count_matrices_active
types = do.call('rbind', sapply(gsub("_ROO.RDS", "", basename(fles_in)), strsplit, split = '_'))
types = data.frame(types, stringsAsFactors=FALSE)
colnames(types) = c('Cancer_type', 'Type_substitution')
give_filename = function(strct, strfeat){
paste0("../data/roo//", strct, '_', strfeat, "_ROO.RDS")
}
for(i in types$Cancer_type){
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
}
i
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
apply(.x@count_matrices_all[[2]]
)
.x
.x = roo_files[[(give_filename(i,j))]]
.x
for(i in types$Cancer_type){
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(is.na(.x)){
rep('-', 4)
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
}
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(is.na(.x)){
a = rep('-', 4)
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
for(i in types$Cancer_type){
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(is.na(.x)){
a = rep('-', 4)
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
}
warnings()
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(length(.x) == 1){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
i=types$Cancer_type[1]
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(length(.x) == 1){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
.x = roo_files[[(give_filename(i,j))]]
j=types$Type_substitution
.x = roo_files[[(give_filename(i,j))]]
roo_files
give_filename(i,j)
i
j
j=types$Type_substitution[1]
.x = roo_files[[(give_filename(i,j))]]
length(.x)
.x
typeof(.x)
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ","))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
for(i in types$Cancer_type){
t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
}
table_characteristics = lapply(types$Cancer_type, function(i){  t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
})
table_characteristics
table_characteristics = lapply(unique(types$Cancer_type), function(i){  t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
}))
})
table_characteristics
lapply(1:length(table_characteristics), function(i) cbind(unique(types$Cancer_type)[i], table_characteristics[[i]]))
table_characteristics = lapply(unique(types$Cancer_type), function(i){  data.frame(t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
})))
})
table_characteristics
lapply(1:length(table_characteristics), function(i) cbind(unique(types$Cancer_type)[i], table_characteristics[[i]]))
table_characteristics = lapply(unique(types$Cancer_type), function(i){  data.frame(t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
})))
})
table_characteristics = lapply(1:length(table_characteristics), function(i) cbind(unique(types$Cancer_type)[i], rownames(table_characteristics[[i]]), table_characteristics[[i]]))
table_characteristics
table_characteristics = lapply(unique(types$Cancer_type), function(i){  data.frame(t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
})))
})
table_characteristics = do.call('rbind', lapply(1:length(table_characteristics), function(i) cbind(unique(types$Cancer_type)[i], rownames(table_characteristics[[i]]), table_characteristics[[i]])))
table_characteristics
rownames(table_characteristics) = NULL
table_characteristics
head(table_characteristics)
colnames(table_characteristics)[1:2] = c('Cancer type', 'Feature type')
### why are there so few samples?
table_characteristics
### why are there so few samples?
library(dplyr)
head(table_characteristics)
colnames(table_characteristics)[1:2] = c('Cancer_type', 'Feature_type')
table_characteristics %>% group_by(Cancer_type)
table_characteristics %>% group_by(Feature_type) %>% sum(Number.of.samples)
table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(Number.of.samples)
table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(sum_all_ct=Number.of.samples)
table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(sum_all_ct=sum(Number.of.samples))
table_characteristics = lapply(unique(types$Cancer_type), function(i){  data.frame(t(sapply(unique(types$Type_substitution), function(j) {
.x = roo_files[[(give_filename(i,j))]]
if(typeof(.x) != 'S4'){
if(is.na(.x)){
a = rep('-', 4)
}
}else{
a = c(nrow(.x@count_matrices_all[[1]]), ncol(.x@count_matrices_all[[1]]), paste0(apply(.x@count_matrices_all[[1]], 2, sum), collapse = ", "),
paste0(apply(.x@count_matrices_all[[2]], 2, sum), collapse = ", "))
}
a = sapply(a, function(i) if(nchar(i)>50){paste0(substr(i, start =1, stop=77), '...')}else{i})
names(a) = c('Number of samples', 'Number of features', 'Sum of features for group 1', 'Sum of features for group 2')
a
})), stringsAsFactors = FALSE)
})
table_characteristics = do.call('rbind', lapply(1:length(table_characteristics), function(i) cbind(unique(types$Cancer_type)[i], rownames(table_characteristics[[i]]), table_characteristics[[i]])))
rownames(table_characteristics) = NULL
colnames(table_characteristics)[1:2] = c('Cancer_type', 'Feature_type')
table_characteristics$Number.of.samples
table_characteristics$Number.of.samples = as.numeric(table_characteristics$Number.of.samples)
table_characteristics$Number.of.features = as.numeric(table_characteristics$Number.of.features)
### why are there so few samples?
library(dplyr)
table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(sum_all_ct=sum(Number.of.samples))
table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(sum_all_ct=sum(Number.of.samples, na.rm = TRUE))
table_characteristics = table_characteristics %>% group_by(Feature_type) %>% dplyr::mutate(sum_all_ct=sum(Number.of.samples, na.rm = TRUE))
View(table_characteristics)
table_characteristics[table_characteristics$Feature_type == table_characteristics$Feature_type[1],]
table_characteristics[table_characteristics$Feature_type == table_characteristics$Feature_type[1],'Number.of.samples']
SUM(table_characteristics[table_characteristics$Feature_type == table_characteristics$Feature_type[1],'Number.of.samples'])
sum(table_characteristics[table_characteristics$Feature_type == table_characteristics$Feature_type[1],'Number.of.samples'])
sum(table_characteristics[table_characteristics$Feature_type == table_characteristics$Feature_type[1],'Number.of.samples'], na.rm = TRUE)
