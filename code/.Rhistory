selected_rows_all
posteriors_subset_beta = lapply(1:length(posteriors_all), function(idx_posterior) do.call('rbind', lapply(1:dim_beta, function(idx_feature) select_feature(df_with_slices = posteriors[[idx_posterior]]$beta, idx_select = idx_feature)[selected_rows[[idx_posterior]],])))
posteriors_subset_beta = lapply(1:length(posteriors), function(idx_posterior) do.call('rbind', lapply(1:dim_beta, function(idx_feature) select_feature(df_with_slices = posteriors[[idx_posterior]]$beta, idx_select = idx_feature)[selected_rows[[idx_posterior]],])))
posteriors_subset_beta
posteriors_subset_beta_all = rep(NA, length(posteriors_all)); posteriors_subset_beta[!is.na(lengths_beta_all)] = posteriors_subset_beta
posteriors_subset_beta_all
posteriors_subset_beta
!is.na(lengths_beta_all)
posteriors_subset_beta = lapply(1:length(posteriors), function(idx_posterior) do.call('rbind', lapply(1:dim_beta, function(idx_feature) select_feature(df_with_slices = posteriors[[idx_posterior]]$beta, idx_select = idx_feature)[selected_rows[[idx_posterior]],])))
posteriors_subset_beta_all = rep(NA, length(posteriors_all)); posteriors_subset_beta_all[!is.na(lengths_beta_all)] = posteriors_subset_beta
posteriors_subset_beta_all
sapply(posteriors_subset_beta, function(i) dim(i)[1])
sapply(posteriors_subset_beta_all, function(i) dim(i)[1])
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i) i[,1]))
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta, function(i) i[,1]))
posteriors_subset_beta_intercept
posteriors_subset_beta_slope = do.call('cbind', lapply(posteriors_subset_beta, function(i) i[,2]))
posteriors_subset_beta_slope
colnames(posteriors_subset_beta_intercept) = colnames(posteriors_subset_beta_slope) = vector_models
posteriors_subset_beta_intercept
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i){NA}else{i[,1]})}))
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,1]})})
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,1]}}))
posteriors_subset_beta_intercept
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,1]}}))
posteriors_subset_beta_slope = do.call('cbind', lapply(posteriors_subset_beta_slope, function(i){if(is.na(i)){NA}else{i[,2]}}))
posteriors_subset_beta_slope = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,2]}}))
posteriors_subset_beta_slope
colnames(posteriors_subset_beta_intercept) = colnames(posteriors_subset_beta_slope) = vector_models
pdf(paste0('../results/comparison_models/beta_pairs_', ct, '_', type_feature, '.pdf'))
if(dim(posteriors_subset_beta_intercept)[2] == 1){
plot(0, 0, main='Only one model - no comparison')
}else{
par(mfrow=c(2,1))
pairs(posteriors_subset_beta_intercept, main='Beta intercept pairs plot')
pairs(posteriors_subset_beta_slope, main='Beta slope pairs plot')
}
dev.off()
dim(posteriors_subset_beta_intercept)[2]
posteriors_subset_beta_intercept
apply(posteriors_subset_beta_intercept, 1, is.na())
apply(posteriors_subset_beta_intercept, 1, is.na)
t(apply(posteriors_subset_beta_intercept, 1, is.na))
t(apply(posteriors_subset_beta_intercept, 1, function(i) all(is.na(i))))
(apply(posteriors_subset_beta_intercept, 1, function(i) all(is.na(i))))
(apply(posteriors_subset_beta_intercept, 2, function(i) all(is.na(i))))
sum((apply(posteriors_subset_beta_intercept, 2, function(i) all(is.na(i)))))
sum(!(apply(posteriors_subset_beta_intercept, 2, function(i) all(is.na(i)))))
if(sum(!(apply(posteriors_subset_beta_intercept, 2, function(i) all(is.na(i))))) == 1){
plot(0, 0, main='Only one model - no comparison')
}else{
par(mfrow=c(2,1))
pairs(posteriors_subset_beta_intercept, main='Beta intercept pairs plot')
pairs(posteriors_subset_beta_slope, main='Beta slope pairs plot')
}
dev.off()
dev.off()
dim(posteriors[[1]]$u) ## [nits, n, d-1]
dim(posteriors[[1]]$beta) ### [nits, 2, d-1]
dim(objects_sigs_per_CT[[type_feature]][[ct]][[1]]) ## [n,d]
match_file = match(gsub("_active", "", rownames(objects_sigs_per_CT[[type_feature]][[ct]][[1]])),
sapply(files_donors$File.Name, function(i) strsplit(i, '[.]')[[1]][1]))
rownames(objects_sigs_per_CT[[type_feature]][[ct]][[1]])
files_donors[match_file,c('ICGC.Donor','File.Name') ]
match_file
objects_sigs_per_CT[[type_feature]]
ct
match_file = match(gsub("_active", "", rownames(objects_sigs_per_CT[[type_feature]][[ct_raw]][[1]])),
sapply(files_donors$File.Name, function(i) strsplit(i, '[.]')[[1]][1]))
match_file
rownames(objects_sigs_per_CT[[type_feature]][[ct]][[1]])
files_donors[match_file,c('ICGC.Donor','File.Name') ]
age_donors = donors[match(files_donors[match_file,]$ICGC.Donor, donors$icgc_donor_id),]
age_donors = age_donors[!is.na(age_donors$icgc_donor_id),c('icgc_donor_id', 'donor_age_at_last_followup')]
nfeatures = dim(posteriors[[1]]$u)[3]
png(paste0("../results/link_clinical/age_u_", ct, '_', type_feature, '.png'),
width = 3*1.7, height = 3*length(posteriors)*1.7, units = "in", res = 300)
par(mfrow=c(length(posteriors),1))
for(idx_model in 1:length(posteriors)){
if(length(rep(age_donors$donor_age_at_last_followup, each=dim(posteriors[[idx_model]]$u)[1])) != length(as.vector(posteriors[[idx_model]]$u))){stop()}
plt_age = cbind(rep(age_donors$donor_age_at_last_followup, each=dim(posteriors[[idx_model]]$u)[1]),
as.vector(posteriors[[idx_model]]$u))
plt_age = plt_age[!is.na(plt_age[,1]),]
if(dim(plt_age)[1] > 0){
plt_age = plt_age[sample(1:nrow(plt_age), 2000),]
plot(plt_age)
}else{
plot(0,0)
}
}
dev.off()
plot_bool = T
name_model=vector_models[1]
bool_data_avilable[name_model]
name_model='DM'
bool_data_avilable[name_model]
npatientsx2 = dim(posteriors_all[[name_model]]$u)[2]
patient_idx = 1
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(t(apply(do.call('cbind', select_person(posteriors_all[[1]]$alpha, patient_idx)),
1, MCMCpack::rdirichlet, n=1)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
name_model
posteriors_all[[1]]
posteriors_all[[name_model]]
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(t(apply(do.call('cbind', select_person(posteriors_all[[name_model]]$alpha, patient_idx)),
1, MCMCpack::rdirichlet, n=1)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
patient_idx=1
select_person(posteriors_all[[name_model]]$alpha, patient_idx)
posteriors_all[[name_model]]
posteriors_all[[name_model]]$alpha
names(posteriors_all[[name_model]])
length(posteriors_all)
names(posteriors_all)
posteriorsDM
posteriors_all = lapply(vector_models, function(mdel) ct_in_inference_results_list[[mdel]][grepl(ct, ct_in_inference_results_list[[mdel]])])
posteriors_all
vector_models
files_rdata = paste0(uuid_flder, posteriors_all)
files_rdata
#########################################################
################### Work in progress ####################
#########################################################
## Comparison of simulated results from the inferred parameters, for D-M vs simpler Multinomial
debug = TRUE
if(debug){
rm(list = ls())
setwd("/Users/morril01/Documents/PhD/GlobalDA/code/")
}
library(optparse)
library(rstan)
library(ggplot2)
library(dplyr)
library(reshape2)
library(MCMCpack)
library(plyr)
library(CompSign)
source("3_analysis/helper/helper_analyse_posteriors.R")
source("3_analysis/helper/helper_simulation.R")
vector_models = c('M', 'DM', 'LNM')
nits = 20000
donors = read.table("../data/restricted/pcawg/icgc-dataset-1591612699408/donor.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
files_donors = read.table("../data/restricted/pcawg/repository_1567600367.tsv",
stringsAsFactors = FALSE, sep = "\t", header = TRUE)
## Read in ROO objects
list_CT = suggested_list_ct()
#type_features = c('nucleotidesubstitution1', 'nucleotidesubstitution3', 'signatures')
type_features = c('signatures')
it_features = type_features[1]
source("3_analysis/helper/load_ROO.R")
opt=list();
uuid_flder =  "../data/inference/"
# fles = paste0(flder, opt$file_in)
# posteriorsDM =  "DM_PCAWG_Nits7000_signatures_PRAD-CA_f852b23b-fba9-4d39-8b72-e8c9dde15165.Rdata"
# posteriorsM = "M_PCAWG_Nits7000_signatures_PRAD-CA_bd605743-1434-408f-bd27-901c978ff354.Rdata"
#
# posteriorsM = "M_PCAWG_Nits7000_signatures_LAML-KR_ccf08bf9-8675-4205-9345-aee2439456ef.Rdata"
# posteriorsDM =  "DM_PCAWG_Nits7000_signatures_LAML-KR_10afa802-2310-401c-b75b-a20871f54de4.Rdata"
# posteriorsDM =  "DM_PCAWG_Nits7000_signatures_LAML-KR_cd2d3c87-acca-4ef8-8c2b-f2f23184d62d.Rdata"
####################################################################################################
## Checking dimensions of posteriors (number of features should be the same in M and DM)
####################################################################################################
## check when this happens
all_fles = lapply(uuid_flder, list.files)
# df = cbind(model=rep(c('DM', 'M', 'LNM'), sapply(all_fles, length)),
df = cbind(model=rep(vector_models, sapply(all_fles, length)),
feature_type=sapply(unlist(all_fles), function(j) sapply(j, function(i) gsub("ROO.RData", "", strsplit(i, "_")[[1]][2]))) %>% unlist,
ct=sapply(unlist(all_fles), function(j) sapply(j, function(i) strsplit(i, "_")[[1]][1])) %>% unlist)
t(table(df[df[,'feature_type'] == "signatures",'ct'], df[df[,'feature_type'] == "signatures", 'model']))
for(i in unique(df[,'ct'])){
.x = (df[df[,'ct'] == i,c('model', 'feature_type')])
print(i)
print(try(table(.x[,1], .x[,2])))
}
which_both_signature = sapply(unique(df[,'ct']), function(i){
subset_df = df[(df[,'feature_type'] == "signatures") & (df[,'ct'] == i),]
if(!is.null(dim(subset_df))){
all(vector_models %in% subset_df[,'model'])
}else{
FALSE
}
})
# listfles = lapply(c(uuid_flder, uuid_flder, uuid_flder), function(uuid_flder){
listfles = lapply(vector_models, function(model){
listfles = list.files(uuid_flder)
if(length(listfles) == 0){
listfles = list.files(uuid_flder) ## retry
}
if(model == 'M'){
listfles = listfles[grepl(paste0(nits, 'ROO'), listfles)]
}else if(model == 'DM'){
listfles = listfles[grepl(paste0(nits, '_DMROO'), listfles)]
}else if(model == 'DM'){
listfles = listfles[grepl(paste0(nits, '_LNMROO'), listfles)]
}
return(listfles)
})
type_features = type_features #unique(sapply(list.files(uuid_flder), function(i) strsplit(i, '_')[[1]][2]))
type_feature=type_features[1]
type_feature
ct_in_inference_results_list = lapply(vector_models, function(mdel) unique(sort(as.character(list.files(uuid_flder)[grepl(paste0(c(type_feature, '_', nits, '_', mdel, "ROO"), collapse = ""), list.files(uuid_flder))]))))
names(ct_in_inference_results_list) = vector_models
ct=unique(unlist(ct_in_inference_results_list))[1]
ct
ct_raw = strsplit(ct, '_')[[1]][1]
# plots_return_0_2 = mclapply(ct_in_inference_results, function(ct){
cat(ct, '\n')
cat(type_feature, '\t', ct, '\n')
posteriors_all = lapply(vector_models, function(mdel) ct_in_inference_results_list[[mdel]][grepl(ct, ct_in_inference_results_list[[mdel]])])
files_rdata = paste0(uuid_flder, posteriors_all)
posteriors = lapply(files_rdata,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
# no file
NA
}else{
print(f)
load(f)
x = tryCatch(rstan::extract(fit_stan))
if(is.null(x)){
## no samples
NA
}else{
x
}
}
})
files_rdata
f=files_rdata[1]
f
basename(f)
f=files_rdata[2]
basename(f)
substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA" | (length(basename(f)) == 0)
(length(basename(f)) == 0)
length(basename(f)
)
nchar(basename(f)) == 0)
nchar(basename(f)) == 0
nchar(basename(f))
basename(f)
posteriors_all
sapply(posteriors_all, length)
posteriors_all[ sapply(posteriors_all, length) == 0 ] = NA
files_rdata = paste0(uuid_flder, posteriors_all)
posteriors = lapply(files_rdata,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA" ){
# no file
NA
}else{
print(f)
load(f)
x = tryCatch(rstan::extract(fit_stan))
if(is.null(x)){
## no samples
NA
}else{
x
}
}
})
names(posteriors) = vector_models
## Simulate with the total number of mutations for DM
rowsums_toll = unlist(lapply(objects_sigs_per_CT[[type_feature]][[ct_raw]], rowSums))
length(rowsums_toll) ## number of patients*2
bool_data_avilable = rep(TRUE, length(posteriors))
names(bool_data_avilable) = vector_models
for(i in 1:length(posteriors)){
if(is.null(posteriors[[i]])){
## either no samples in rstan object, or no file
bool_data_avilable[i] = FALSE
}else if(length(posteriors[[i]]) == 1){
if(is.na(posteriors[[i]])){ bool_data_avilable[i] = FALSE }
}
}
## Compare the coefficients beta
## since not all have been run for the same number of iterations, subset the posteriors
lengths_beta_all = sapply(posteriors, function(i) if(length(i) == 1){if(is.na(i)){NA}} else{dim(i$beta)[3]})
posteriors_all = posteriors
posteriors = posteriors[!is.na(lengths_beta_all)]
lengths_beta = lengths_beta[!is.na(lengths_beta)]
if(length(lengths_beta) == 0){next}
lengths_beta = lengths_beta[!is.na(lengths_beta)]
lengths_beta = lengths_beta[!is.na(lengths_beta_all)]
lengths_beta = lengths_beta_all[!is.na(lengths_beta_all)]
if(length(lengths_beta) == 0){next}
dim_beta = unique(lengths_beta); stopifnot(length(dim_beta) == 1)
selected_rows = lapply(posteriors, function(i) sample(dim(i$beta)[1], 1000, replace = FALSE))
selected_rows_all = rep(NA, length(posteriors_all)); selected_rows_all[!is.na(lengths_beta_all)] = selected_rows
posteriors_subset_beta = lapply(1:length(posteriors), function(idx_posterior) do.call('rbind', lapply(1:dim_beta, function(idx_feature) select_feature(df_with_slices = posteriors[[idx_posterior]]$beta, idx_select = idx_feature)[selected_rows[[idx_posterior]],])))
posteriors_subset_beta_all = rep(NA, length(posteriors_all)); posteriors_subset_beta_all[!is.na(lengths_beta_all)] = posteriors_subset_beta
posteriors_subset_beta_intercept = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,1]}}))
posteriors_subset_beta_slope = do.call('cbind', lapply(posteriors_subset_beta_all, function(i){if(is.na(i)){NA}else{i[,2]}}))
colnames(posteriors_subset_beta_intercept) = colnames(posteriors_subset_beta_slope) = vector_models
pdf(paste0('../results/comparison_models/beta_pairs_', ct, '_', type_feature, '.pdf'))
if(sum(!(apply(posteriors_subset_beta_intercept, 2, function(i) all(is.na(i))))) == 1){
plot(0, 0, main='Only one model - no comparison')
}else{
par(mfrow=c(2,1))
pairs(posteriors_subset_beta_intercept, main='Beta intercept pairs plot')
pairs(posteriors_subset_beta_slope, main='Beta slope pairs plot')
}
dev.off()
dim(posteriors[[1]]$u) ## [nits, n, d-1]
dim(posteriors[[1]]$beta) ### [nits, 2, d-1]
dim(objects_sigs_per_CT[[type_feature]][[ct]][[1]]) ## [n,d]
match_file = match(gsub("_active", "", rownames(objects_sigs_per_CT[[type_feature]][[ct_raw]][[1]])),
sapply(files_donors$File.Name, function(i) strsplit(i, '[.]')[[1]][1]))
rownames(objects_sigs_per_CT[[type_feature]][[ct]][[1]])
files_donors[match_file,c('ICGC.Donor','File.Name') ]
age_donors = donors[match(files_donors[match_file,]$ICGC.Donor, donors$icgc_donor_id),]
age_donors = age_donors[!is.na(age_donors$icgc_donor_id),c('icgc_donor_id', 'donor_age_at_last_followup')]
nfeatures = dim(posteriors[[1]]$u)[3]
png(paste0("../results/link_clinical/age_u_", ct, '_', type_feature, '.png'),
width = 3*1.7, height = 3*length(posteriors)*1.7, units = "in", res = 300)
par(mfrow=c(length(posteriors),1))
for(idx_model in 1:length(posteriors)){
if(length(rep(age_donors$donor_age_at_last_followup, each=dim(posteriors[[idx_model]]$u)[1])) != length(as.vector(posteriors[[idx_model]]$u))){stop()}
plt_age = cbind(rep(age_donors$donor_age_at_last_followup, each=dim(posteriors[[idx_model]]$u)[1]),
as.vector(posteriors[[idx_model]]$u))
plt_age = plt_age[!is.na(plt_age[,1]),]
if(dim(plt_age)[1] > 0){
plt_age = plt_age[sample(1:nrow(plt_age), 2000),]
plot(plt_age)
}else{
plot(0,0)
}
}
dev.off()
plot_bool = T
if(plot_bool){
list_for_model = lapply(vector_models, function(name_model){
if(bool_data_avilable[name_model]){
npatientsx2 = dim(posteriors_all[[name_model]]$u)[2]
patient_idx = 1
if(name_model == 'DM'){
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(t(apply(do.call('cbind', select_person(posteriors_all[[name_model]]$alpha, patient_idx)),
1, MCMCpack::rdirichlet, n=1)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
}else{
stop('Need to add theta')
}
sim_counts = do.call('rbind', sim_counts)
sim_counts = sim_counts[! (colSums(apply(sim_counts, 1, is.na)) > 0),]
par(mfrow=c(1,1))
cols = rep(1:npatientsx2, each=dim(sim_counts)[1]/npatientsx2)
subset = unlist(lapply(unique(cols), function(i) sample(x = which(cols == i),
size = 1000,#round(0.1*sum(cols == i)),
replace = FALSE )))
sim_counts = sim_counts[subset,]
cols = cols[subset]
prcomp_all = prcomp(na.omit(sim_counts), scale. = FALSE, center=TRUE)
prcomp_res = prcomp_all$x[,c(1,2)]
projected_observed = (scale(normalise_rw(do.call('rbind', objects_sigs_per_CT[[type_feature]][[ct]])),
center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2]
}else{
sim_counts = prcomp_all = prcomp_res = projected_observed = cols = NA
}
return(list(sim_counts, prcomp_all, prcomp_res, projected_observed, cols))
})
select_rows = function(df, colours){
if(is.na(colours)){ NA}else{lapply(unique(colours), function(i) df[colours == i,])}
}
## plotting the contours for all patients
splits_df = list(select_rows(sim_counts, cols),
select_rows(sim_counts_M, cols_M)#,
#select_rows(sim_counts_LNM, cols_LNM)
)
names(splits_df) = c('DM', 'M')#c('DM', 'M', 'LNM')
# plot((scale(splits_df[[1]][[1]],
#             center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2], main='Dirichlet-Multinomial')
# plot((scale(splits_df[[2]][[1]],
#             center = TRUE, scale = FALSE) %*% prcomp_all_M$rotation)[,1:2], main='Multinomial')
#
par(mfrow=c(1,3))
# plot_whole_contour(group_idx = 1, model_name = 1, true_contour = FALSE)
# plot_whole_contour(group_idx = 1, model_name = 1, true_contour = TRUE)
png(paste0("../results/simulation_from_params/contourplots_", type_feature, "_", ct, ".png"))
# par(mfrow=c(3,2))
par(mfrow=c(2,2))
plot_whole_contour(group_idx = 1, model_name = 'DM', true_contour = FALSE)
plot_whole_contour(group_idx = 2, model_name = 'DM', true_contour = FALSE)
plot_whole_contour(group_idx = 1, model_name = 'M', true_contour = FALSE)
plot_whole_contour(group_idx = 2, model_name = 'M', true_contour = FALSE)
# plot_whole_contour(group_idx = 1, model_name = 'LNM', true_contour = FALSE)
# plot_whole_contour(group_idx = 2, model_name = 'LNM', true_contour = FALSE)
dev.off()
}
name_model=vector_models[1]
name_model
bool_data_avilable[name_model]
npatientsx2 = dim(posteriors_all[[name_model]]$u)[2]
patient_idx = 1
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(do.call('cbind', select_person(posteriors[[name_model]]$theta, patient_idx)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
sim_counts
sim_counts = do.call('rbind', sim_counts)
sim_counts = sim_counts[! (colSums(apply(sim_counts, 1, is.na)) > 0),]
par(mfrow=c(1,1))
cols = rep(1:npatientsx2, each=dim(sim_counts)[1]/npatientsx2)
subset = unlist(lapply(unique(cols), function(i) sample(x = which(cols == i),
size = 1000,#round(0.1*sum(cols == i)),
replace = FALSE )))
sim_counts = sim_counts[subset,]
cols = cols[subset]
prcomp_all = prcomp(na.omit(sim_counts), scale. = FALSE, center=TRUE)
prcomp_res = prcomp_all$x[,c(1,2)]
projected_observed = (scale(normalise_rw(do.call('rbind', objects_sigs_per_CT[[type_feature]][[ct]])),
center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2]
objects_sigs_per_CT[[type_feature]]
projected_observed = (scale(normalise_rw(do.call('rbind', objects_sigs_per_CT[[type_feature]][[ct_raw]])),
center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2]
projected_observed
sim_counts
select_rows = function(df, colours){
if(is.na(colours)){ NA}else{lapply(unique(colours), function(i) df[colours == i,])}
}
## plotting the contours for all patients
splits_df = list(select_rows(sim_counts, cols),
select_rows(sim_counts_M, cols_M)#,
#select_rows(sim_counts_LNM, cols_LNM)
)
## plotting the contours for all patients
splits_df = list(select_rows(sim_counts, cols),
select_rows(sim_counts_M, cols_M),
select_rows(sim_counts_LNM, cols_LNM)
)
list_for_model = lapply(vector_models, function(name_model){
if(bool_data_avilable[name_model]){
npatientsx2 = dim(posteriors_all[[name_model]]$u)[2]
patient_idx = 1
if(name_model == 'DM'){
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(t(apply(do.call('cbind', select_person(posteriors_all[[name_model]]$alpha, patient_idx)),
1, MCMCpack::rdirichlet, n=1)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
}else{
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(do.call('cbind', select_person(posteriors[[name_model]]$theta, patient_idx)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
}
sim_counts = do.call('rbind', sim_counts)
sim_counts = sim_counts[! (colSums(apply(sim_counts, 1, is.na)) > 0),]
par(mfrow=c(1,1))
cols = rep(1:npatientsx2, each=dim(sim_counts)[1]/npatientsx2)
subset = unlist(lapply(unique(cols), function(i) sample(x = which(cols == i),
size = 1000,#round(0.1*sum(cols == i)),
replace = FALSE )))
sim_counts = sim_counts[subset,]
cols = cols[subset]
prcomp_all = prcomp(na.omit(sim_counts), scale. = FALSE, center=TRUE)
prcomp_res = prcomp_all$x[,c(1,2)]
projected_observed = (scale(normalise_rw(do.call('rbind', objects_sigs_per_CT[[type_feature]][[ct_raw]])),
center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2]
}else{
sim_counts = prcomp_all = prcomp_res = projected_observed = cols = NA
}
return(list(sim_counts, prcomp_all, prcomp_res, projected_observed, cols))
})
list_for_model
list_for_model = lapply(vector_models, function(name_model){
if(bool_data_avilable[name_model]){
npatientsx2 = dim(posteriors_all[[name_model]]$u)[2]
patient_idx = 1
if(name_model == 'DM'){
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(t(apply(do.call('cbind', select_person(posteriors_all[[name_model]]$alpha, patient_idx)),
1, MCMCpack::rdirichlet, n=1)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
}else{
sim_counts = lapply(1:npatientsx2, function(patient_idx) normalise_cl(apply(do.call('cbind', select_person(posteriors[[name_model]]$theta, patient_idx)),
1, rmultinom, n=1, size=rowsums_toll[patient_idx])))
}
sim_counts = do.call('rbind', sim_counts)
sim_counts = sim_counts[! (colSums(apply(sim_counts, 1, is.na)) > 0),]
par(mfrow=c(1,1))
cols = rep(1:npatientsx2, each=dim(sim_counts)[1]/npatientsx2)
subset = unlist(lapply(unique(cols), function(i) sample(x = which(cols == i),
size = 1000,#round(0.1*sum(cols == i)),
replace = FALSE )))
sim_counts = sim_counts[subset,]
cols = cols[subset]
prcomp_all = prcomp(na.omit(sim_counts), scale. = FALSE, center=TRUE)
prcomp_res = prcomp_all$x[,c(1,2)]
projected_observed = (scale(normalise_rw(do.call('rbind', objects_sigs_per_CT[[type_feature]][[ct_raw]])),
center = TRUE, scale = FALSE) %*% prcomp_all$rotation)[,1:2]
}else{
sim_counts = prcomp_all = prcomp_res = projected_observed = cols = NA
}
return(list(sim_counts=sim_counts, prcomp_all=prcomp_all, prcomp_res=prcomp_res, projected_observed=projected_observed, cols=cols))
})
sim_counts_M = lapply(list_for_model, function(i) i$sim_counts)
sim_counts = lapply(list_for_model, function(i) i$sim_counts)
prcomp_all = lapply(list_for_model, function(i) i$prcomp_all)
prcomp_all = lapply(list_for_model, function(i) i$prcomp_all)
prcomp_res = lapply(list_for_model, function(i) i$prcomp_res)
projected_observed = lapply(list_for_model, function(i) i$projected_observed)
cols = lapply(list_for_model, function(i) i$cols)
select_rows = function(df, colours){
if(is.na(colours)){ NA}else{lapply(unique(colours), function(i) df[colours == i,])}
}
sim_counts
## plotting the contours for all patients
## HERE
splits_df = sapply(1:length(sim_counts), function(i) select_rows(sim_counts[[i]], cols[[i]]) )
splits_df
par(mfrow=c(1,3))
png(paste0("../results/simulation_from_params/contourplots_", type_feature, "_", ct, ".png"))
# par(mfrow=c(3,2))
par(mfrow=c(2,2))
plot_whole_contour(group_idx = 1, model_name = 'DM', true_contour = FALSE)
plot_whole_contour(group_idx = 2, model_name = 'DM', true_contour = FALSE)
splits_df
