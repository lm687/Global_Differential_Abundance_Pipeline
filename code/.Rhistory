give_nleaves = function(tree){
.x strsplit(tree, split = "\\(|\\)|\\,")[[1]]
.x[.x != ""]
}
give_nleaves = function(tree){
.x = strsplit(tree, split = "\\(|\\)|\\,")[[1]]
.x[.x != ""]
}
nleaves = give_nleaves(tree)
nleaves
give_leaves = function(tree){
.x = strsplit(tree, split = "\\(|\\)|\\,")[[1]]
.x[.x != ""]
}
give_leaves = function(tree){
length(give_leaves(tree))
}
nleaves = give_nleaves(tree)
nleaves
give_leaves = function(tree){
.x = strsplit(tree, split = "\\(|\\)|\\,")[[1]]
.x[.x != ""]
}
give_nleaves = function(tree){
length(give_leaves(tree))
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
tree
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
.tree
split_tree = function(tree){
strsplit(tree, split = "\\(|\\)|\\,")[[1]]
}
give_leaves = function(tree){
.x = split_tree(tree)
.x[.x != ""]
}
give_nleaves = function(tree){
length(give_leaves(tree))
}
get_next_split = function(tree){
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
which(.tree)
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
split_tree(.tree)
split_tree(.tree)
(.tree)
split(.tree, "")
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", , drop = drop)[[1]]
}
split_tree(.tree, "", drop = FALSE)
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", , drop = drop)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, drop = TRUE){
strsplit(tree, split = "\\(|\\)|\\,", drop = drop)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, ...){
strsplit(tree, split = "\\(|\\)|\\,", ....)[[1]]
}
split_tree(.tree,  drop = FALSE)
split_tree = function(tree, ...){
strsplit(tree, split = "\\(|\\)|\\,", ...)[[1]]
}
split_tree(.tree,  drop = FALSE)
strsplit(.tree, "(?=[/&])", perl = TRUE)
strsplit(.tree, "(?=[/,])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(|/(])", perl = TRUE)[[1]]
strsplit(.tree, "(?=[/,|/(|/)])", perl = TRUE)[[1]]
split_tree = function(tree, keep=FALSE){
if(keep){
strsplit(tree, "(?=[/,|/(|/)])", perl = TRUE)[[1]]
}else{
strsplit(tree, split = "\\(|\\)|\\,", ...)[[1]]
}
}
split_tree(.tree,  keep = TRUE)
.tree = split_tree(.tree,  keep = TRUE)
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
which(.tree = "(")
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
which(.tree == "(")
which(.tree == ",")
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
min(which(.tree == "("))
min(which(.tree == ","))
.tree
nparsleft = 0; nparsright = 0
## .tree is a vector with split characters
dontstop = TRUE; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree == "("){
nparsleft = nparsleft + 1
}
if(.tree == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
}
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == "("){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
nparsleft
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
idx
.tree
.tree[1:idx]
list(.tree[1:idx], .tree[(idx+1):length(.tree)]
}
find_split = function(.tree){
## move forward. if first we find an opening parenthesis, keep it until it closes. if first we get a comma, split.
if(min(which(.tree == "(")) < min(which(.tree == ","))){
prnths = TRUE
}else{
prnths = FALSE
}
if(prnths){
which_close = find_close_parenthesis(.tree)
}
}
give_leaves = function(tree){
.x = split_tree(tree)
.x[.x != ""]
}
give_nleaves = function(tree){
length(give_leaves(tree))
}
get_next_split = function(tree){
## remove parenthesis
.tree = substr(tree, 2, nchar(tree)-1)
.tree = split_tree(.tree,  keep = TRUE)
}
tree = gsub(";", "", tree)
nleaves = give_nleaves(tree)
nleaves
if(nleaves > 1){
## split tree into two
get_next_split(tree)
}else{
## do not remove parenthesis; do not split
}
list(.tree[1:idx], .tree[(idx+1):length(.tree)])
list(.tree[1:idx], .tree[(idx+2):length(.tree)])
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(.tree[1:idx], .tree[(idx+2):length(.tree)]))
}
which_close = find_close_parenthesis(.tree)
which_close
find_close_parenthesis = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
rm(find_close_parenthesis)
give_split = function(.tree){
## .tree is a vector with split characters
dontstop = TRUE; idx=1; nparsleft = 0; nparsright = 0
while(dontstop){
if(.tree[idx] == "("){
nparsleft = nparsleft + 1
}
if(.tree[idx] == ")"){
nparsright = nparsright +1
}
if(nparsleft == nparsright) break
idx = idx + 1
}
return(list(paste0(.tree[1:idx], collapse = ""), paste0(.tree[(idx+2):length(.tree)], collapse = "")))
}
which_close = give_split(.tree)
which_close
splts = give_split(.tree)
splts
find_split(splts[[1]])
find_split(splts[[2]])
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
## Should not be necessary:
z[!is.finite(z)] <- NA
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1)
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple")
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple", col='blue')
length(x)
rnorm(23)
contour(rnorm(23), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), rnorm(23), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
dev.off()
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
image(x, x, z)
contour(sort(rnorm(23)), sort(rnorm(23)), z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
setwd(diename(rstudioapi::getSourceEditorContext()$path))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd("../")
data_inference = list.files("../data/inference/")
data_inference
data_inference = data_inference[grepl("20000ROO")]
data_inference = data_inference[grepl("20000ROO"., data_inference)]
data_inference = data_inference[grepl("20000ROO", data_inference)]
data_inference
data_inference
data_inference = list.files("../data/inference/", full.names = TRUE)
data_inference = data_inference[grepl("20000ROO", data_inference)]
data_inference
posteriors = lapply(data_inference, readRDS)
posteriors = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
tryCatch(extract(fit_LNM))
}
})
posteriors = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
tryCatch(extract(fit_stan))
}
})
library(rstan)
posteriors = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
tryCatch(extract(fit_stan))
}
})
dim(posteriors[[1]])
posteriors
posteriors[[1]]
names(posteriors[[1]])
posteriors_betas = lapply(posteriors, function(i) i$beta)
posteriors_betas
rm(posteriors)
posteriors_betas = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
tryCatch(extract(fit_stan)$beta)
}
})
posteriors_betas
dim(posteriors_betas[[1]])
head(melt(posteriors_betas))
library(reshape2)
head(melt(posteriors_betas))
posteriors_betas
posteriors_betas
posteriors_betas[1:100,]
posteriors_betas[,,1:100,]
posteriors_betas[1:100,,]
posteriors_betas[1:100,,,]
posteriors_betas[,,1]
posteriors_betas[,1,1]
dim(posteriors_betas)
posteriors_betas[[1]][1:100,,,]
posteriors_betas[[1]][1:100,,]
dim(posteriors_betas[[1]][1:100,,])
dim(posteriors_betas[[1]])
posteriors_betas_subsample = lapply(posteriors_betas, function(i) i[sample(1:dim(i)[1], size = 1000),,])
sapply(posteriors_betas_subsample, dim)
head(melt(posteriors_betas))
ggplot(melt(posteriors_betas), aes(x=Var2, y=value))+geom_point()
dev.off()
ggplot(melt(posteriors_betas), aes(x=Var2, y=value))+geom_point()
ggplot(melt(posteriors_betas), aes(x=Var2, y=value))+geom_density()
ggplot(melt(posteriors_betas), aes(x=Var2, y=value))+geom_density(stat = "identity")
ggplot(melt(posteriors_betas), aes(x=Var2, y=value, group=Var2))+geom_density(stat = "identity")
bayesplot::mcmc_areas(posteriors_betas[[1]], ## select only slopes
pars =names_slope_betas)
head(posteriors_betas[[1]])
posteriors_betas[[1]]
bayesplot::mcmc_areas(posteriors_betas[[1]])
dim(posteriors_betas[[1]])
posteriors_betas = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
fit_mat = as.matrix(fit_stan)
tryCatch(fit_mat[,grepl('beta'), colnames(fit_mat)])
# tryCatch(extract(fit_stan)$beta)
}
})
posteriors_betas = lapply(data_inference,
function(f){
if(substr(f, nchar(f), nchar(f)) == "/" | basename(f) == "NA"){
## no file
NA
}else{
print(f)
load(f)
fit_mat = as.matrix(fit_stan)
tryCatch(fit_mat[,grepl('beta', colnames(fit_mat))])
# tryCatch(extract(fit_stan)$beta)
}
})
bayesplot::mcmc_areas(posteriors_betas[[1]])
names_slope_betas = colnames(posteriors_betas[[1]])[c(F,T)]
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas)
names_intersect_betas = colnames(posteriors_betas[[1]])[c(T,F)]
bayesplot::mcmc_areas(names_intersect_betas[[1]], pars = names_slope_betas)
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_intersect_betas)
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas)
library(gridExtra)
grid.arrange(bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas),
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_intersect_betas))
grid.arrange(bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas)+ggtitle('Slope'),
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_intersect_betas))
system("mkdir ../results/betas/")
data_inference
basename(data_inference)
gsub(".RData")
gsub(".RData", "", basename(data_inference))
names(posteriors_betas) = gsub(".RData", "", basename(data_inference))
names(posteriors_betas)
sapply(names(posteriors_betas), function(nme){
names_slope_betas = colnames(posteriors_betas[[1]])[c(F,T)]
names_intersect_betas = colnames(posteriors_betas[[1]])[c(T,F)]
png(paste0("../results/betas/", nme, "_betas.pmg"))
grid.arrange(bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas)+ggtitle('Slope'),
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_intersect_betas)+ggtitle('Intersect'))
dev.off()
})
sapply(names(posteriors_betas), function(nme){
names_slope_betas = colnames(posteriors_betas[[1]])[c(F,T)]
names_intersect_betas = colnames(posteriors_betas[[1]])[c(T,F)]
png(paste0("../results/betas/", nme, "_betas.png"))
grid.arrange(bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_slope_betas)+ggtitle('Slope'),
bayesplot::mcmc_areas(posteriors_betas[[1]], pars = names_intersect_betas)+ggtitle('Intersect'))
dev.off()
})
posteriors_betas
dim(posteriors_betas)
dim(posteriors_betas[[1]])
posteriors_betas
colnames(posteriors_betas[[1]])
posteriors_betas_slope = lapply(posteriors_betas, function(i) i[,c(F,T)])
colnames(posteriors_betas_slope[[1]])
p=posteriors_betas_slope[[1]]
posteriors_slopes_quant = apply(p, 2, quantile, c(0.025, 0.975))
posteriors_slopes_quant
posteriors_slopes_quant_bool = apply(posteriors_slopes_quant, 2, function(i){
(i[1] < 0) & (i[2] > 0)
} )
posteriors_slopes_quant_bool
posteriors_slopes_quant_bool
p
dim(p)
dim(p)[2]
num_not_containing_zero = lapply(posteriors_betas_slope, function(p){
posteriors_slopes_quant = apply(p, 2, quantile, c(0.025, 0.975))
posteriors_slopes_quant_bool = apply(posteriors_slopes_quant, 2, function(i){
(i[1] < 0) & (i[2] > 0)
} )
dim(p)[2] - posteriors_slopes_quant_bool
})
num_not_containing_zero
num_not_containing_zero = lapply(posteriors_betas_slope, function(p){
posteriors_slopes_quant = apply(p, 2, quantile, c(0.025, 0.975))
posteriors_slopes_quant_bool = apply(posteriors_slopes_quant, 2, function(i){
(i[1] < 0) & (i[2] > 0)
} )
dim(p)[2] - sum(posteriors_slopes_quant_bool)
})
num_not_containing_zero
lapply(posteriors_betas_slope, function(i) dim(i)[2])
head(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= num_not_containing_zero,
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2])))
head(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= num_not_containing_zero,
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))))
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= num_not_containing_zero,
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, col=variable))+geom_bar(stat='identity')
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= num_not_containing_zero,
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=variable))+geom_bar(stat='identity')
head(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= num_not_containing_zero,
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2])))
num_not_containing_zero
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=variable))+geom_bar(stat='identity')
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
total_features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=variable))+
geom_bar(stat='identity', position = "identity")
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=variable))+
geom_bar(stat='identity', position = "identity")
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=factor(variable, levels=c('nonzero_features', 'features'))))+
geom_bar(stat='identity', position = "identity")
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))), aes(x=ct, y=value, fill=factor(variable, levels=c('features', 'nonzero_features'))))+
geom_bar(stat='identity', position = "identity")
ggplot(melt(cbind.data.frame(ct= names(posteriors_betas),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))),
aes(x=ct, y=value, fill=factor(variable, levels=c('features', 'nonzero_features'))))+
geom_bar(stat='identity', position = "identity", alpha=.3)
names(posteriors_betas)
sapply( names(posteriors_betas), function(i) strsplit(i, '_')[[1]][1])
ggplot(melt(cbind.data.frame(ct= sapply( names(posteriors_betas), function(i) strsplit(i, '_')[[1]][1]),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))),
aes(x=ct, y=value, fill=factor(variable, levels=c('features', 'nonzero_features'))))+
geom_bar(stat='identity', position = "identity", alpha=.3)
ggplot(melt(cbind.data.frame(ct= sapply( names(posteriors_betas), function(i) strsplit(i, '_')[[1]][1]),
nonzero_features= unlist(num_not_containing_zero),
features=sapply(posteriors_betas_slope, function(i) dim(i)[2]))),
aes(x=ct, y=value, fill=variable))+
geom_bar(stat='identity', position = "identity", alpha=.3)
system("mkdir -p ../data/robjects_cache/")
library(uuid)
paste0("../data/robjects_cache/betas", uuid:UUIDgenerate(), ".Rdata")
library(uuid)
paste0("../data/robjects_cache/betas", uuid:UUIDgenerate(), ".Rdata")
paste0("../data/robjects_cache/betas", uuid::UUIDgenerate(), ".Rdata")
?expansion
