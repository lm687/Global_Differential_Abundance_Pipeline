import numpy as np
from os import listdir

configfile: "config_PCAWG_do_not_modify.yaml"
cancer_types = config["sample_groups"]
# cancer_type = "Cervix-SCC"
grouped_samples = config["grouped_samples"]

samples_list = dict(zip(cancer_types, [grouped_samples[ct].split() for ct in cancer_types]))
num_iterations = 15000
# num_iterations = 2000

## which parameters n, d, etc. do we use for each dataset?
datasetgeneration2_dict = {'GenerationC': 'generationC', 'GenerationCnorm': 'generationC',\
 'GenerationCnormsimpler': 'generationC', 'generationFnorm': 'generationF', 'generationGnorm': 'generationG',\
 'generationMGnorm': 'generationG', 'GenerationHnorm': 'generationHnorm', 'GenerationInoRE': 'generationC',\
 'GenerationJnorm' : 'generationC',  'GenerationJnorm2' : 'generationC',  'GenerationJnorm3' : 'generationC',\
 'GenerationInoREscaledbeta': 'generationC', 'GenerationK': 'generationG', 'GenerationK2': 'generationG',\
 'GenerationJnormTwoLambdas': 'generationG', 'GenerationInoREtwolambdas': 'generationG',\
 'generationHnormtwolambdas': 'generationG', 'GenerationMixture1': 'generationMixture1',\
 'GenerationJnormTwoLambdasOneChangingBeta': 'generationG',\
 'GenerationJnormBTwoLambdasOneChangingBeta': 'GenerationJnormBTwoLambdasOneChangingBeta',\
 'GenerationMixturePCAWG': 'GenerationMixturePCAWG', 'GenerationMixturefewersignaturesPCAWG': 'GenerationMixturefewersignaturesPCAWG',\
 'GenerationMixturefewersignaturespairedPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedstomachPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedKidneyRCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedBoneOsteosarcPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedBreastAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedCNSGBMPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedCNSMedulloPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedCNSPiloAstroPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedColoRectAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedEsoAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedHeadSCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedKidneyChRCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedKidneyRCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedKidneyRCCpapillaryPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedLiverHCC': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedLungSCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedLymphBNHLPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedLymphCLLPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedOvaryAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedPancAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedPancEndocrinePCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedProstAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedSkinMelanomacutaneousPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedStomachPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG', 'GenerationMixturefewersignaturespairedThyAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedUterusAdenoCAPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersmallsignaturespairedKidneyRCCPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG',\
 'GenerationMixturefewersignaturespairedObsNmBoneOsteosarcPCAWG': 'GenerationMixturefewersignaturespairedstomachPCAWG'}

for j in ['CNSGBMPCAWG', 'CNSMedulloPCAWG', 'CNSPiloAstroPCAWG',\
      'ColoRectAdenoCAPCAWG', 'EsoAdenoCAPCAWG', 'HeadSCCPCAWG', 'KidneyChRCCPCAWG', 'KidneyRCCpapillaryPCAWG',\
      'LungSCCPCAWG', 'LymphBNHLPCAWG', 'LymphCLLPCAWG', 'OvaryAdenoCAPCAWG', 'PancAdenoCAPCAWG', 'PancEndocrinePCAWG',\
      'ProstAdenoCAPCAWG', 'SkinMelanomacutaneousPCAWG', 'ThyAdenoCAPCAWG', 'UterusAdenoCAPCAWG']:
      datasetgeneration2_dict['GenerationMixturefewersignaturespairedObsNm'+j] = 'GenerationMixturefewersignaturespairedstomachPCAWG'

numreplicates = {'GenerationJnorm': 1, 'GenerationJnorm2': 4, 'GenerationJnorm3': 4, 'GenerationMixture1': 2,\
'GenerationK': 1,\
'GenerationJnormTwoLambdasOneChangingBeta': 2, 'GenerationJnormBTwoLambdasOneChangingBeta': 2, 'GenerationMixturePCAWG': 1,\
'GenerationMixturefewersignaturesPCAWG': 20, 'GenerationMixturefewersignaturespairedPCAWG': 20,\
'GenerationMixturefewersignaturespairedstomachPCAWG': 20, 'GenerationMixturefewersignaturespairedKidneyRCCPCAWG': 20,\
'GenerationMixturefewersignaturespairedBoneOsteosarcPCAWG': 20, 'GenerationMixturefewersignaturespairedBreastAdenoCAPCAWG': 20,\
'GenerationMixturefewersignaturespairedCNSGBMPCAWG': 20, 'GenerationMixturefewersignaturespairedCNSMedulloPCAWG': 20,\
'GenerationMixturefewersignaturespairedCNSPiloAstroPCAWG': 20, 'GenerationMixturefewersignaturespairedColoRectAdenoCAPCAWG': 20,\
'GenerationMixturefewersignaturespairedEsoAdenoCAPCAWG': 20, 'GenerationMixturefewersignaturespairedHeadSCCPCAWG': 20,\
'GenerationMixturefewersignaturespairedKidneyChRCCPCAWG': 20, 'GenerationMixturefewersignaturespairedKidneyRCCPCAWG': 20,\
'GenerationMixturefewersignaturespairedKidneyRCCpapillaryPCAWG': 20, 'GenerationMixturefewersignaturespairedLiverHCC': 20,\
'GenerationMixturefewersignaturespairedLungSCCPCAWG': 20, 'GenerationMixturefewersignaturespairedLymphBNHLPCAWG': 20,\
'GenerationMixturefewersignaturespairedLymphCLLPCAWG': 20, 'GenerationMixturefewersignaturespairedOvaryAdenoCAPCAWG': 20,\
'GenerationMixturefewersignaturespairedPancAdenoCAPCAWG': 20, 'GenerationMixturefewersignaturespairedPancEndocrinePCAWG': 20,\
'GenerationMixturefewersignaturespairedProstAdenoCAPCAWG': 20, 'GenerationMixturefewersignaturespairedSkinMelanomacutaneousPCAWG': 20,\
'GenerationMixturefewersignaturespairedStomachPCAWG': 20, 'GenerationMixturefewersignaturespairedThyAdenoCAPCAWG': 20,\
'GenerationMixturefewersignaturespairedUterusAdenoCAPCAWG': 20, 'GenerationMixturefewersmallsignaturespairedKidneyRCCPCAWG': 20,
'GenerationMixturefewersignaturespairedObsNmBoneOsteosarcPCAWG': 3}

for j in ['CNSGBMPCAWG', 'CNSMedulloPCAWG', 'CNSPiloAstroPCAWG',\
      'ColoRectAdenoCAPCAWG', 'EsoAdenoCAPCAWG', 'HeadSCCPCAWG', 'KidneyChRCCPCAWG', 'KidneyRCCpapillaryPCAWG',\
      'LungSCCPCAWG', 'LymphBNHLPCAWG', 'LymphCLLPCAWG', 'OvaryAdenoCAPCAWG', 'PancAdenoCAPCAWG', 'PancEndocrinePCAWG',\
      'ProstAdenoCAPCAWG', 'SkinMelanomacutaneousPCAWG', 'ThyAdenoCAPCAWG', 'UterusAdenoCAPCAWG']:
      numreplicates['GenerationMixturefewersignaturespairedObsNm'+j] = 3

config['simulation_n_generationMGnorm'] = 200


## unzip

def remove_end(i):
    return i[:-3]


rule all:
    input:
      # expand("../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi", sample=config["samples"]),
      # expand("../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}", sample=config["samples"]),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type=config["feature_types"], cancer_type=cancer_types),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type="signaturesmutSigExtractor", cancer_type=cancer_types),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type="signaturesPCAWG", cancer_type=cancer_types)
      # expand("../data/roo/{cancer_type}_signaturesMSE_ROO2.RDS", cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])]) ## mutsigextractor on pcawg signatures
      # [Inference] Running stan code on PCAWG
      # expand("../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData", feature_type=config["feature_types"], cancer_type=cancer_types, nits=num_iterations, model=models)
      ## [Inference] Running TMB on PCAWG
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS", feature_type="signaturesPCAWG",
      #   cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])],\
      # model=['fullREM', 'fullREDM', 'diagREDM', 'fullREDMsinglelambda'])
      ## signaturesMSE: PCAWG signatures from mutsigextractor
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS", feature_type="signaturesMSE",
      # cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])],\
      # model=['fullREM', 'fullREDM', 'diagREDM'])
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}nonexo_{cancer_type}_{feature_type}.RDS",\
      # feature_type="signaturesPCAWG", cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])],\
      # model=['fullREM', 'fullREDMsinglelambda', 'diagREDMsinglelambda', 'diagREDM', 'fullREDMnoscaling', 'fullREDMonefixedlambda', 'fullREDMonefixedlambda2'])
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}nonexo_{cancer_type}_{feature_type}.RDS", feature_type="signaturesPCAWGSaA",\
      #  cancer_type=[x.split('_')[0] for x in listdir('/Users/morril01/Documents/PhD/GlobalDA/data/roo/') if "signaturesPCAWGSaA" in x],\
      #  model=['fullREDMonefixedlambda'])
      # [expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}nonexo_{cancer_type}_{feature_type}.RDS", feature_type="signaturesmutSigExtractor",\
      # cancer_type=[x.split('_')[0] for x in listdir('/Users/morril01/Documents/PhD/GlobalDA/data/roo/') if "signaturesmutSigExtractor" in x],\
      # model=['fullREM', 'fullREDM', 'diagREDM']),
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS",\
      # feature_type="nucleotidesubstitution1", cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])],\
      # model=['fullREDM'])
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}wSBS1SBS5nonexo_{cancer_type}_{feature_type}.RDS", feature_type="signaturesPCAWG",
      #   cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])],\
      # model=['diagREDM'])
      ## [Benchmarking] Creating synthetic datasets
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{d}_{beta_intensity}_dataset.RDS", datasetgeneration="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"])
      ## [Benchmarking] Performing inference on the simulated datasets
      # expand("../data/assessing_models_simulation/inference_results/{datasetgeneration}_n{n}_nlambda{nlambda}_lambda{lmbda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData", datasetgeneration="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], lmbda=10, d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"], nits=num_iterations, model=models)
      ## [Benchmarking] Creating synthetic datasets (Generation C and later)
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      #  datasetgeneration="GenerationC",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
      #  lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
      #  beta_intensity = config["beta_gamma_shape_generationC"])
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      # datasetgeneration="GenerationCnorm",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
      # lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
      # beta_intensity = config["beta_gamma_shape_generationC"])
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      #  datasetgeneration="GenerationD",  n=config["simulation_n_generationD"], nlambda=config["simulation_nlambda_generationD"],
      #  lmbda=config["simulation_lambda_generationD"], d=config["simulation_d_generationD"],\
      #  beta_intensity = config["beta_gamma_shape_generationD"])
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      # datasetgeneration="GenerationE",  n=config["simulation_n_generationE"], nlambda=config["simulation_nlambda_generationE"],
      # lmbda=config["simulation_lambda_generationE"], d=config["simulation_d_generationE"],\
      # beta_intensity = config["beta_gamma_shape_generationE"])
      ## [Benchmarking] Performing inference on the simulated datasets (Generation C onwards)
      # expand("../data/assessing_models_simulation/inference_results/{datasetgeneration}_n{n}_nlambda{nlambda}_lambda{lmbda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData",\
      #  datasetgeneration="GenerationE",  n=config["simulation_n_generationE"], nlambda=config["simulation_nlambda_generationE"],
      #  lmbda=config["simulation_lambda_generationE"], d=config["simulation_d_generationE"],\
      #  beta_intensity = config["beta_gamma_shape_generationE"], nits=num_iterations, model=models)
      # expand("../data/assessing_models_simulation/inference_results/TMB/nlminb/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}.RDS",\
      #  datasetgeneration="GenerationCnorm",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
      #  lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
      # beta_intensity = config["beta_gamma_shape_generationC"], nits=num_iterations, model=['diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationInoRE', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      ## now use the multiple function instead, so we can have multiple runs from the same set of parameteres
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      #   datasetgeneration=['GenerationJnorm', 'GenerationJnorm2', 'GenerationJnorm3'], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationInoRE', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #  datasetgeneration='GenerationInoREscaledbeta', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='generationFnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      #expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #  datasetgeneration='GenerationCnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationHnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationInoRE', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      ## now use the multiple function instead, so we can have multiple runs from the same set of parameteres
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration=['GenerationJnorm', 'GenerationJnorm2', 'GenerationJnorm3'], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationInoRE', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #  datasetgeneration='GenerationInoREscaledbeta', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='generationFnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      #expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #  datasetgeneration='GenerationCnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationHnorm', model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model='fullREM')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration='GenerationCnormsimpler', model='fullREM')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration='GenerationCnormsimpler', model='fullREDM')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='generationMGnorm', model='fullREM')
      # expand("../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_dataset{itnum}.RDS",
      #   datasetgeneration="GenerationCnorm",  n=80, nlambda=180,
      #   lmbda=9, d=6,\
      #   beta_intensity = 0, itnum=range(100),
      #   fixed_beta_intercept="betaintercept1",
      #   fixed_beta_slope="betaslope1")
      # expand("../data/assessing_models_simulation/inference_results/TMB/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_it{itnum}.RDS",\
      #  datasetgeneration="GenerationCnorm",  n=80, nlambda=180,\
      #  lmbda=9, d=6,\
      #  beta_intensity = 0, model="diagREM", itnum=range(100),
      #  fixed_beta_intercept="betaintercept2",
      # fixed_beta_slope="betaslope2")
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS",\
      #  datasetgeneration="GenerationDMFE1",  n=80, nlambda=180,\
      #  d=6, lmbda=100,\
      #  beta_intensity = 0, model="FEDMsinglelambda", itnum=range(100),\
      #  fixed_beta_intercept="betaintercept1", sdRE_input=1,\
      # fixed_beta_slope="betaslope1", optimiser='nlminb')
      #expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      #datasetgeneration="GenerationMGnorm",  n=80, nlambda=180,\
      #d=6, lmbda=100,\
      #beta_intensity = 0, model=["fullREDMonefixedlambda", "fullREDMonefixedlambda3", "diagREDM"], itnum=range(100),\
      #beta_intensity = 0, model=["diagREDM"], itnum=range(1000),\
      #fixed_beta_intercept="betaintercept3",\
      #sdRE_input='sdRE1',\
      #fixed_beta_slope="betaslope3", optimiser='nlminb')
      #expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      #datasetgeneration="GenerationMGnorm",  n=200, nlambda=180,\
      #d=6, lmbda=100,\
      #beta_intensity = 0, model=["diagREDM"], itnum=range(1000),\
      ##beta_intensity = 0, model=["fullREDM", "diagREDM"], itnum=range(1000),\
      #fixed_beta_intercept="betaintercept3",\
      #sdRE_input='sdRE1',\
      #fixed_beta_slope="betaslope3", optimiser='nlminb')
      #  expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      # datasetgeneration="GenerationJnorm",  n=200, nlambda=180,\
      # d=5, lmbda=100,\
      # beta_intensity = 0, model=["diagREDM"], itnum=range(1000),\
      # fixed_beta_intercept="betaintercept1d4",\
      # sdRE_input='cov1d4',\
      # fixed_beta_slope="betaslope1d4", optimiser='nlminb')
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS",\
      # 	datasetgeneration="GenerationHnorm",  n=80, nlambda=180,\
      # 	lmbda=5, d=5,\
      # 	beta_intensity = 0, model="fullREDMsinglelambda", itnum=range(100),\
      # 	fixed_beta_intercept="betaintercept1d4", sdRE_input="covmat1d4",\
      # 	fixed_beta_slope="betaslope1d4", optimiser='nlminb')
       # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      #   datasetgeneration="GenerationMixture1",  n=config["simulation_n_generationMixture1"], nlambda=config["simulation_nlambda_generationMixture1"],\
      #   lmbda=0, d=config["simulation_d_generationMixture1"],\
      #   beta_intensity = config["beta_gamma_shape_generationMixture1"], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'],\
      #   itnum=range(numreplicates['GenerationMixture1']),\
      #   fixed_beta_intercept="NA", sdRE_input="NA",\
      #   fixed_beta_slope="NA", optimiser='nlminb')
      #  expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      #  datasetgeneration="GenerationJnormTwoLambdasOneChangingBeta",\
      ##  n=config["simulation_n_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      #  nlambda=config["simulation_nlambda_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      #  lmbda=config["simulation_lambda_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      ##  d=config["simulation_d_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      #  beta_intensity = config["beta_gamma_shape_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      #  model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'],\
      #  itnum=range(numreplicates['GenerationJnormTwoLambdasOneChangingBeta']),\
      #  fixed_beta_intercept="NA", sdRE_input="NA",\
      #  fixed_beta_slope="NA", optimiser='nlminb')
      #expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #datasetgeneration=['GenerationJnormTwoLambdasOneChangingBeta', 'GenerationJnormBTwoLambdasOneChangingBeta'],\
      # model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",\
      # datasetgeneration="GenerationJnormTwoLambdasOneChangingBeta",\
      # n=config["simulation_n_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      # nlambda=config["simulation_nlambda_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      # lmbda=config["simulation_lambda_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      # d=config["simulation_d_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      # beta_intensity = config["beta_gamma_shape_"+datasetgeneration2_dict['GenerationJnormTwoLambdasOneChangingBeta']],\
      # model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'],\
      # itnum=range(numreplicates['GenerationJnormTwoLambdasOneChangingBeta']),\
      # fixed_beta_intercept="NA", sdRE_input="NA",\
      # fixed_beta_slope="NA", optimiser='nlminb')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration=['GenerationJnormTwoLambdasOneChangingBeta', 'GenerationJnormBTwoLambdasOneChangingBeta'],\
      #  model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      #expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationJnorm'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration=['GenerationMixture1'], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration=['GenerationK', 'GenerationK2', 'GenerationJnormTwoLambdas', 'GenerationInoREtwolambdas', 'generationHnormtwolambdas'], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      #expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationJnorm', 'GenerationJnorm2', 'GenerationJnorm3'])
      #expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationJnorm', 'GenerationJnorm2', 'GenerationJnorm3'])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationJnorm'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      # datasetgeneration=['GenerationMixture1'], model=['fullREM', 'diagREDM', 'fullREDMsinglelambda', 'diagREDMsinglelambda'])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      #  datasetgeneration=[ 'GenerationCnorm', 'GenerationJnorm', 'GenerationJnorm2', 'GenerationJnorm3', 'GenerationK', 'GenerationK2', 'GenerationJnormTwoLambdas', 'GenerationInoREtwolambdas',\
      #   'generationHnormtwolambdas'])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      #  datasetgeneration=['GenerationMixture1'])
      # expand("../results/results_TMB/simulated_datasets/bias_and_coverage/setsim_multiple_{datasetgeneration}_nlminb_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_onlyconverged_coverage_beta.pdf",\
      #  datasetgeneration='GenerationMGnorm', model=['fullREDM', 'diagREDM'], fixed_beta_intercept = 'betaintercept3',\
      # fixed_beta_slope = 'betaslope3', sdRE_input = 'sdRE1',  n = 200, nlambda = 180, lmbda = 100, d = 6,
      # beta_intensity=0)
      # expand("../results/results_TMB/simulated_datasets/bias_and_coverage/setsim_multiple_{datasetgeneration}_nlminb_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_onlyconverged_coverage_beta.pdf",\
      # datasetgeneration='GenerationJnorm', model=['diagREDM', 'fullREDM'], fixed_beta_intercept = 'betaintercept1d4',\
      # fixed_beta_slope = 'betaslope1d4', sdRE_input = 'covmat1d4',  n = 200, nlambda = 180, lmbda = [2, 20, 100], d = 5,
      # beta_intensity=0)
      # expand("../results/results_TMB/simulated_datasets/bias_and_coverage/setsim_multiple_{datasetgeneration}_nlminb_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_onlyconverged_coverage_beta.pdf",\
      # datasetgeneration='GenerationJnorm', model=['diagREDM', 'fullREDM'], fixed_beta_intercept = 'betaintercept1d3',\
      # fixed_beta_slope = 'betaslope1d3', sdRE_input = 'covmat1d3',  n = 200, nlambda = 180, lmbda = [2, 20], d = 4,
      # beta_intensity=0)
      # expand("../results/results_TMB/simulated_datasets/bias_and_coverage/setsim_multiple_{datasetgeneration}_nlminb_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_onlyconverged_coverage_beta.pdf",\
      # datasetgeneration='GenerationJnorm', model=['fullREDM'], fixed_beta_intercept = ['betaintercept1d2', 'betaintercept2d2'],\
      # fixed_beta_slope = ['betaslope1d2', 'betaslope2d2'], sdRE_input = 'covmat1d2',  n = 200, nlambda = 180, lmbda = [20], d = 3,
      # beta_intensity=0)
      ## Mixing data from two cancer types
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationMixturePCAWG'])
      ## Mixing data from two cancer types (same as above), but with a subset of signatures so that d=4
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationMixturefewersignaturesPCAWG'])
      ## Mixing data from two cancer types (same as above), but with a subset of signatures so that d=4, and with paired data
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=['GenerationMixturePCAWG', 'GenerationMixturefewersignaturesPCAWG', \
      # 'GenerationMixturefewersignaturespairedPCAWG', \
      # 'GenerationMixturefewersignaturespairedstomachPCAWG',\
      # 'GenerationMixturefewersignaturespairedKidneyRCCPCAWG',\
      # ])
      ## run all PCAWG simulations of mixtures
      #expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      #datasetgeneration=['GenerationMixturefewersignaturespaired'+x for x in [ # 'BoneOsteosarcPCAWG', 'BreastAdenoCAPCAWG',\
      # 'CNSGBMPCAWG', 'CNSMedulloPCAWG', 'CNSPiloAstroPCAWG',\
      # 'ColoRectAdenoCAPCAWG', 'EsoAdenoCAPCAWG', 'HeadSCCPCAWG', 'KidneyChRCCPCAWG', 'KidneyRCCpapillaryPCAWG',\
      # 'LungSCCPCAWG', 'LymphBNHLPCAWG', 'LymphCLLPCAWG', 'OvaryAdenoCAPCAWG', 'PancAdenoCAPCAWG', 'PancEndocrinePCAWG',\
      #'ProstAdenoCAPCAWG', #'SkinMelanomacutaneousPCAWG', 'ThyAdenoCAPCAWG', 'UterusAdenoCAPCAWG' ## all ct in this line have been started in HPC
      #]])
      #expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      #datasetgeneration=[ 'GenerationK'])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=['GenerationMixturefewersmallsignaturespairedKidneyRCCPCAWG'])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=['GenerationMixturefewersignaturespaired'+x for x in ['CNSGBMPCAWG']])
      # datasetgeneration=['GenerationMixturefewersignaturespaired'+x for x in ['ProstAdenoCAPCAWG']])
      # expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      # datasetgeneration=[ 'GenerationK'])
      expand("../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS",\
      datasetgeneration=['GenerationMixturefewersignaturespairedObsNm'+x for x in ['BoneOsteosarcPCAWG',  'LymphCLLPCAWG', 'OvaryAdenoCAPCAWG', 'PancAdenoCAPCAWG']])
      

# "/Users/morril01/Documents/PhD/GlobalDA/data/restrictsummaries_synthetic_DAed/pcawg/annovar_annotation/02917220-6a7a-46a1-8656-907e96bef88e.consensus.20160830.somatic.snv_mnv.vcf.annovar"
# expand(['/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/annovar_annotation/'+x.strip('.gz')+'.annovar' for x in listdir('/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/pcawg_restricted_snv/') if re.search('.gz$', x)])


numreplicates_for_bias = 1000

rule index_vcf:
    input:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi"
    shell:
        "tabix -f {input}"

rule make_roo_files:
    input:
        lambda wildcards: expand("{sample_from_group}",
        sample_from_group=grouped_samples[wildcards.cancer_type].split())
    output:
         "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       ct="{cancer_type}",
       f="{feature_type}"
    shell:
        "Rscript 1_create_ROO/create_ROO_split.R --input_files '{input}' --cancer_type {params.ct} --feature_type {params.f} --output {output}"

rule make_roo_filesMSE:
    input:
        '../data/restricted/pcawg/pcawg.wg11.final_sample_list_MARCH2019.txt'
    output:
         "../data/roo/{cancer_type}_signaturesMSE_ROO2.RDS"
    params:
       ct="{cancer_type}",
    shell:
        "Rscript 1_create_ROO/sigextractB_extract_mutations_mutSigExtractor.R --input_files {input} --cancer_type {params.ct} --output {output}"

rule inference_TMB:
    input:
        "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       model="{model}",
       feature_type="{feature_type}"
    log:
        "logs/inference/TMBinference_{cancer_type}_{feature_type}_{model}.log"
    output:
        "../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS"
    shell:
        "Rscript 2_inference_TMB/run_TMB.R --input {input} --output {output} --model {params.model} --feature_type {params.feature_type} --optimiser nlminb --simulation_bool F --read_directly T --use_previous_run_startingvals T"

rule simulate_for_comparison_multiple:
    input:
        "../data/assessing_models_simulation/{datasetgeneration}"
    params:
        datasetgeneration = "{datasetgeneration}",
        n = "{n}",
        nlambda = "{nlambda}",
        lmbda = "{lmbda}",
        d = "{d}",
        beta_intensity = "{beta_intensity}",
        itnum = "{itnum}",
        fixed_beta_intercept="{fixed_beta_intercept}",
        fixed_beta_slope="{fixed_beta_slope}",
        sdRE_input="{sdRE_input}",
    output:
       "../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS"
    shell:
       # "Rscript --vanilla 3_analysis/simulation_model_assessment/generate_datasets_simulations/{params.datasetgeneration}.R --input {input} --d {params.d} --n {params.n} --nlambda {params.nlambda} --lambda {params.lmbda} --beta_gamma_shape {params.beta_intensity} --outfile {output} --beta_intercept_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.fixed_beta_intercept}.RDS --beta_slope_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.fixed_beta_slope}.RDS --sdRE_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.sdRE_input}.RDS"
       "Rscript --vanilla 3_analysis/simulation_model_assessment/generate_datasets_simulations/{params.datasetgeneration}.R --input {input} --d {params.d} --n {params.n} --nlambda {params.nlambda} --lambda {params.lmbda} --beta_gamma_shape {params.beta_intensity} --outfile {output} --beta_intercept_input {params.fixed_beta_intercept} --beta_slope_input {params.fixed_beta_slope} --sdRE_input {params.sdRE_input}"

rule inference_simulation_TMB_multiple:
    input:
        "../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS"
    log:
        "logs/inference/{optimiser}/simulation_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_Model{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.log"
    params:
       model="{model}",
       optimiser="{optimiser}"
    output:
       "../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS"
    shell:
       "Rscript 2_inference_TMB/run_TMB.R --input {input} --output {output} --model {params.model} --optimiser {params.optimiser}  --use_previous_run_startingvals T"


## Equivalent of analyse_simulation_TMB, Whenever using inference_simulation_TMB_multiple
rule analyse_simulation_TMB_multiple:
    input:
      lambda wildcards: expand("../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",
        n = config["simulation_n_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        nlambda = config["simulation_nlambda_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        lmbda = config["simulation_lambda_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        d = config["simulation_d_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        beta_intensity = config["beta_gamma_shape_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        datasetgeneration=wildcards.datasetgeneration,
        fixed_beta_intercept = 'NA',#wildcards.fixed_beta_intercept,  this should be changed depending on whether we are using fixed betas or not
        fixed_beta_slope = 'NA', #wildcards.fixed_beta_slope, this should be changed depending on whether we are using fixed betas or not
        sdRE_input = 'NA', #wildcards.sdRE_input, this should be changed depending on whether we are using fixed sds or not
        model = "{model}",
        itnum= range(numreplicates[wildcards.datasetgeneration]))
    output:
        "../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt"
    run:
        if len(input) < 10e6:
            shell("Rscript 3_analysis/simulation_model_assessment/analyse_inference_simulations/analyse_inference_simulations.R --input_list '{input}'\
            --output_folder_name ../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{wildcards.datasetgeneration}/{wildcards.datasetgeneration}_{wildcards.model}/ \
            --output_string {wildcards.datasetgeneration}_{wildcards.model} --model {wildcards.model} --dataset_generation {wildcards.datasetgeneration} --multiple_runs T")
        else:
            shell("cat '{input}' > tmp_input_snake; Rscript 3_analysis/simulation_model_assessment/analyse_inference_simulations/analyse_inference_simulations.R --input_list tmp_input_snake \
            --output_folder_name ../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{wildcards.datasetgeneration}/{wildcards.datasetgeneration}_{wildcards.model}/ \
            --output_string {wildcards.datasetgeneration}_{wildcards.model} --model {wildcards.model} --dataset_generation {wildcards.datasetgeneration} --multiple_runs T \
            --read_input_from_file T")

rule analyse_simulation_TMB_multiple_integrate:
    input:
      lambda wildcards: expand("../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
       model=['fullREM', 'fullREDMsinglelambda', 'diagREDMsinglelambda','diagREDM'], datasetgeneration=wildcards.datasetgeneration)
    "../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/{datasetgeneration}/{datasetgeneration}_fullREM/{datasetgeneration}_fullREM_results_info.txt"
    output:
        "../data/assessing_models_simulation/summaries_synthetic_DA/{datasetgeneration}.RDS"
    shell:
        "Rscript 3_analysis/simulation_model_assessment/analyse_inference_simulations/analyse_inference_simulations_integrate.R --input '{input}' --generation {wildcards.datasetgeneration}"

rule analyse_simulation_TMB_bias:
    input:
      lambda wildcards: expand("../data/assessing_models_simulation/inference_results/TMB/nlminb/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS",
        n = wildcards.n,
        nlambda = wildcards.nlambda,
        lmbda = wildcards.lmbda,
        d = wildcards.d,
        beta_intensity = wildcards.beta_intensity,
        datasetgeneration=wildcards.datasetgeneration,
        fixed_beta_intercept = wildcards.fixed_beta_intercept,
        fixed_beta_slope = wildcards.fixed_beta_slope,
        sdRE_input = wildcards.sdRE_input,
        model = "{model}",
        itnum= range(numreplicates_for_bias))
    output:
        "../results/results_TMB/simulated_datasets/bias_and_coverage/setsim_multiple_{datasetgeneration}_nlminb_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_onlyconverged_coverage_beta.pdf"
    shell:
        "Rscript 3_analysis/simulation_model_assessment/analyse_inference_simulations/3_1_analyse_bias_and_coverage.R --input_list '{input}' \
        --dataset_generation {wildcards.datasetgeneration} --model {wildcards.model}\
        --multiple_runs T --run_nonconverged F --beta_intercept_input {wildcards.fixed_beta_intercept} \
        --beta_slope_input {wildcards.fixed_beta_slope} --sdRE_input {wildcards.sdRE_input}  --d {wildcards.d} --n {wildcards.n} --nlambda {wildcards.nlambda} --lambda {wildcards.lmbda} --beta_gamma_shape {wildcards.beta_intensity} "


rule unzip:
    input:
        "/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/pcawg_restricted_snv/{sample}.gz"
    output:
        "/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/pcawg_restricted_snv/{sample}"
    shell:
        "gzip -d {input}; "

rule annotate_vcf:
    input:
        "/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/pcawg_restricted_snv/{sample}"
    output:
        "/Users/morril01/Documents/PhD/GlobalDA/data/restricted/pcawg/annovar_annotation/{sample}.annovar"
    params:
    # shell:
    #     "/Users/morril01/software/annovar/./table_annovar.pl {input} \
    #     /Users/morril01/software/annovar/humandb/ -buildver hg19 -out {output} -remove -protocol refGene,cytoBand,exac03 -operation gx,r,f -nastring . -csvout -polish \
    #     -xref /Users/morril01/software/annovar/example/gene_xref.txt; gzip {input}; mv {output}.hg19_multianno.csv {output}"
    shell:
        "/Users/morril01/software/annovar/./table_annovar.pl {input} \
        /Users/morril01/software/annovar/humandb/ -buildver hg19 -out {output} -remove -protocol icgc28 -operation f -nastring . -csvout -polish \
        -xref /Users/morril01/software/annovar/example/gene_xref.txt; gzip {input}; mv {output}.hg19_multianno.csv {output}"
