configfile: "config_PCAWG.yaml"
cancer_types = config["sample_groups"]
# cancer_type = "Cervix-SCC"
grouped_samples = config["grouped_samples"]

samples_list = dict(zip(cancer_types, [grouped_samples[ct].split() for ct in cancer_types]))
models = ['M', 'DM', 'LNM']
models = ['M']
num_iterations = 20000

rule all:
    input:
      # expand("../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi", sample=config["samples"]),
      # expand("../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}", sample=config["samples"]),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type=config["feature_types"], cancer_type=cancer_types),
      expand("../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData", feature_type=config["feature_types"], cancer_type=cancer_types, nits=num_iterations, model=models)


rule index_vcf:
    input:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi"
    shell:
        "tabix -f {input}"

rule embed_counts:
    input:
        vcf="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz",
        vcf_index="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi",
    	ccf="../data/restricted/pcawg/consensus_subclonal_reconstruction_mutccf_20170325/{sample}_mutation_ccf.txt"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}"
    shell:
        "sh 0_embed_in_count_space/0_get_flanking_and_mut_individual.sh {input.vcf} {input.vcf_index} {input.ccf} {output}"


rule make_roo_files:
    input:
        lambda wildcards: expand("{sample_from_group}",
        sample_from_group=grouped_samples[wildcards.cancer_type].split())
    output:
         "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       ct="{cancer_type}",
       f="{feature_type}"
    shell:
        "Rscript 1_create_ROO/create_ROO_split.R --input_files '{input}' --cancer_type {params.ct} --feature_type {params.f} --output {output}"

# rule inference:
#     input:
#         "../data/roo/{{cancer_type}}_{{feature_type}}_ROO.RDS"
#     params:
#        #ct="{cancer_type}",
#        #f="{feature_type}",
#        mdel="{model}",
#        nits="{nits}"
#     output:
#        "../data/inference/{{cancer_type}}_{{feature_type}}_{{params.nits}}_{{params.mdel}}ROO.RData"
#     shell:
#         "Rscript --vanilla 2_inference/fit_PCAWG.R --cancertype {cancer_type} --typedata {feature_type}\
#          --infile {input} --output {output} --niterations {params.nits} --model {params.mdel}"

rule inference:
    input:
        "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       cancer_type="{cancer_type}",
       feature_type="{feature_type}",
       model=expand("{model}", model = models),
       nits=expand("{nits}", nits = num_iterations)
    output:
       "../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData"
    shell:
        "Rscript --vanilla 2_inference/fit_PCAWG.R --cancertype {params.cancer_type} --typedata {params.feature_type} --infile {input} --output {output} --niterations {params.nits} --model {params.model}"
