configfile: "config_PCAWG.yaml"
cancer_types = config["sample_groups"]
# cancer_type = "Cervix-SCC"
grouped_samples = config["grouped_samples"]

samples_list = dict(zip(cancer_types, [grouped_samples[ct].split() for ct in cancer_types]))
models = ['M', 'DM']
# models = ['LNM']
# num_iterations = 15000
num_iterations = 2000

datasetgeneration2_dict = {'GenerationC': 'generationC', 'GenerationCnorm': 'generationC',\
 'GenerationCnormsimpler': 'generationC', 'generationFnorm': 'generationF', 'generationGnorm': 'generationG',\
 'generationMGnorm': 'generationG'}

rule all:
    input:
      # expand("../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi", sample=config["samples"]),
      # expand("../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}", sample=config["samples"]),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type=config["feature_types"], cancer_type=cancer_types),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type="signaturesmutSigExtractor", cancer_type=cancer_types),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type="signaturesPCAWG", cancer_type=cancer_types)
## [Inference] Running stan code on PCAWG
      # expand("../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData", feature_type=config["feature_types"], cancer_type=cancer_types, nits=num_iterations, model=models)
      ## [Inference] Running TMB on PCAWG
      # expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS", feature_type="signaturesPCAWG", cancer_type=cancer_types, model=['fullREM', 'fullREDMsinglelambda'])
      expand("../data/pcawg_robjects_cache/tmb_results/nlminb/{model}nonexo_{cancer_type}_{feature_type}.RDS", feature_type="signaturesPCAWG", cancer_type=[x for x in cancer_types if not any(y in x for y in ['Myeloid-AML','Breast-DCIS', 'Melanoma.mucosal'])], model=['fullREM', 'fullREDMsinglelambda', 'diagREDMsinglelambda', 'diagRE_DM'])
## [Benchmarking] Creating synthetic datasets
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{d}_{beta_intensity}_dataset.RDS", datasetgeneration="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"])
## [Benchmarking] Performing inference on the simulated datasets
     # expand("../data/assessing_models_simulation/inference_results/{datasetgeneration}_n{n}_nlambda{nlambda}_lambda{lmbda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData", datasetgeneration="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], lmbda=10, d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"], nits=num_iterations, model=models)
## [Benchmarking] Creating synthetic datasets (Generation C and later)
     # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
     #  datasetgeneration="GenerationC",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
     #  lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
     #  beta_intensity = config["beta_gamma_shape_generationC"])
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      # datasetgeneration="GenerationCnorm",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
      # lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
      # beta_intensity = config["beta_gamma_shape_generationC"])
     # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
     #  datasetgeneration="GenerationD",  n=config["simulation_n_generationD"], nlambda=config["simulation_nlambda_generationD"],
     #  lmbda=config["simulation_lambda_generationD"], d=config["simulation_d_generationD"],\
     #  beta_intensity = config["beta_gamma_shape_generationD"])
      # expand("../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS",
      # datasetgeneration="GenerationE",  n=config["simulation_n_generationE"], nlambda=config["simulation_nlambda_generationE"],
      # lmbda=config["simulation_lambda_generationE"], d=config["simulation_d_generationE"],\
      # beta_intensity = config["beta_gamma_shape_generationE"])
      ## [Benchmarking] Performing inference on the simulated datasets (Generation C onwards)
      # expand("../data/assessing_models_simulation/inference_results/{datasetgeneration}_n{n}_nlambda{nlambda}_lambda{lmbda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData",\
      #  datasetgeneration="GenerationE",  n=config["simulation_n_generationE"], nlambda=config["simulation_nlambda_generationE"],
      #  lmbda=config["simulation_lambda_generationE"], d=config["simulation_d_generationE"],\
      #  beta_intensity = config["beta_gamma_shape_generationE"], nits=num_iterations, model=models)
      # expand("../data/assessing_models_simulation/inference_results/TMB/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}.RDS",\
      #  datasetgeneration="GenerationCnorm",  n=config["simulation_n_generationC"], nlambda=config["simulation_nlambda_generationC"],
      #  lmbda=config["simulation_lambda_generationC"], d=config["simulation_d_generationC"],\
      #  beta_intensity = config["beta_gamma_shape_generationC"], nits=num_iterations, model=['fullREDM'])
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model='fullREDM')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='GenerationCnorm', model='fullREM')
        # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
        # datasetgeneration='GenerationCnormsimpler', model='fullREM')
        # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
        # datasetgeneration='GenerationCnormsimpler', model='fullREDM')
      # expand("../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt",\
      #   datasetgeneration='generationMGnorm', model='fullREM')
      # expand("../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_dataset{itnum}.RDS",
      #   datasetgeneration="GenerationCnorm",  n=80, nlambda=180,
      #   lmbda=9, d=6,\
      #   beta_intensity = 0, itnum=range(100),
      #   fixed_beta_intercept="betaintercept1",
      #   fixed_beta_slope="betaslope1")
      # expand("../data/assessing_models_simulation/inference_results/TMB/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_it{itnum}.RDS",\
      #  datasetgeneration="GenerationCnorm",  n=80, nlambda=180,\
      #  lmbda=9, d=6,\
      #  beta_intensity = 0, model="diagREM", itnum=range(100),
      #  fixed_beta_intercept="betaintercept2",
      # fixed_beta_slope="betaslope2")
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS",\
      #  datasetgeneration="GenerationDMFE1",  n=80, nlambda=180,\
      #  d=6, lmbda=100,\
      #  beta_intensity = 0, model="FEDMsinglelambda", itnum=range(100),\
      #  fixed_beta_intercept="betaintercept1", sdRE_input=1,\
      # fixed_beta_slope="betaslope1", optimiser='nlminb')
      # expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS",\
      #  datasetgeneration="generationMGnorm",  n=80, nlambda=180,\
      #  d=6, lmbda=100,\
      #  beta_intensity = 0, model="fullREDMsinglelambda", itnum=range(100),\
      #  fixed_beta_intercept="betaintercept3", sdRE_input='sdRE1',\
      # fixed_beta_slope="betaslope3", optimiser='nlminb')
    	# expand("../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS",\
    	# 	datasetgeneration="GenerationHnorm",  n=80, nlambda=180,\
    	# 	lmbda=5, d=5,\
    	# 	beta_intensity = 0, model="fullREDMsinglelambda", itnum=range(100),\
    	# 	fixed_beta_intercept="betaintercept1d4", sdRE_input="covmat1d4",\
    	# 	fixed_beta_slope="betaslope1d4", optimiser='nlminb')

rule index_vcf:
    input:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi"
    shell:
        "tabix -f {input}"

# rule embed_counts:
#     input:
#         vcf="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz",
#         vcf_index="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi",
#     	ccf="../data/restricted/pcawg/consensus_subclonal_reconstruction_mutccf_20170325/{sample}_mutation_ccf.txt"
#     output:
#         "../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}"
#     shell:
#         "sh 0_embed_in_count_space/0_get_flanking_and_mut_individual.sh {input.vcf} {input.vcf_index} {input.ccf} {output}"


rule make_roo_files:
    input:
        lambda wildcards: expand("{sample_from_group}",
        sample_from_group=grouped_samples[wildcards.cancer_type].split())
    output:
         "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       ct="{cancer_type}",
       f="{feature_type}"
    shell:
        "Rscript 1_create_ROO/create_ROO_split.R --input_files '{input}' --cancer_type {params.ct} --feature_type {params.f} --output {output}"

rule inference:
    input:
        "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    log:
        "logs/inference/{cancer_type}_{feature_type}_{nits}_{model}.log"
    params:
       cancer_type="{cancer_type}",
       feature_type="{feature_type}",
       model=expand("{model}", model = models),
       nits=expand("{nits}", nits = num_iterations)
    output:
       "../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData"
    shell:
        """module load miniconda3-4.5.4-gcc-5.4.0-hivczbz
#source activate rstan_env
~/.conda/envs/rstan_env/bin/Rscript --vanilla 2_inference/fit_PCAWG.R --cancertype {params.cancer_type} --typedata {params.feature_type} --infile '{input}' --output '{output}' --niterations {params.nits} --model {params.model}
#conda deactivate"""

# rule simulate_for_comparison:
#     input:
#         "../data/assessing_models_simulation/{datasetgeneration}"
#     params:
#         datasetgeneration = "{datasetgeneration}",
#         n = "{n}",
#         nlambda = "{nlambda}",
#         lmbda = "{lmbda}",
#         d = "{d}",
#         beta_intensity = "{beta_intensity}",
#     output:
#        "../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS"
#     shell:
#        "Rscript --vanilla 3_analysis/simulation_model_assessment/generate_datasets_simulations/{params.datasetgeneration}.R --input {input} --d {params.d} --n {params.n} --nlambda {params.nlambda} --lambda {params.lmbda} --beta_gamma_shape {params.beta_intensity} --outfile {output}"


rule inference_TMB:
    input:
        "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       model="{model}",
       feature_type="{feature_type}"
    log:
        "logs/inference/TMBinference_{cancer_type}_{feature_type}_{model}.log"
    output:
        "../data/pcawg_robjects_cache/tmb_results/nlminb/{model}_{cancer_type}_{feature_type}.RDS"
    shell:
        "Rscript 2_inference_TMB/run_TMB.R --input {input} --output {output} --model {params.model} --feature_type {params.feature_type} --optimiser nlminb --simulation_bool F --read_directly T"

rule simulate_for_comparison_multiple:
    input:
        "../data/assessing_models_simulation/{datasetgeneration}"
    params:
        datasetgeneration = "{datasetgeneration}",
        n = "{n}",
        nlambda = "{nlambda}",
        lmbda = "{lmbda}",
        d = "{d}",
        beta_intensity = "{beta_intensity}",
        itnum = "{itnum}",
        fixed_beta_intercept="{fixed_beta_intercept}",
        fixed_beta_slope="{fixed_beta_slope}",
        sdRE_input="{sdRE_input}",
    output:
       "../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS"
    shell:
       "Rscript --vanilla 3_analysis/simulation_model_assessment/generate_datasets_simulations/{params.datasetgeneration}.R --input {input} --d {params.d} --n {params.n} --nlambda {params.nlambda} --lambda {params.lmbda} --beta_gamma_shape {params.beta_intensity} --outfile {output} --beta_intercept_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.fixed_beta_intercept}.RDS --beta_slope_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.fixed_beta_slope}.RDS --sdRE_input ../data/assessing_models_simulation/additional_files/multiple_fixed_{params.sdRE_input}.RDS"


## This is for stan and it has been deprecated
rule inference_simulation_stan:
    input:
        "../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS"
    log:
        "logs/inference/simulation_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_Nits{nits}_Model{model}.log"
    params:
       model=expand("{model}", model = models),
       nits=expand("{nits}", nits = num_iterations)
    output:
       "../data/assessing_models_simulation/inference_results/{datasetgeneration}_n{n}_nlambda{nlambda}_lambda{lmbda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData"
    shell:
        """#module load miniconda3-4.5.4-gcc-5.4.0-hivczbz
#source activate rstan_env
# ~/.conda/envs/rstan_env/bin/Rscript --vanilla 2_inference/fit_simulations.R --infile {input} --output {output} --niterations {params.nits} --model {params.model}
Rscript --vanilla 2_inference/fit_simulations.R --infile {input} --output {output} --niterations {params.nits} --model {params.model}
#conda deactivate"""

# rule inference_simulation_TMB:
#     input:
#         "../data/assessing_models_simulation/datasets/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_dataset.RDS"
#     log:
#         "logs/inference/simulation_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_Model{model}.log"
#     params:
#        model="{model}",
#     output:
#        "../data/assessing_models_simulation/inference_results/TMB/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}.RDS"
#     shell:
#        "Rscript 2_inference_TMB/run_TMB.R --input {input} --output {output} --model {params.model}"

rule inference_simulation_TMB_multiple:
    input:
        "../data/assessing_models_simulation/datasets/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.RDS"
    log:
        "logs/inference/{optimiser}/simulation_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_Model{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_dataset{itnum}.log"
    params:
       model="{model}",
       optimiser="{optimiser}"
    output:
       "../data/assessing_models_simulation/inference_results/TMB/{optimiser}/multiple_{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}_{fixed_beta_intercept}_{fixed_beta_slope}_{sdRE_input}_it{itnum}.RDS"
    shell:
       "Rscript 2_inference_TMB/run_TMB.R --input {input} --output {output} --model {params.model} --optimiser {params.optimiser}"

rule analyse_simulation_TMB:
    input:
      lambda wildcards: expand("../data/assessing_models_simulation/inference_results/TMB/{datasetgeneration}_{n}_{nlambda}_{lmbda}_{d}_{beta_intensity}_{model}.RDS",
        n = config["simulation_n_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        nlambda = config["simulation_nlambda_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        lmbda = config["simulation_lambda_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        d = config["simulation_d_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        beta_intensity = config["beta_gamma_shape_"+datasetgeneration2_dict[wildcards.datasetgeneration]],
        datasetgeneration=wildcards.datasetgeneration,
        model = "{model}")
    output:
        "../results/results_TMB/simulated_datasets/mixed_effects_models/{datasetgeneration}/{datasetgeneration}_{model}/{datasetgeneration}_{model}_results_info.txt"
    shell:
        "Rscript 3_analysis/simulation_model_assessment/analyse_inference_simulations/analyse_inference_simulations.R --input '{input}'\
        --output_folder_name ../results/results_TMB/simulated_datasets/mixed_effects_models/{wildcards.datasetgeneration}/{wildcards.datasetgeneration}_{wildcards.model}/ \
        --output_string {wildcards.datasetgeneration}_{wildcards.model} --model {wildcards.model} --dataset_generation {wildcards.datasetgeneration}"
