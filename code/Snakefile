configfile: "config_PCAWG.yaml"
cancer_types = config["sample_groups"]
# cancer_type = "Cervix-SCC"
grouped_samples = config["grouped_samples"]

samples_list = dict(zip(cancer_types, [grouped_samples[ct].split() for ct in cancer_types]))
models = ['M', 'DM', 'LNM']
models = ['LNM']
# models = ['DM']
# models = ['M']
num_iterations = 15000
# num_iterations = 2000

rule all:
    input:
      # expand("../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi", sample=config["samples"]),
      # expand("../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}", sample=config["samples"]),
      # expand("../data/roo/{cancer_type}_{feature_type}_ROO.RDS", feature_type=config["feature_types"], cancer_type=cancer_types),
## [Inference] Running stan code on PCAWG
#      expand("../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData", feature_type=config["feature_types"], cancer_type=[i for i in cancer_types if i is not 'Skin-Melanoma.mucosal'], nits=num_iterations, model=models)
      expand("../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData", feature_type="signatures", cancer_type=[i for i in cancer_types if i is not 'Skin-Melanoma.mucosal'], nits=num_iterations, model=models)
## [Benchmarking] Creating synthetic datasets
      # expand("../data/assessing_models_simulation/datasets/{uuid}_{n}_{nlambda}_{d}_{beta_intensity}_dataset.RDS", uuid="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"])
## [Benchmarking] Performing inference on the simulated datasets
#     expand("../data/assessing_models_simulation/inference_results/{uuid}_n{n}_nlambda{nlambda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData", uuid="20200625",  n=config["simulation_n"], nlambda=config["simulation_nlambda"], d=config["simulation_d"], beta_intensity = config["beta_gamma_shape"], nits=num_iterations, model=models)


rule index_vcf:
    input:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi"
    shell:
        "tabix -f {input}"

rule embed_counts:
    input:
        vcf="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz",
        vcf_index="../data/restricted/pcawg/pcawg_restricted_snv/{sample}.consensus.20160830.somatic.snv_mnv.vcf.gz.tbi",
    	ccf="../data/restricted/pcawg/consensus_subclonal_reconstruction_mutccf_20170325/{sample}_mutation_ccf.txt"
    output:
        "../data/restricted/pcawg/pcawg_restricted_snv_counts/{sample}"
    shell:
        "sh 0_embed_in_count_space/0_get_flanking_and_mut_individual.sh {input.vcf} {input.vcf_index} {input.ccf} {output}"


rule make_roo_files:
    input:
        lambda wildcards: expand("{sample_from_group}",
        sample_from_group=grouped_samples[wildcards.cancer_type].split())
    output:
         "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    params:
       ct="{cancer_type}",
       f="{feature_type}"
    shell:
        "Rscript 1_create_ROO/create_ROO_split.R --input_files '{input}' --cancer_type {params.ct} --feature_type {params.f} --output {output}"

rule inference:
    input:
        "../data/roo/{cancer_type}_{feature_type}_ROO.RDS"
    log:
        "logs/inference/{cancer_type}_{feature_type}_{nits}_{model}.log"
    params:
       cancer_type="{cancer_type}",
       feature_type="{feature_type}",
       model=expand("{model}", model = models),
       nits=expand("{nits}", nits = num_iterations)
    output:
       "../data/inference/{cancer_type}_{feature_type}_{nits}_{model}ROO.RData"
    shell:
       "~/.conda/envs/rstan_env/bin/Rscript --vanilla 2_inference/fit_PCAWG.R --cancertype {params.cancer_type} --typedata {params.feature_type} --infile '{input}' --output '{output}' --niterations {params.nits} --model {params.model}"

#    shell:
#        """module load miniconda3-4.5.4-gcc-5.4.0-hivczbz
#source activate rstan_env
#~/.conda/envs/rstan_env/bin/Rscript --vanilla 2_inference/fit_PCAWG.R --cancertype {params.cancer_type} --typedata {params.feature_type} --infile '{input}' --output '{output}' --niterations {params.nits} --model {params.model}
#conda deactivate"""

rule simulate_for_comparison:
    input:
        "../data/assessing_models_simulation/{uuid}"
    params:
        n = "{n}",
        nlambda = "{nlambda}",
        d = "{d}",
        beta_intensity = "{beta_intensity}"
    output:
       "../data/assessing_models_simulation/datasets/{uuid}_{n}_{nlambda}_{d}_{beta_intensity}_dataset.RDS"
    shell:
       "Rscript --vanilla 3_analysis/assess_model_create_dataset.R  --input {input} --d {params.d} --n {params.n} --nlambda {params.nlambda} --beta_gamma_shape {params.beta_intensity} --outfile {output}"

rule inference_simulation:
    input:
        "../data/assessing_models_simulation/datasets/{uuid}_{n}_{nlambda}_{d}_{beta_intensity}_dataset.RDS"
    log:
        "logs/inference/simulation_{uuid}_{n}_{nlambda}_{d}_{beta_intensity}_Nits{nits}_Model{model}.log"
    params:
       model=expand("{model}", model = models),
       nits=expand("{nits}", nits = num_iterations)
    output:
       "../data/assessing_models_simulation/inference_results/{uuid}_n{n}_nlambda{nlambda}_d{d}_beta_intensity{beta_intensity}_Nits{nits}_Model{model}ROO.RData"
    shell:
        """#module load miniconda3-4.5.4-gcc-5.4.0-hivczbz
#source activate rstan_env
# ~/.conda/envs/rstan_env/bin/Rscript --vanilla 2_inference/fit_simulations.R --infile {input} --output {output} --niterations {params.nits} --model {params.model}
Rscript --vanilla 2_inference/fit_simulations.R --infile {input} --output {output} --niterations {params.nits} --model {params.model}
#conda deactivate"""
