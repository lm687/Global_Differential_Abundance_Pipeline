list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
plot_betas(res_nlminb_amalgamation1)
wald_TMB_wrapper(res_nlminb_amalgamation1)
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
amalgamated_vec1 <- c( 's3', 's5')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's6', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3', 's4')
amalgamated_vec2 <- c( 's2', 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3', 's4')
amalgamated_vec2 <- c( 's2', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../data/")
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
selected_sigs
sort(colSums(ct1$Y))
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[!(colnames(ct1$Y) %in% selected_sigs)])
colSums()
colSums(ct1$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[!(colnames(ct1$Y) %in% selected_sigs)])
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
selected_sigs
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)])
ct1
(colnames(ct1$Y) %in% selected_sigs)
colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)]
give_subset_sigs_TMBobj(ct1, selected_sigs)
selected_sigs
colSums(ct1$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)])
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
colSums(ct1$Y)
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
give_subset_sigs_TMBobj(ct1, selected_sigs)
head(give_subset_sigs_TMBobj(ct1, selected_sigs)$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, selected_sigs)
dim9ct1$Y[ct1$x[,2] == 1,]
dim(ct1$Y[ct1$x[,2] == 1,])
dim(ct1$Y[ct1$x[,2] == 0,])
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2) %in% rownames(ct1)
rownames(ct2)[rownames(ct2) %in% rownames(ct1),]
rownames(ct2)[rownames(ct2) %in% rownames(ct1)]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1
ct1$Y
colSums(ct1$z)
colSums(ct1$x)
dim(ct1$Y)
## it can be that now some samples don't have enough observations in the rows. remove these samples
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
ct2
rownames(ct2)
rownames(ct1)
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
ct1 <- give_subset_sigs_TMBobj(ct1, selected_sigs)
## it can be that now some samples don't have enough observations in the rows. remove these samples
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct2 <- ct2[(rownames(ct2) %in% rownames(ct1)),]
ct1 <- ct1[(rownames(ct1) %in% rownames(ct2)),]
stopifnot(all(rownames(ct2) == rownames(ct1)))
warning('Note that now x and Z might be for more samples than those in Y\n')
warning('Note that now x and Z might be for more samples than those in Y')
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's2', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
wald_TMB_wrapper(res_nlminb_amalgamation1)
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's5')
amalgamated_vec2 <- c( 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
colnames(amalgamation_1$Y)
give_pairs_with_mvn <- function(mat_mvn, lims=NULL){
require(car)
if(is.null(lims)){
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=c(min(mat_mvn[,1])-1,max(mat_mvn[,1])+1),
ylim=c(min(mat_mvn[,2])-1,max(mat_mvn[,2])+1))
}else{
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=lims,
ylim=lims)
}
}
give_pairs_with_mvn_wrapper <- function(exposures_arg, zero_to_NA=F, common_lims=F){
if(zero_to_NA){
exposures_arg[exposures_arg == 0] <- NA
}
common_lims <- c(min(exposures_arg), max(exposures_arg))
par(mfrow=c(ncol(exposures_arg), ncol(exposures_arg)), mar=c(0,0,0,0))
for(ii in 1:ncol(exposures_arg)){
for(jj in 1:ncol(exposures_arg)){
if(ii != jj){
give_pairs_with_mvn(remove_all_NA(exposures_arg[,c(ii, jj)]), lims=common_lims)
}else{plot.new()}
}
}
}
give_pairs_with_mvn <- function(mat_mvn, lims=NULL){
require(car)
if(is.null(lims)){
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=c(min(mat_mvn[,1])-1,max(mat_mvn[,1])+1),
ylim=c(min(mat_mvn[,2])-1,max(mat_mvn[,2])+1))
}else{
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=lims,
ylim=lims)
}
}
remove_all_NA <- function(i) i[!(colSums(apply(i, 1, is.na)) > 0),]
give_pairs_with_mvn_wrapper <- function(exposures_arg, zero_to_NA=F, common_lims=F){
if(zero_to_NA){
exposures_arg[exposures_arg == 0] <- NA
}
common_lims <- c(min(exposures_arg), max(exposures_arg))
par(mfrow=c(ncol(exposures_arg), ncol(exposures_arg)), mar=c(0,0,0,0))
for(ii in 1:ncol(exposures_arg)){
for(jj in 1:ncol(exposures_arg)){
if(ii != jj){
give_pairs_with_mvn(remove_all_NA(exposures_arg[,c(ii, jj)]), lims=common_lims)
}else{plot.new()}
}
}
}
give_pairs_with_mvn_wrapper
generation <- c('GenerationMixturefewersmallsignaturespairedKidneyRCCPCAWG')
a <- readRDS(paste0("../../../../data/assessing_models_simulation/summaries_synthetic_DA/", generation, ".RDS"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd*()
