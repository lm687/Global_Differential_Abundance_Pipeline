<<<<<<< HEAD
<<<<<<< HEAD
=======
geom_point(data=genes_of_interest_df, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(data=genes_of_interest_df, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$value_DM
table(disjoined_GR2_genes_merged_df$value_DM)
disjoined_GR2_genes$value_DM
table(disjoined_GR2_genes$value_DM)
disjoined_GR2_genes
disjoined_GR2_genes_merged <- unlist(reduce(split(disjoined_GR2_genes, ~value_DM)))
disjoined_GR2_genes_merged
as.numeric(names(disjoined_GR2_genes_merged))
max()
max(as.numeric(names(disjoined_GR2_genes_merged)))
disjoined_GR2_genes_merged$value_DM <- as.numeric(names(disjoined_GR2_genes_merged))
names(disjoined_GR2_genes_merged) <- NULL
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df$value_DM
max(disjoined_GR2_genes_merged_df$value_DM)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df$seqnames <- factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames)))
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(1:21, 'X', 'Y') ,]
max(disjoined_GR2_genes_merged_df$value_DM)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df$seqnames <- factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames)))
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(data=genes_of_interest_df, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df$seqnames <- paste0('chr', genes_of_interest_df$seqnames)
genes_of_interest_df <- as(genes_of_interest, 'data.frame')
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$seqnames
genes_of_interest_df_chr$seqnames
dev.off()
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
ggplot(disjoined_GR_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
disjoined_GR2_genes_merged_df$seqnames <- factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames)))
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
evels(disjoined_GR2_genes_merged_df$seqnames)
gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames))
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames)))
unique(factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames))))
disjoined_GR2_genes_merged_df$seqnames <- factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(disjoined_GR2_genes_merged_df$seqnames)))
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
genes_of_interest_df_chr$seqnames
levels(disjoined_GR2_genes_merged_df$seqnames )
levels(genes_of_interest_df_chr$seqnames) <- levels(disjoined_GR2_genes_merged_df$seqnames )
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$seqnames
levels(disjoined_GR2_genes_merged_df$seqnames)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
disjoined_GR2_genes_merged_df$seqnames <- factor(disjoined_GR2_genes_merged_df$seqnames,
levels=gtools::mixedsort(levels(unique(disjoined_GR2_genes_merged_df$seqnames))))
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
levels(genes_of_interest_df_chr$seqnames) <- levels(disjoined_GR2_genes_merged_df$seqnames )
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$seqnames
unique(disjoined_GR2_genes_merged_df$seqnames)
levels(disjoined_GR2_genes_merged_df$seqnames)
gtools::mixedsort(levels(unique(disjoined_GR2_genes_merged_df$seqnames)))
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
gtools::mixedsort(levels(unique(disjoined_GR2_genes_merged_df$seqnames)))
gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames))
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
levels(disjoined_GR2_genes_merged_df$seqnames) <- gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames))
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
levels(genes_of_interest_df_chr$seqnames) <- levels(disjoined_GR2_genes_merged_df$seqnames )
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$seqnames
gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames))
levels(disjoined_GR2_genes_merged_df$seqnames)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames))
as.character(gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames)))
levels(disjoined_GR2_genes_merged_df$seqnames) <- as.character(gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames)))
droplevels(disjoined_GR2_genes_merged_df)
disjoined_GR2_genes_merged_df <- as(disjoined_GR2_genes_merged, 'data.frame')
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[with(disjoined_GR2_genes_merged_df, order(seqnames, start)), ]
disjoined_GR2_genes_merged_df <- disjoined_GR2_genes_merged_df[disjoined_GR2_genes_merged_df$seqnames %in% c(paste0('chr', c(1:21, 'X', 'Y'))) ,]
disjoined_GR2_genes_merged_df <- droplevels(disjoined_GR2_genes_merged_df)
levels(disjoined_GR2_genes_merged_df$seqnames) <- as.character(gtools::mixedsort(unique(disjoined_GR2_genes_merged_df$seqnames)))
genes_of_interest_df_chr <- genes_of_interest_df
genes_of_interest_df_chr$seqnames <- paste0('chr', genes_of_interest_df_chr$seqnames)
levels(genes_of_interest_df_chr$seqnames) <- levels(disjoined_GR2_genes_merged_df$seqnames )
levels(genes_of_interest_df_chr$seqnames)
levels(disjoined_GR2_genes_merged_df$seqnames )
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
disjoined_GR2_genes_merged_df$seqnames
genes_of_interest_df_chr$seqnames
genes_of_interest_df_chr$seqnames <- factor(genes_of_interest_df_chr$seqnames,
levels=levels(disjoined_GR2_genes_merged_df$seqnames ))
genes_of_interest_df_chr$seqnames
ggplot(disjoined_GR2_genes_merged_df)+
geom_segment(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_line(aes(x=start, xend=end, y=value_DM, yend=value_DM))+
geom_label_repel(data=genes_of_interest_df_chr, aes(x=start, y= 0, label=gene_name), size=3)+
geom_point(col='red', data=genes_of_interest_df_chr, aes(x=start, y= 0))+
facet_wrap(~seqnames, scales = "free")+theme_bw()
ggsave("~/Desktop/differential_methylation_HGSOC_relapse.pdf", height = 10, width = 10)
genes_of_interest_df_chr
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
multiple_runs = T
## multiple runs
# generation = "GenerationJnorm"
# generation = "GenerationK"
# generation = "GenerationK2"
# generation = "generationFnorm"
# generation = "GenerationCnorm"
# generation = "GenerationJnorm2"
generation = "GenerationJnorm3"
# generation = "GenerationJnormTwoLambdas"
# generation = "GenerationInoREtwolambdas"
# generation = "generationHnormtwolambdas"
# generation = "GenerationMixture1"
generation = "GenerationJnormTwoLambdasOneChangingBeta"
generation = "GenerationJnormBTwoLambdasOneChangingBeta"
source("../../../2_inference_TMB/helper_TMB.R")
source("../../../1_create_ROO/roo_functions.R")
library(grid)
library(gridExtra)
library(ggpubr)
library(reshape2)
library(jcolors)
library(cowplot)
library(ggrepel)
require( tikzDevice )
if(multiple_runs){
flder_out <- "../../../../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/"
flder_in <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries_multiple/"
=======
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
plot_betas(res_nlminb_amalgamation1)
wald_TMB_wrapper(res_nlminb_amalgamation1)
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
amalgamated_vec1 <- c( 's3', 's5')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's6', 's5')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2', 's4')
amalgamated_vec3 <- c( 's1')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3', 's7')
amalgamated_vec2 <- c( 's2')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3')
amalgamated_vec2 <- c( 's2', 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3', 's4')
amalgamated_vec2 <- c( 's2', 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's3', 's4')
amalgamated_vec2 <- c( 's2', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../data/")
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
selected_sigs
sort(colSums(ct1$Y))
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[!(colnames(ct1$Y) %in% selected_sigs)])
colSums()
colSums(ct1$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[!(colnames(ct1$Y) %in% selected_sigs)])
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
selected_sigs
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)])
ct1
(colnames(ct1$Y) %in% selected_sigs)
colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)]
give_subset_sigs_TMBobj(ct1, selected_sigs)
selected_sigs
colSums(ct1$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, colnames(ct1$Y)[(colnames(ct1$Y) %in% selected_sigs)])
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
colSums(ct1$Y)
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
give_subset_sigs_TMBobj(ct1, selected_sigs)
head(give_subset_sigs_TMBobj(ct1, selected_sigs)$Y)
ct1 <- give_subset_sigs_TMBobj(ct1, selected_sigs)
dim9ct1$Y[ct1$x[,2] == 1,]
dim(ct1$Y[ct1$x[,2] == 1,])
dim(ct1$Y[ct1$x[,2] == 0,])
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2) %in% rownames(ct1)
rownames(ct2)[rownames(ct2) %in% rownames(ct1),]
rownames(ct2)[rownames(ct2) %in% rownames(ct1)]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
ct1
ct1$Y
colSums(ct1$z)
colSums(ct1$x)
dim(ct1$Y)
## it can be that now some samples don't have enough observations in the rows. remove these samples
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
ct2
rownames(ct2)
rownames(ct1)
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct1 <- load_PCAWG("Kidney-RCC.clearcell", typedata = "signaturesPCAWG", simulation = F, path_to_data="../../../../../GlobalDA/data/")
## select only the four least prevalent signatures
selected_sigs <- names(sort(colSums(ct1$Y), decreasing = T)[1:4])
ct1 <- give_subset_sigs_TMBobj(ct1, selected_sigs)
## it can be that now some samples don't have enough observations in the rows. remove these samples
ct2 <- ct1$Y[ct1$x[,2] == 1,]
ct1 <- ct1$Y[ct1$x[,2] == 0,]
rownames(ct2)[!(rownames(ct2) %in% rownames(ct1))]
rownames(ct1)[!(rownames(ct1) %in% rownames(ct2))]
ct2 <- ct2[(rownames(ct2) %in% rownames(ct1)),]
ct1 <- ct1[(rownames(ct1) %in% rownames(ct2)),]
stopifnot(all(rownames(ct2) == rownames(ct1)))
warning('Note that now x and Z might be for more samples than those in Y\n')
warning('Note that now x and Z might be for more samples than those in Y')
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's2', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's7', 's5')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
wald_TMB_wrapper(res_nlminb_amalgamation1)
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
amalgamated_vec1 <- c( 's4')
amalgamated_vec2 <- c( 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
colnames(amalgamation_1$Y)
amalgamated_vec1 <- c( 's5')
amalgamated_vec2 <- c( 's7')
amalgamated_vec3 <- c( 's1', 's6')
amalgamation_1 <- give_amalgamated_exposures_TMBobj(sig_obj = TMB_obj_exposures,
list_groupings = (c(list(amalgamated_vec1), list(amalgamated_vec2), list(amalgamated_vec3),
as.list(colnames(exposures)[!(colnames(exposures) %in% c(amalgamated_vec1, amalgamated_vec2, amalgamated_vec3))]))))
head(amalgamation_1$Y)
TMB_obj_amalgamation <- prepare_TMB_data_with_subset(subset_sigs = colnames(amalgamation_1$Y),
exposures = amalgamation_1$Y, ilr_trans = T)
colnames(amalgamation_1$Y)
give_pairs_with_mvn_wrapper(TMB_obj_amalgamation$Y, zero_to_NA = T)
TMB_obj_amalgamation
res_nlminb_amalgamation1 <- wrapper_run_TMB_use_nlminb(model = "partialILR", object = TMB_obj_amalgamation, use_nlminb = T,
iter.max=1000)
res_nlminb_amalgamation1
random_intercepts_amalgamation1 <- matrix(res_nlminb_amalgamation1$par.random, ncol=length(python_like_select_name(res_nlminb_amalgamation1$par.fixed, 'beta'))/2)
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
random_intercepts_amalgamation1
res_nlminb_amalgamation1
give_pairs_with_mvn_wrapper(random_intercepts_amalgamation1) ## the estimates are very highly correlated
colnames(amalgamation_1$Y)
give_pairs_with_mvn <- function(mat_mvn, lims=NULL){
require(car)
if(is.null(lims)){
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=c(min(mat_mvn[,1])-1,max(mat_mvn[,1])+1),
ylim=c(min(mat_mvn[,2])-1,max(mat_mvn[,2])+1))
>>>>>>> 4777a55438313c31f477b57e62ede86bcbf9cc05
}else{
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=lims,
ylim=lims)
}
}
give_pairs_with_mvn_wrapper <- function(exposures_arg, zero_to_NA=F, common_lims=F){
if(zero_to_NA){
exposures_arg[exposures_arg == 0] <- NA
}
common_lims <- c(min(exposures_arg), max(exposures_arg))
par(mfrow=c(ncol(exposures_arg), ncol(exposures_arg)), mar=c(0,0,0,0))
for(ii in 1:ncol(exposures_arg)){
for(jj in 1:ncol(exposures_arg)){
if(ii != jj){
give_pairs_with_mvn(remove_all_NA(exposures_arg[,c(ii, jj)]), lims=common_lims)
}else{plot.new()}
}
}
}
<<<<<<< HEAD
>>>>>>> b7516544d6581da5bf0a960e309788c1fba6dff6
all(names(pvals_fullREDMSL) == names(pvals_fullREM))
all(names(pvals_fullREDMSL) == names(pvals_diagREDM))
length(pvals_diagREDM)
length(pvals_fullREDMSL)
dim(runs_diagREDM0)
dim(runs_diagREDMSL0)
dim(runs_fullREDMSL0)
dim(runs_fullREM0)
if(length(pvals_fullREDMSL) != length(datasets)){
stop('The number of runs is not the number of datasets')
=======
give_pairs_with_mvn <- function(mat_mvn, lims=NULL){
require(car)
if(is.null(lims)){
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=c(min(mat_mvn[,1])-1,max(mat_mvn[,1])+1),
ylim=c(min(mat_mvn[,2])-1,max(mat_mvn[,2])+1))
}else{
dataEllipse(mat_mvn[,1], mat_mvn[,2], levels=c(0.95), xlim=lims,
ylim=lims)
>>>>>>> 4777a55438313c31f477b57e62ede86bcbf9cc05
}
}
remove_all_NA <- function(i) i[!(colSums(apply(i, 1, is.na)) > 0),]
give_pairs_with_mvn_wrapper <- function(exposures_arg, zero_to_NA=F, common_lims=F){
if(zero_to_NA){
exposures_arg[exposures_arg == 0] <- NA
}
common_lims <- c(min(exposures_arg), max(exposures_arg))
par(mfrow=c(ncol(exposures_arg), ncol(exposures_arg)), mar=c(0,0,0,0))
for(ii in 1:ncol(exposures_arg)){
for(jj in 1:ncol(exposures_arg)){
if(ii != jj){
give_pairs_with_mvn(remove_all_NA(exposures_arg[,c(ii, jj)]), lims=common_lims)
}else{plot.new()}
}
}
}
<<<<<<< HEAD
<<<<<<< HEAD
varying_d <-give_accuracies_with_varying_var('d')
varying_d_all_converged <-give_accuracies_with_varying_var('d', datasets_arg = datasets[!is.na(DA_bool_all_converged)],
pvals_data_frame_arg = pvals_data_frame_all_converged)
varying_n <-give_accuracies_with_varying_var('n')
varying_n_all_converged <-give_accuracies_with_varying_var('n', datasets_arg = datasets[!is.na(DA_bool_all_converged)],
pvals_data_frame_arg = pvals_data_frame_all_converged)
varying_betashape <-give_accuracies_with_varying_var('beta_gamma_shape')
varying_betashape_all_converged <-give_accuracies_with_varying_var('beta_gamma_shape', datasets_arg = datasets[!is.na(DA_bool_all_converged)],
pvals_data_frame_arg = pvals_data_frame_all_converged)
try({varying_n_d <-give_accuracies_with_varying_var(var = c('d', 'n'), two_var = T)})
try({varying_n_betashape <-give_accuracies_with_varying_var(var = c('n', 'beta_gamma_shape'), two_var = T)})
try({varying_d_betashape <-give_accuracies_with_varying_var(var = c('d', 'beta_gamma_shape'), two_var = T)})
ggplot(varying_d, aes(x=d, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~mod, noel)
ggplot(varying_n, aes(x=n, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/FPR_with_n.pdf"),
height = 3.0, width = 4)
ggplot(varying_n_all_converged, aes(x=n, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()+
labs(col=FALSE)#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/FPR_with_n_all_converged.pdf"),
height = 3.0, width = 4)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_d.pdf"),
height = 3.0, width = 4.5)
ggplot(varying_d_all_converged, aes(x=d, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_d_all_converged.pdf"),
height = 3.0, width = 4.5)
ggplot(varying_n, aes(x=n, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_n.pdf"),
height = 3.0, width = 4.5)
ggplot(varying_n_all_converged, aes(x=n, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_n_all_converged.pdf"),
height = 3.0, width = 5.5)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_d.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_d_all_converged, aes(x=d, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_d_all_converged.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_n, aes(x=n, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_N.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_n_all_converged, aes(x=n, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_N_all_converged.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggsave(paste0(flder_out, generation, "/summaries/accuracy_models.pdf"),
height = 3.0, width = 6.0)
ggplot(varying_betashape_all_converged, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggsave(paste0(flder_out, generation, "/summaries/accuracy_models_all_converged.pdf"),
height = 3.0, width = 6.0)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = FPR, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
# ggsave(paste0(flder_out, generation, "/summaries/accuracy_models.pdf"),
#        height = 3.5, width = 8)
## add fraction of correct classification, which are values I should have for all combinations
ggplot(varying_n, aes(x=n, y = WeightedAccuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_N.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_n_all_converged, aes(x=n, y = WeightedAccuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_N_all_converged.pdf"),
height = 3.0, width = 4.0)
scale_color_jcolors(palette = "pal8")
###
sort(unique(varying_n_all_converged$model))
colours_models <- c(diagREDM= "#943CB4", diagREDMSL= "#194D44", fullREDMSL=  "#C6CF6E",
fullREM= "#5B6DC8", HMP= "#3CA437", HMP2= "#6B244C" ,
ILR= "#6ACDC5", permutation= "#DE1A1A" , perturbation= "#BBB53E",
pvals_chi_Harris= "#2A297A", ttest=  "#995533"   )
jcolors::display_jcolors(palette = "pal8")
jcolors::jcolors(palette = "pal8")
ggplot(varying_n_all_converged, aes(x=n, y = WeightedAccuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()+
scale_color_manual(values=colours_models)+guides(col=FALSE)+ggtitle(generation)#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_N_all_converged_palette2.pdf"),
height = 3.0, width = 4.0)
# ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
#   geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
# ggplot(varying_n_betashape, aes(x=n, y = Accuracy, group=model, col=beta_gamma_shape))+
#   geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
# ggplot(varying_d_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=d))+
# geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
varying_n[varying_n$n == 100,]
table(true=DA_bool, diagREDMSL=pvals_diagREDMSL < 0.05)
table(true=DA_bool, HMP=pvals_runs_HMP < 0.05)
## plot only the non-DA
pvals_data_frame[pvals_data_frame$true == F,]
ggplot(varying_betashape[varying_betashape$beta_gamma_shape == 0,],
aes(y=FPR, x=factor(model, levels=c("fullREM", "fullREDMSL", "diagREDMSL", "diagREDM", "HMP", "HMP2",
"pvals_chi_Harris",  "permutation", "perturbation", "ttest", "ILR"))))+
geom_point()+labs(x="")+
theme_bw()+theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust=1))
ggsave(paste0(flder_out, generation, "/summaries/FDR_nonDA.pdf"),
height = 3.0, width = 4.0)
try({
ggplot(varying_n_betashape[varying_n_betashape$beta_gamma_shape == 0,],
aes(y=FPR, x=factor(model, levels=c("fullREM", "fullREDMSL", "diagREDMSL", "diagREDM", "HMP", "HMP2",
"pvals_chi_Harris",  "permutation", "perturbation", "ttest", "ILR")),
col=n))+geom_violin()+
geom_point()+labs(x="")+
theme_bw()+theme(axis.text.x=element_text(angle = 45, hjust = 1, vjust=1))
ggsave(paste0(flder_out, generation, "/summaries/FDR_nonDA_varyingn.pdf"),
height = 3.0, width = 4.0)
})
##-----------------------------------------------------------------##
## now only including datasets for which we have results for all models
res_all_common_all_converged
##-----------------------------------------------------------------##
ggplot(varying_n[grepl('diag', varying_n$model),],
aes(y=FPR, x=n, col=model))+geom_point()+geom_line()
varying_n[grepl('diag', varying_n$model),'FPR']
##' the interesting part is the second list, first column: statistically signif values,
##' but with no differential abundance (beta_gamma_shape = 0)
##' There is one false positive when n=10  and when n=100. Otherwise there are zero. Then, shouldn't
##' the FPR change, and be zero when n is 20 and 50?
table(unlist(sapply(datasets, `[`, 'n')),
unlist(sapply(datasets, `[`, 'beta_gamma_shape')),
pvals_diagREDMSL < 0.05)
##-----------------------------------------------------------------##
table(DA_bool, M_est=pvals_fullREM <= 0.05)
table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05)
table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05)
xtable::xtable(table(DA_bool, M_est=pvals_fullREM <= 0.05))
xtable::xtable(table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05))
xtable::xtable(table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05))
head(melt(list(table(DA_bool, M_est=pvals_fullREM <= 0.05),
table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05),
table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05))
))
joint_df$fullRE_M.beta_true
colnames(joint_df)[grepl('onverged', colnames(joint_df))]
joint_df_converged <- (melt(joint_df, measure.vars = c("fullRE_M.converged", "fullRE_DMSL.converged",
"diagRE_DMSL.converged", "diagRE_DM.converged")))
ggplot(joint_df_converged, aes(x=diagRE_DM.d, fill=value))+geom_bar()+facet_wrap(.~gsub(".converged", "", variable), nrow=1)+theme_bw()+
theme(legend.position = "bottom")+labs(x="d")
ggsave(paste0(flder_out, generation, "/summaries/convergence-varying_d.pdf"),
height = 3.0, width = 6.0)
ggplot(joint_df_converged, aes(x=diagRE_DM.n, fill=value))+geom_bar()+facet_wrap(.~gsub(".converged", "", variable), nrow=1)+theme_bw()+
theme(legend.position = "bottom")+labs(x="n")
ggsave(paste0(flder_out, generation, "/summaries/convergence-varying_n.pdf"),
height = 3.0, width = 6.0)
joint_df_converged$value2 <- joint_df_converged$value
joint_df_converged$value2[is.na(joint_df_converged$value2 )] <- FALSE
joint_df_converged$n = apply(joint_df_converged[,c('diagRE_DM.n', 'diagRE_DMSL.n', 'fullRE_DMSL.n', 'fullRE_M.n')],
1, function(i){.x <- unique(i); .x[!is.na(.x)]})
joint_df_converged$d = apply(joint_df_converged[,c('diagRE_DM.d', 'diagRE_DMSL.d', 'fullRE_DMSL.d', 'fullRE_M.d')],
1, function(i){.x <- unique(i); .x[!is.na(.x)]})
ggplot(joint_df_converged %>% group_by(joint_df_converged$d,
joint_df_converged$n, variable) %>%
dplyr::summarise(mean=mean(value2)), aes(x=factor(`joint_df_converged$n`), y=`joint_df_converged$d`, fill=mean))+
geom_tile()+
facet_wrap(.~gsub(".converged", "", variable), nrow=1)+
theme_bw()+
theme(legend.position = "bottom")+labs(x="n")+
jcolors::scale_fill_jcolors_contin("pal3", reverse = FALSE)+labs(y='d', fill='Fraction of converged runs')
ggsave(paste0(flder_out, generation, "/summaries/convergence-varying_n_d.pdf"),
height = 2.5, width = 7.0)
# ggplot(joint_df,
#        aes(x=fullRE_M.idx_within_dataset, y=(fullRE_M.beta_est), col=fullRE_M.pvals_adj<0.05))+
#   geom_point(aes(x=fullRE_M.idx_within_dataset, y=fullRE_M.beta_true), shape=4)+
#   geom_abline(slope = 0, intercept = 0, alpha=0.2)+geom_point(aes(shape=fullRE_M.DA_bool))+
#   geom_errorbar(aes(ymin=fullRE_M.beta_est-1.96*fullRE_M.beta_stderr, ymax=fullRE_M.beta_est+1.96*fullRE_M.beta_stderr), width=.2,
#                 position=position_dodge(.9))+
#   facet_wrap(.~interaction(fullRE_M.idx, fullRE_M.beta_gamma_shape, fullRE_M.DA_bool), scales='free_x', nrow=length(unique(joint_df$fullRE_M.beta_gamma_shape)))+
#   theme_bw()+theme(legend.position = "bottom")
#   # scale_colour_viridis_d(option = "plasma")
#   # scale_colour_manual(values = c("red","#2e8b57", "red", "#2e8b57")) #"#2e8b57"))
# ggsave(paste0(flder_out, generation, "/summaries/M_betaslopes_confint.pdf"),
#        height = 14, width = 8)
# ggplot(joint_df,
#        aes(x=DM.idx_within_dataset, y=(DM.beta_est), col=DM.pvals_adj<0.05))+
#   geom_point(aes(x=M.idx_within_dataset, y=M.beta_true), shape=4)+
#   geom_abline(slope = 0, intercept = 0, alpha=0.2)+geom_point(aes(shape=DM.DA_bool))+
#   geom_errorbar(aes(ymin=DM.beta_est-1.96*DM.beta_stderr, ymax=DM.beta_est+1.96*DM.beta_stderr), width=.2,
#                 position=position_dodge(.9))+
#   facet_wrap(.~interaction(DM.idx, DfullRE_M.beta_gamma_shape, DM.DA_bool), scales='free_x', nrow=length(unique(joint_df$DfullRE_M.beta_gamma_shape)))+
#   theme_bw()+theme(legend.position = "bottom")
# ggsave(paste0(flder_out, generation, "/summaries/DM_betaslopes_confint.pdf"),
# height = 14, width = 8)
all(joint_df$fullRE_M.DA_bool == joint_df$DM.DA_bool)
table(truth=joint_df$fullRE_M.DA_bool, M=joint_df$fullRE_M.pvals_adj <= 0.05)
table(truth=joint_df$DM.DA_bool, DM=joint_df$DM.pvals_adj <= 0.05)
## ROC curves
colnames(joint_df)
all(joint_df$fullRE_M.d == joint_df$fullRE_DMSL.d, na.rm = T); all(joint_df$fullRE_M.n == joint_df$fullRE_DMSL.n, na.rm = T); all(joint_df$fullRE_M.beta_gamma_shape == joint_df$fullRE_DMSL.beta_gamma_shape, na.rm = T);  all(joint_df$fullRE_M.DA_bool == joint_df$fullRE_DMSL.DA_bool, na.rm = T);
# "fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", M.pvals_adj", "fullRE_M.DA_bool", "fullREDMSL.pvals_adj"
## select datasets, not betas
joint_df$M_type = paste0(joint_df$fullRE_M.DA_bool, joint_df$fullRE_M.pvals_adj < 0.05)
joint_df$DM_type = paste0(joint_df$fullRE_DMSL.DA_bool, joint_df$fullRE_DMSL.pvals_adj < 0.05)
joint_df_grouping_by_n = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "fullRE_M.DA_bool",
"fullRE_DMSL.pvals_adj", "M_type", "DM_type" )) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.n) %>%
mutate(sensitivity_DM=sum(DM_type == 'TRUETRUE')/sum(DM_type %in% c('TRUETRUE', 'TRUEFALSE')),
sensitivity_M=sum(M_type == 'TRUETRUE')/sum(M_type %in% c('TRUETRUE', 'TRUEFALSE')),
specificity_DM=sum(DM_type == 'FALSEFALSE')/sum(DM_type %in% c('FALSETRUE', 'FALSEFALSE')),
specificity_M=sum(M_type == 'FALSEFALSE')/sum(M_type %in% c('FALSETRUE', 'FALSEFALSE')))
joint_df_grouping_by_d = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj",
"fullRE_M.DA_bool", "fullRE_DMSL.pvals_adj", "M_type", "DM_type" )) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.d) %>%
mutate(sensitivity_DM=sum(DM_type == 'TRUETRUE')/sum(DM_type %in% c('TRUETRUE', 'TRUEFALSE')),
sensitivity_M=sum(M_type == 'TRUETRUE')/sum(M_type %in% c('TRUETRUE', 'TRUEFALSE')),
specificity_DM=sum(DM_type == 'FALSEFALSE')/sum(DM_type %in% c('FALSETRUE', 'FALSEFALSE')),
specificity_M=sum(M_type == 'FALSEFALSE')/sum(M_type %in% c('FALSETRUE', 'FALSEFALSE')))
ggplot(droplevels(joint_df_grouping_by_n), aes(x=sensitivity_M, y=1-specificity_M))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_d), aes(x=sensitivity_M, y=1-specificity_M))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_n), aes(x=sensitivity_DM, y=1-specificity_DM,
col=interaction(fullRE_M.d, fullRE_M.n)))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_n), aes(x=fullRE_M.n, y=sensitivity_DM,
group=fullRE_M.beta_gamma_shape))+
geom_point()+geom_line()+facet_wrap(.~fullRE_M.beta_gamma_shape)
ggsave(paste0(flder_out, generation, "/summaries/fullRE_M.beta_gamma_shape_sensitivity.pdf"))
# head(melt(joint_df_grouping_by_n, id.vars = c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_DM")))
# plot(joint_df_grouping_by_n$sensitivity_M, 1-joint_df_grouping_by_n$specificity_M)
#
# head(melt(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_DM")],
#           id.vars = c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape")))
modify_colnames = function(i){
colnames(i) = gsub("fullREDMSL.", "", colnames(i))
colnames(i) = gsub("fullRE_M.", "", colnames(i))
colnames(i) = gsub("_M", "", colnames(i))
colnames(i) = gsub("_DM", "", colnames(i))
i
}
joint_df_grouping_by_n_alt = rbind(modify_colnames(cbind(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_M")], model="M")),
modify_colnames(cbind(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "DM_type", "fullRE_M.DA_bool", "sensitivity_DM", "specificity_DM")], model="DM")))
joint_df_grouping_by_d_alt = rbind(modify_colnames(cbind(joint_df_grouping_by_d[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_M")], model="M")),
modify_colnames(cbind(joint_df_grouping_by_d[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "DM_type", "fullRE_M.DA_bool", "sensitivity_DM", "specificity_DM")], model="DM")))
try({
ggplot(droplevels(joint_df_grouping_by_n_alt), aes(x=d, y=sensitivity, group=interaction(n, model), col=n, shape=model))+
geom_point()+geom_line()+facet_wrap(.~beta_gamma_shape)
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=d, y=sensitivity, group=interaction(n, model), col=n, shape=model))+
geom_point()+geom_line()+facet_wrap(.~beta_gamma_shape)
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=sensitivity, group=interaction(d, model), col=n, shape=model))+
geom_point()+geom_line()
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=sensitivity, group=interaction(beta_gamma_shape, model), col=model))+
geom_point()+geom_line()+geom_boxplot()+scale_x_continuous(trans = "log2")
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=specificity, group=interaction(beta_gamma_shape, model), col=model))+
geom_point()+geom_line()+geom_boxplot()+scale_x_continuous(trans = "log2")
})
## What hasn't run?
try({
cat(paste0(sapply(rownames(joint_df[is.na(joint_df$DM.beta_est),]), function(i) substr(i, start = 1, stop = nchar(i)-1)) %>% unique, sep='" "', collapse=''))
sapply(rownames(joint_df[is.na(joint_df$DM.beta_est),]), function(i) gsub("_dataset", "", substr(i, start = 1, stop = nchar(i)-1))) %>% unique
ggplot(joint_df, aes(x=fullRE_M.d, y=as.numeric(fullRE_M.converged), group=interaction(fullRE_M.n, fullRE_M.d)))+
geom_jitter(height = 0.1, alpha=0.2, col='#07367d')+geom_violin()+facet_wrap(.~fullRE_M.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Multinomial runs')
ggsave(paste0(flder_out, generation, "/summaries/M_d_n_convergence.pdf"))
ggplot(joint_df, aes(x=fullRE_DMSL.d, y=as.numeric(fullRE_DMSL.converged),
group=interaction(fullRE_DMSL.n, fullRE_DMSL.d)))+
geom_jitter(height = 0.1, alpha=0.2, col='#07367d')+geom_violin()+facet_wrap(.~fullRE_DMSL.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Dirichlet-Multinomial runs')
ggsave(paste0(flder_out, generation, "/summaries/DM_d_n_convergence.pdf"))
})
# ggplot(joint_df, aes(x=M.d, y=as.numeric(M.converged), group=interaction(M.n, M.d), col=fullRE_M.beta_gamma_shape))+
#   geom_jitter(height = 0.1, alpha=0.8)+geom_violin()+facet_wrap(.~M.n)+
#   theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
#   ggtitle('Success in convergence of Multinomial runs')
# ggplot(joint_df, aes(x=fullRE_M.beta_gamma_shape, y=as.numeric(M.converged), group=fullRE_M.beta_gamma_shape, col=M.d))+
#   geom_violin()+
#   geom_point()+
#   # geom_jitter(height = 0.1, alpha=0.8)+
#   facet_wrap(.~M.n)+
#   theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
#   ggtitle('Success in convergence of Multinomial runs')
## get percentage of successful runs
joint_df_grouping_convergence = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged")) %>%
group_by(fullRE_M.n, fullRE_M.d) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2 = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2_n = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.n) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2_d = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.d) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
try({
pdf(paste0(flder_out, generation, "/summaries/M_DM_convergence.pdf"))
grid.arrange(ggplot(joint_df_grouping_convergence, aes(x=fullRE_M.d, y=convergence_M, col=fullRE_M.n, group=fullRE_M.n))+geom_line()+geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence, aes(x=fullRE_M.d, y=convergence_DM, col=fullRE_M.n, group=fullRE_M.n))+geom_line()+geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
dev.off()
grid.arrange(ggplot(joint_df_grouping_convergence_2, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, group=fullRE_M.beta_gamma_shape))+geom_line()+
geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence_2, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, group=fullRE_M.beta_gamma_shape))+geom_line()+
geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
# grid.arrange(ggplot(joint_df_grouping_convergence_2_n, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, col=M.n, group=interaction(M.n)))+geom_line()+
#                geom_point()+ggtitle('Convergence Multinomial'),
#              ggplot(joint_df_grouping_convergence_2_n, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, col=M.n,  group=interaction(M.n)))+geom_line()+
#                geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
# grid.arrange(ggplot(joint_df_grouping_convergence_2_d, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, col=M.d, group=interaction(M.d)))+geom_line()+
#                geom_point()+ggtitle('Convergence Multinomial'),
#              ggplot(joint_df_grouping_convergence_2_d, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, col=M.d,  group=interaction(M.d)))+geom_line()+
#                geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
#
##power
ggplot(varying_n_betashape %>% dplyr::select(Power, model, n, beta_gamma_shape),
aes(x=beta_gamma_shape+0.001, col=n, y=Power, group=n))+
geom_line()+geom_point()+facet_wrap(.~model)+
theme_bw()+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape %>% dplyr::select(Power, model, n, beta_gamma_shape),
aes(x=beta_gamma_shape+0.001, col=model, y=Power, group=model))+
geom_line()+geom_point()+facet_wrap(.~n, nrow=1)+
theme_bw()+scale_x_continuous(trans = "log10")+theme(legend.position = "bottom")+
scale_color_jcolors(palette = "pal8")
ggsave(paste0(flder_out, generation, "/summaries/power_facet.pdf"), width = 6.5, height = 3)
})
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=model, col=model))+geom_step()+theme_bw()
plot(varying_n$Sensitivity, varying_n$Specificity)
## comparison of ilr and test of  propportions when removcing the first column
try({
small_num <- 0.0001
ggplot(pvals_data_frame, aes(x=ttest_props+small_num,
y=ttest_ilr_adj+small_num))+geom_point()+theme_bw()+scale_x_continuous(trans = "log2")+
scale_y_continuous(trans = "log2")+
geom_vline(xintercept = (0.05+small_num), lty='dashed', col='blue')+
geom_hline(yintercept = (0.05+small_num), lty='dashed', col='blue')
runs_ttest_props
})
## looking at results that have been created using the same set of parameters
### NOTE! because this is slightly confusing
## these are not datasets: the 01 indicates the first beta of dataset 0!
rownames(runs_fullREM0)[grep("_dataset04", rownames(runs_fullREM0))]
rownames(datasets_files)[grep("_dataset04", rownames(datasets_files))]
## we don't have any replicates at the moment
rownames(runs_fullREM0)[grep("_dataset1", rownames(runs_fullREM0))] ## (no?) runs with dataset #2
rownames(runs_fullREM0)[grep("_dataset2", rownames(runs_fullREM0))] ## (no?) runs with dataset #2
runs_diagREDM0[grep("multiple_GenerationJnorm_50_100_80_7_0.6_NA_NA_NA_dataset", rownames(runs_diagREDM0)),]
rownames(runs_fullREM)
table(gsub('.{0,1}$', '', gsub("^.*\\_","", rownames(runs_fullREM))))
## if there are multiple runs
try({
ggplot(runs_fullREM0[grepl(sub("_[^_]+$", "", rownames(runs_fullREM0)[grep("_dataset1", rownames(runs_fullREM0))][1]),
rownames(runs_fullREM0)),], aes(x=idx, y=beta_est))+geom_point()+facet_wrap(.~idx_within_dataset)
})
a <- ggplot(varying_n_all_converged, aes(x=n, y = WeightedAccuracy, col=model, group=model))+
geom_point()+geom_line()+theme_bw()+
scale_color_manual(values=colours_models)+ggtitle(generation)+
guides(col=guide_legend(nrow=2))+
theme(legend.position = "bottom")+
labs(col=NULL)
legend <- cowplot::get_legend(a)
pdf(paste0(flder_out, "legend_models.pdf"), height = 1, width = 6.5)
grid.newpage()
grid.draw(legend)
dev.off()
## save results for tests
object_save <- list(generation=generation,
DA_bool=DA_bool,
runs_ttest_irl=runs_ttest_irl,
runs_ttest_props=runs_ttest_props,
pvals_runs_HMP=pvals_runs_HMP,
pvals_runs_HMP2=pvals_runs_HMP2,
pvals_ttest_ilr=pvals_ttest_ilr,
pvals_perturbation=pvals_perturbation,
pvals_permutation=pvals_permutation,
pvals_chi_Harris=pvals_chi_Harris,
joint_df=joint_df)
saveRDS(object = object_save,
file = paste0("../../../../data/assessing_models_simulation/summaries_synthetic_DA/",
generation, ".RDS"))
## we have much fewer datasets than runs
DA_bool %>% length
nrow(runs_fullREM0)
table(gsub(".*_", "", names(DA_bool)))
table(gsub(".*_", "", rownames(runs_fullREM0)))
length(runs_ttest_props)
ggplot(varying_n_all_converged, aes(x=n, y = WeightedAccuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()+
scale_color_manual(values=colours_models)+guides(col=FALSE)+ggtitle(generation)+
geom_label_repel(data = varying_n_all_converged %>% dplyr::filter(n == max(n)),
aes(x=n, y=WeightedAccuracy, label=model), alpha=0.6, size=3)
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_N_all_converged_palette2_annotated.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_d, aes(x=model, y = AUC, group=model, col=d))+geom_boxplot()+geom_jitter()+theme_bw()
ggplot(varying_n, aes(x=model, y = AUC, group=model, col=n))+geom_boxplot()+geom_jitter()+theme_bw()
sort_first_col_by_second <- function(x) unlist(x[order(x[,2], decreasing = T),1])
sort_first_col_by_second(varying_n %>% dplyr::group_by(model) %>% dplyr::summarise(median(WeightedAccuracy)))
=======
View(joint_df)
pvals_data_frame
View(pvals_data_frame)
dim(joint_df)
dim(pvals_data_frame)
match(rownames(pvals_data_frame), rownames(joint_df))
rownames(pvals_data_frame)[1:2]
rownames(rownames(joint_df))[2]
rownames(joint_df)[1:2]
gsub("_dataset*", "", rownames(pvals_data_frame))
gsub("._dataset*", "", rownames(pvals_data_frame))
gsub(".._dataset*", "", rownames(pvals_data_frame))
gsub(".\._dataset*", "", rownames(pvals_data_frame))
gsub("./._dataset*", "", rownames(pvals_data_frame))
gsub("..\_dataset*", "", rownames(pvals_data_frame))
gsub("\.._dataset*", "", rownames(pvals_data_frame))
gsub("_dataset*$", "", rownames(pvals_data_frame))
gsub("_dataset*", "", rownames(pvals_data_frame))
gsub(".\\._dataset*", "", rownames(pvals_data_frame))
gsub(".\\_dataset*", "", rownames(pvals_data_frame))
sapply(rownames(pvals_data_frame), function(i) strsplit(i)[[1]][1])
sapply(rownames(pvals_data_frame), function(i) strsplit(i, 'dataset')[[1]][1])
sapply(rownames(pvals_data_frame), function(i) strsplit(i, '_dataset')[[1]][1])
match(sapply(rownames(pvals_data_frame), function(i) strsplit(i, '_dataset')[[1]][1]),
sapply(rownames(joint_df), function(i) strsplit(i, '_dataset')[[1]][1]))
match_pvals_params <- match(sapply(rownames(pvals_data_frame), function(i) strsplit(i, '_dataset')[[1]][1]),
sapply(rownames(joint_df), function(i) strsplit(i, '_dataset')[[1]][1]))
dim(pvals_data_frame)
match_pvals_params <- match(sapply(rownames(joint_df), function(i) strsplit(i, '_dataset')[[1]][1]),
sapply(rownames(pvals_data_frame), function(i) strsplit(i, '_dataset')[[1]][1]))
length(match_pvals_params)
dim(pvals_data_frame)
pvals_data_frame[match_pvals_params,]
cbind(joint_df, pvals_data_frame[match_pvals_params,])
joint_df <- cbind(joint_df, pvals_data_frame[match_pvals_params,])
joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,]
head(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,])
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_diagREDM))+geom_histogram()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_fullREDM))+geom_histogram()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_fullREDMSL))+geom_histogram()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_diagREDM))+geom_density()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_diagREDM))+geom_histogram()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_fullREDMSL))+geom_histogram()
ggplot(joint_df[joint_df$fullRE_M.beta_gamma_shape == 0,], aes(x=pvals_diagREDMSL))+geom_histogram()
>>>>>>> b7516544d6581da5bf0a960e309788c1fba6dff6
ggplot(varying_n, aes(x=factor(model,
levels=sort_first_col_by_second(varying_n %>%
dplyr::group_by(model) %>%
dplyr::summarise(median(WeightedAccuracy, na.rm = T)))),
y = WeightedAccuracy, group=model, col=model))+geom_boxplot()+geom_jitter()+theme_bw()+
scale_color_manual(values=colours_models)+ggtitle(generation)+guides(col=FALSE)+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
<<<<<<< HEAD
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_n_boxplot.pdf"),
height = 3.0, width = 4)
ggplot(varying_d, aes(x=factor(model,
levels=sort_first_col_by_second(varying_d %>%
dplyr::group_by(model) %>%
dplyr::summarise(median(WeightedAccuracy, na.rm = T)))),
y = WeightedAccuracy, group=model, col=model))+geom_boxplot()+geom_jitter()+theme_bw()+
scale_color_manual(values=colours_models)+ggtitle(generation)+guides(col=FALSE)+
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_d_boxplot.pdf"),
height = 3.0, width = 4)
=======
>>>>>>> b7516544d6581da5bf0a960e309788c1fba6dff6
=======
give_pairs_with_mvn_wrapper
generation <- c('GenerationMixturefewersmallsignaturespairedKidneyRCCPCAWG')
a <- readRDS(paste0("../../../../data/assessing_models_simulation/summaries_synthetic_DA/", generation, ".RDS"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd*()
>>>>>>> 4777a55438313c31f477b57e62ede86bcbf9cc05
