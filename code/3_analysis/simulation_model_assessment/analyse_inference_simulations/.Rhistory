y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
comparison_randomintercepts_models_nonexo$ct2
ggplot(drop(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(data.frame(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=as.character(ct2),
y=value))+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
ggplot(droplevels(as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
typeof(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_nonexo <- data.frame(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo)
apply(comparison_randomintercepts_models_nonexo, 2, function(i) i)
data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
head(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo$ct2
typeof(comparison_randomintercepts_models_nonexo)
unlist(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo <- as(comparison_randomintercepts_models_nonexo, 'data.frame')
unlist(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo$value)
typeof(comparison_randomintercepts_models_nonexo$L1)
typeof(comparison_randomintercepts_models_nonexo$ct)
typeof(comparison_randomintercepts_models_nonexo$ct2)
comparison_randomintercepts_models_nonexo <- do.call(rbind.data.frame, comparison_randomintercepts_models_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_nonexo[[]]
comparison_randomintercepts_models_all <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL,
model_diagRE_DMSL_list = diagRE_DMSL,
model_fullRE_M_list = fullRE_M)
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
comparison_randomintercepts_models_nonexo[[1]]
data.frame(comparison_randomintercepts_models_nonexo)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
library (plyr)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
typeof(ldply (comparison_randomintercepts_models_nonexo, data.frame))
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_rbind
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../../2_inference_TMB/helper_TMB.R")
library(gridExtra)
library(ggpubr)
generation = "generationGnorm"
generation = "generationMGnorm"
generation = "generationFnorm"
generation = "GenerationCnorm"
runs_fullREM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDM.RDS"))
## Problem with convergence is acute in DM
table(is.na(runs_fullREM0$beta_est))
table(is.na(runs_fullREDMSL0$beta_est))
table(is.na(runs_diagREDMSL0$beta_est))
table(is.na(runs_diagREDM0$beta_est))
runs_fullREM <- runs_fullREM0[runs_fullREM0$converged,]
runs_fullREDMSL <- runs_fullREDMSL0[runs_fullREDMSL0$converged,]
runs_diagREDMSL <- runs_diagREDMSL0[runs_diagREDMSL0$converged,]
runs_diagREDM <- runs_diagREDM0[runs_diagREDM0$converged,]
system(paste0("mkdir -p ../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/"))
joint_df = cbind.data.frame(fullRE_M=runs_fullREM,
fullRE_DMSL=runs_fullREDMSL[match(rownames(runs_fullREM),
rownames(runs_fullREDMSL)),],
diagRE_DMSL=runs_diagREDMSL[match(rownames(runs_fullREM),
rownames(runs_diagREDMSL)),],
diagRE_DM=runs_diagREDM[match(rownames(runs_fullREM),
rownames(runs_diagREDM)),])
## really interesting because all models, except for fullRE DMSL, get wrong one of the datasets
## are these both intercept and slope betas?
# library(extrafont)
# loadfonts(device = "win")
# font_import(pattern = "lmodern*")
# par(family = "LM Roman 10")
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/betas_scatterplots.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est'))))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
## but can it be because fullREDMSL didn't converge for this strange dataset?
joint_df[which.max(joint_df$fullRE_M.beta_est),]
## exactly; we don't have results for the DMSL run
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/M_DM_comparison.pdf"))
do.call('grid.arrange', list(ggplot(joint_df, aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1),
ggplot(joint_df, aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)))
dev.off()
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/M_DM_comparison_only_common.pdf"))
do.call('grid.arrange', list(ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),], aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1),
ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),], aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)))
dev.off()
datasets_files = list.files("../../../../data/assessing_models_simulation/datasets/", full.names = TRUE)
datasets_files = datasets_files[grep(pattern = paste0('/', generation, '_'), datasets_files)]
length(datasets_files)
# match
# datasets_files = datasets_files[match(unique(sapply(rownames(joint_df), function(i) strsplit(i, "_dataset")[[1]][1])),
#                                       gsub("_dataset.RDS", "", basename(datasets_files)))]
datasets = lapply(datasets_files, readRDS)
names(datasets) = unique(gsub("_dataset.RDS", "", basename(datasets_files)))
DA_bool = ( sapply(datasets, function(i) i$beta_gamma_shape) > 0 )
runs_ttest_irl = lapply(datasets_files, function(i)  try(wrapper_run_ttest_ilr(i)))
runs_ttest_props = lapply(datasets_files, function(i)  try(wrapper_run_ttest_props(i)))
pvals_runs_HMP = lapply(datasets_files, function(i)  try(wrapper_run_HMP_Xdc.sevsample(i)))
pvals_runs_HMP2 = lapply(datasets_files, function(i)  try(wrapper_run_HMP_Xmcupo.sevsample(i)))
pvals_ttest_ilr = as.numeric(unlist(runs_ttest_irl))
pvals_ttest_ilr_adj = pvals_ttest_ilr
# res_M = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
# res_DM = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDM.RDS"))
runs_fullREM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDM.RDS"))
## get the p-values for my models
for(str_models in c('fullREM0', 'fullREDMSL0', 'diagREDMSL0', 'diagREDM0')){
assign(gsub('0', '', paste0('pvals_', str_models)), get(paste0('runs_', str_models))[sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) which(get(paste0('runs_', str_models))$idx == i)[1]),'pvals_adj'])
assign(paste0('names(pvals_', gsub('0', '', str_models), ')'),
gsub("_dataset.*", "", rownames(get(paste0('runs_', str_models)))[unique(get(paste0('runs_', str_models))$idx)]))
## remove p-vals of runs that didn't converge
assign(paste0('pvals_', gsub('0', '', str_models))[!sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) get(paste0('runs_', str_models))[(get(paste0('runs_', str_models))$idx == i),'converged'][1])], NA)
get(paste0('pvals_', gsub('0', '', (str_models))))[!sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) get(paste0('runs_', str_models))[(get(paste0('runs_', str_models))$idx == i),'converged'][1])]
}
# pvals_fullREM = runs_fullREDMSL0[sapply(unique(runs_fullREDMSL0$idx),
#                        function(i) which(runs_fullREDMSL0$idx == i)[1]),'pvals_adj']
# names(pvals_fullREM) <- gsub("_dataset.*", "", rownames(runs_fullREDMSL0)[unique(runs_fullREDMSL0$idx)])
# pvals_fullREM[!sapply(unique(runs_fullREDMSL0$idx),
#                function(i) runs_fullREDMSL0[(runs_fullREDMSL0$idx == i),'converged'][1])] <- NA
all(names(pvals_fullREDMSL) == names(pvals_fullREM))
# pvals_fullREM[!runs_fullREDMSL0$converged] <- NA
if(length(pvals_fullREDMSL) != length(datasets)){
stop('The number of runs is not the number of datasets')
}
## p-values from my models are not adjusted for MT
pvals_data_frame=cbind.data.frame(pvals_fullREDMSL=pvals_fullREDMSL,
pvals_fullREM=pvals_fullREM,
pvals_diagREDMSL=pvals_diagREDMSL,
pvals_diagREDM=pvals_diagREDM,
ttest_props=unlist(runs_ttest_props),
ttest_ilr_adj=pvals_ttest_ilr_adj,
HMP=unlist(pvals_runs_HMP),
HMP2=unlist(pvals_runs_HMP2),
true=DA_bool)
head(pvals_data_frame)
res_all = rbind(fullREM=summarise_DA_detection(true = DA_bool, predicted = pvals_fullREDMSL < 0.05),
fullREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_fullREM <= 0.05),
diagREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDMSL <= 0.05),
diagREDM=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDM <= 0.05),
ttest=summarise_DA_detection(true = DA_bool, predicted = runs_ttest_props <= 0.05),
ILR=summarise_DA_detection(true = DA_bool, predicted = pvals_ttest_ilr_adj <= 0.05),
HMP=summarise_DA_detection(true = DA_bool, predicted = pvals_runs_HMP <= 0.05),
HMP2=summarise_DA_detection(true = DA_bool, predicted = pvals_runs_HMP2 <= 0.05))
# rownames(res_all) = c('Multinomial', 'Dirichlet-Multinomial', 'ILR')
res_all
xtable::xtable(res_all)
res_all <- data.frame(res_all)
res_all$model = rownames(res_all)
res_all
ggplot(res_all, aes(x=1, y = FP, col=model))+geom_point()
## group the runs by n, d, etc.
summarise_DA_detection(true = DA_bool, predicted = pvals_fullREDMSL < 0.05)
put_vals_in_table <- function(.pvals){
rbind(fullREM=summarise_DA_detection(true = .pvals$true, predicted = .pvals$pvals_fullREDMSL < 0.05),
fullREDMSL=summarise_DA_detection(true = .pvals$true, predicted = .pvals$pvals_fullREM <= 0.05),
diagREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDMSL <= 0.05),
diagREDM=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDM <= 0.05),
ttest=summarise_DA_detection(true = .pvals$true, predicted = .pvals$ttest_props <= 0.05),
ILR=summarise_DA_detection(true = .pvals$true, predicted = .pvals$ttest_ilr_adj <= 0.05),
HMP=summarise_DA_detection(true = .pvals$true, predicted = .pvals$HMP <= 0.05),
HMP2=summarise_DA_detection(true = .pvals$true, predicted = .pvals$HMP2 <= 0.05))
}
give_accuracies_with_varying_var <- function(var, two_var=F){
if(two_var){
do.call('rbind', apply(expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i))))), 1, function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var[1]) == vars_it[1]) & which(sapply(datasets, '[', var[2]) == vars_it[2]),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, VAR1=vars_it[1], VAR2=vars_it[2], model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-2)] <- var[1]
colnames(.return)[(ncol(.return)-1)] <- var[2]
return(.return)
}))
}else{
do.call('rbind', lapply(unique(unlist(sapply(datasets, `[`, var))), function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var) == vars_it),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, d=vars_it, model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-1)] <- var
return(.return)
}))
}
}
varying_d <-give_accuracies_with_varying_var('d')
varying_n <-give_accuracies_with_varying_var('n')
varying_betashape <-give_accuracies_with_varying_var('beta_gamma_shape')
varying_n_betashape <-give_accuracies_with_varying_var(c('n', 'beta_gamma_shape'), two_var = T)
ggplot(varying_d, aes(x=d, y = FP, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~mod, noel)
ggplot(varying_n, aes(x=n, y = FP, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = FP, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_n, aes(x=n, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggplot(varying_n, aes(x=n, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggsave(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/accuracy_models.pdf"),
height = 3.5, width = 8)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = FP, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
# ggsave(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/accuracy_models.pdf"),
#        height = 3.5, width = 8)
## add fraction of correcxt classification, which are values I should have for all combinations
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=n, y = Accuracy, group=model, col=beta_gamma_shape))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
varying_n_betashape[varying_n_betashape$n == 10,]
varying_n_betashape$beta_gamma_shape
varying_n_betashape[varying_n_betashape$model == 'fullREDMSL',]
var = c('n', 'beta_gamma_shape')
two_var = T
two_var
do.call('rbind', apply(expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i))))), 1, function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var[1]) == vars_it[1]) & which(sapply(datasets, '[', var[2]) == vars_it[2]),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, VAR1=vars_it[1], VAR2=vars_it[2], model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-2)] <- var[1]
colnames(.return)[(ncol(.return)-1)] <- var[2]
return(.return)
}))
which(sapply(datasets, '[', var[1]) == vars_it[1])
vars_it=c(20, 0)
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var[1]) == vars_it[1]) & which(sapply(datasets, '[', var[2]) == vars_it[2]),]
.pvals
which(sapply(datasets, '[', var[1]) == vars_it[1])
unique(unlist(sapply(datasets, `[`, i)))))
unique(unlist(sapply(datasets, `[`, i))))
unique(unlist(sapply(datasets, `[`, i)))
unique(unlist(sapply(datasets, `[`, i))
)
sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i))))
expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i)))))
vars_it=expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i)))))[1,]
vars_it
which(sapply(datasets, '[', var[1]) == vars_it[1]) & which(sapply(datasets, '[', var[2]) == vars_it[2])
vars_it[2]
vars_it[2,1]
vars_it[2]
vars_it[[2]
]
vars_it[[2]]
which(sapply(datasets, '[', var[1]) == vars_it[[1]] & sapply(datasets, '[', var[2]) == vars_it[[2]])
give_accuracies_with_varying_var <- function(var, two_var=F){
if(two_var){
do.call('rbind', apply(expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i))))), 1, function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var[1]) == vars_it[[1]] & sapply(datasets, '[', var[2]) == vars_it[[2]]),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, VAR1=vars_it[1], VAR2=vars_it[2], model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-2)] <- var[1]
colnames(.return)[(ncol(.return)-1)] <- var[2]
return(.return)
}))
}else{
do.call('rbind', lapply(unique(unlist(sapply(datasets, `[`, var))), function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var) == vars_it),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, d=vars_it, model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-1)] <- var
return(.return)
}))
}
}
varying_n_betashape <-give_accuracies_with_varying_var(var = c('n', 'beta_gamma_shape'), two_var = T)
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=n, y = Accuracy, group=model, col=beta_gamma_shape))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
varying_d_betashape <-give_accuracies_with_varying_var(var = c('d', 'beta_gamma_shape'), two_var = T)
ggplot(varying_d_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=d))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("../../../2_inference_TMB/helper_TMB.R")
library(gridExtra)
library(ggpubr)
generation = "generationGnorm"
generation = "generationMGnorm"
generation = "generationFnorm"
generation = "GenerationCnorm"
generation = "GenerationInoRE"
runs_fullREM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDM.RDS"))
## Problem with convergence is acute in DM
table(is.na(runs_fullREM0$beta_est))
table(is.na(runs_fullREDMSL0$beta_est))
table(is.na(runs_diagREDMSL0$beta_est))
table(is.na(runs_diagREDM0$beta_est))
runs_fullREM <- runs_fullREM0[runs_fullREM0$converged,]
runs_fullREDMSL <- runs_fullREDMSL0[runs_fullREDMSL0$converged,]
runs_diagREDMSL <- runs_diagREDMSL0[runs_diagREDMSL0$converged,]
runs_diagREDM <- runs_diagREDM0[runs_diagREDM0$converged,]
system(paste0("mkdir -p ../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/"))
joint_df = cbind.data.frame(fullRE_M=runs_fullREM,
fullRE_DMSL=runs_fullREDMSL[match(rownames(runs_fullREM),
rownames(runs_fullREDMSL)),],
diagRE_DMSL=runs_diagREDMSL[match(rownames(runs_fullREM),
rownames(runs_diagREDMSL)),],
diagRE_DM=runs_diagREDM[match(rownames(runs_fullREM),
rownames(runs_diagREDM)),])
## are these both intercept and slope betas?
# library(extrafont)
# loadfonts(device = "win")
# font_import(pattern = "lmodern*")
# par(family = "LM Roman 10")
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/betas_scatterplots.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est'))))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
## but can it be because fullREDMSL didn't converge for this strange dataset?
joint_df[which.max(joint_df$fullRE_M.beta_est),]
## exactly; we don't have results for the DMSL run
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/M_DM_comparison.pdf"))
do.call('grid.arrange', list(ggplot(joint_df, aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1),
ggplot(joint_df, aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)))
dev.off()
pdf(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/M_DM_comparison_only_common.pdf"))
do.call('grid.arrange', list(ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),], aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1),
ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),], aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)))
dev.off()
datasets_files = list.files("../../../../data/assessing_models_simulation/datasets/", full.names = TRUE)
datasets_files = datasets_files[grep(pattern = paste0('/', generation, '_'), datasets_files)]
length(datasets_files)
# match
# datasets_files = datasets_files[match(unique(sapply(rownames(joint_df), function(i) strsplit(i, "_dataset")[[1]][1])),
#                                       gsub("_dataset.RDS", "", basename(datasets_files)))]
datasets = lapply(datasets_files, readRDS)
names(datasets) = unique(gsub("_dataset.RDS", "", basename(datasets_files)))
DA_bool = ( sapply(datasets, function(i) i$beta_gamma_shape) > 0 )
runs_ttest_irl = lapply(datasets_files, function(i)  try(wrapper_run_ttest_ilr(i)))
runs_ttest_props = lapply(datasets_files, function(i)  try(wrapper_run_ttest_props(i)))
pvals_runs_HMP = lapply(datasets_files, function(i)  try(wrapper_run_HMP_Xdc.sevsample(i)))
pvals_runs_HMP2 = lapply(datasets_files, function(i)  try(wrapper_run_HMP_Xmcupo.sevsample(i)))
pvals_ttest_ilr = as.numeric(unlist(runs_ttest_irl))
pvals_ttest_ilr_adj = pvals_ttest_ilr
# res_M = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
# res_DM = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDM.RDS"))
runs_fullREM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0("../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/", generation, "_diagREDM.RDS"))
## get the p-values for my models
for(str_models in c('fullREM0', 'fullREDMSL0', 'diagREDMSL0', 'diagREDM0')){
assign(gsub('0', '', paste0('pvals_', str_models)), get(paste0('runs_', str_models))[sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) which(get(paste0('runs_', str_models))$idx == i)[1]),'pvals_adj'])
assign(paste0('names(pvals_', gsub('0', '', str_models), ')'),
gsub("_dataset.*", "", rownames(get(paste0('runs_', str_models)))[unique(get(paste0('runs_', str_models))$idx)]))
## remove p-vals of runs that didn't converge
assign(paste0('pvals_', gsub('0', '', str_models))[!sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) get(paste0('runs_', str_models))[(get(paste0('runs_', str_models))$idx == i),'converged'][1])], NA)
get(paste0('pvals_', gsub('0', '', (str_models))))[!sapply(unique(get(paste0('runs_', str_models))$idx),
function(i) get(paste0('runs_', str_models))[(get(paste0('runs_', str_models))$idx == i),'converged'][1])]
}
# pvals_fullREM = runs_fullREDMSL0[sapply(unique(runs_fullREDMSL0$idx),
#                        function(i) which(runs_fullREDMSL0$idx == i)[1]),'pvals_adj']
# names(pvals_fullREM) <- gsub("_dataset.*", "", rownames(runs_fullREDMSL0)[unique(runs_fullREDMSL0$idx)])
# pvals_fullREM[!sapply(unique(runs_fullREDMSL0$idx),
#                function(i) runs_fullREDMSL0[(runs_fullREDMSL0$idx == i),'converged'][1])] <- NA
all(names(pvals_fullREDMSL) == names(pvals_fullREM))
# pvals_fullREM[!runs_fullREDMSL0$converged] <- NA
if(length(pvals_fullREDMSL) != length(datasets)){
stop('The number of runs is not the number of datasets')
}
## p-values from my models are not adjusted for MT
pvals_data_frame=cbind.data.frame(pvals_fullREDMSL=pvals_fullREDMSL,
pvals_fullREM=pvals_fullREM,
pvals_diagREDMSL=pvals_diagREDMSL,
pvals_diagREDM=pvals_diagREDM,
ttest_props=unlist(runs_ttest_props),
ttest_ilr_adj=pvals_ttest_ilr_adj,
HMP=unlist(pvals_runs_HMP),
HMP2=unlist(pvals_runs_HMP2),
true=DA_bool)
head(pvals_data_frame)
res_all = rbind(fullREM=summarise_DA_detection(true = DA_bool, predicted = pvals_fullREDMSL < 0.05),
fullREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_fullREM <= 0.05),
diagREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDMSL <= 0.05),
diagREDM=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDM <= 0.05),
ttest=summarise_DA_detection(true = DA_bool, predicted = runs_ttest_props <= 0.05),
ILR=summarise_DA_detection(true = DA_bool, predicted = pvals_ttest_ilr_adj <= 0.05),
HMP=summarise_DA_detection(true = DA_bool, predicted = pvals_runs_HMP <= 0.05),
HMP2=summarise_DA_detection(true = DA_bool, predicted = pvals_runs_HMP2 <= 0.05))
# rownames(res_all) = c('Multinomial', 'Dirichlet-Multinomial', 'ILR')
res_all
xtable::xtable(res_all)
res_all <- data.frame(res_all)
res_all$model = rownames(res_all)
res_all
ggplot(res_all, aes(x=1, y = FP, col=model))+geom_point()
## group the runs by n, d, etc.
summarise_DA_detection(true = DA_bool, predicted = pvals_fullREDMSL < 0.05)
put_vals_in_table <- function(.pvals){
rbind(fullREM=summarise_DA_detection(true = .pvals$true, predicted = .pvals$pvals_fullREDMSL < 0.05),
fullREDMSL=summarise_DA_detection(true = .pvals$true, predicted = .pvals$pvals_fullREM <= 0.05),
diagREDMSL=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDMSL <= 0.05),
diagREDM=summarise_DA_detection(true = DA_bool, predicted = pvals_diagREDM <= 0.05),
ttest=summarise_DA_detection(true = .pvals$true, predicted = .pvals$ttest_props <= 0.05),
ILR=summarise_DA_detection(true = .pvals$true, predicted = .pvals$ttest_ilr_adj <= 0.05),
HMP=summarise_DA_detection(true = .pvals$true, predicted = .pvals$HMP <= 0.05),
HMP2=summarise_DA_detection(true = .pvals$true, predicted = .pvals$HMP2 <= 0.05))
}
give_accuracies_with_varying_var <- function(var, two_var=F){
if(two_var){
do.call('rbind', apply(expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i))))), 1, function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var[1]) == vars_it[[1]] & sapply(datasets, '[', var[2]) == vars_it[[2]]),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, VAR1=vars_it[1], VAR2=vars_it[2], model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-2)] <- var[1]
colnames(.return)[(ncol(.return)-1)] <- var[2]
return(.return)
}))
}else{
do.call('rbind', lapply(unique(unlist(sapply(datasets, `[`, var))), function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var) == vars_it),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, d=vars_it, model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-1)] <- var
return(.return)
}))
}
}
varying_d <-give_accuracies_with_varying_var('d')
varying_n <-give_accuracies_with_varying_var('n')
varying_betashape <-give_accuracies_with_varying_var('beta_gamma_shape')
varying_n_betashape <-give_accuracies_with_varying_var(var = c('n', 'beta_gamma_shape'), two_var = T)
varying_d_betashape <-give_accuracies_with_varying_var(var = c('d', 'beta_gamma_shape'), two_var = T)
ggsave(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/accuracy_models.pdf"),
height = 3.5, width = 8)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = FP, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggsave(paste0("../../../../results/results_TMB/simulated_datasets/mixed_effects_models/", generation, "/summaries/accuracy_models.pdf"),
height = 3.5, width = 8)
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=n, y = Accuracy, group=model, col=beta_gamma_shape))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_d_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=d))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
