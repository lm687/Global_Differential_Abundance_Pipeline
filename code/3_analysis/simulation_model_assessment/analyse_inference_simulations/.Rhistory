emitted_sequences <- c(1,1,2,4,5)
## WHAT ARE THESE TWO VALUES? LOG-LIKELIHOOD IS NA?
c_n<-forward_algorithm_scaled(visible_data = emitted_sequences, transition_matrix = matrix(as.numeric(A),nrow=2),
emission_matrix = matrix(as.numeric(B),nrow=2), initial_distribution = as.numeric(mu_naught))
log_likelihood<-sum(c_n)
c_n_arg <- c_n
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)+1
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
backward_algorithm_scaled<-function(visible_data,hidden_states,emission_matrix,transition_matrix,c_n_arg){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
beta_hat<-matrix(NA,no_emitted_values,no_hidden_values)
c_n_arg<-exp(c_n_arg)
N<-length(visible_data)
beta_hat[N,]<-(1/c_n_arg[N])
for (n in (N-1):1){
# beta_hat[n,]<-(1/c_n[n])* emission_matrix[,visible_data[n+1]]* beta_hat[n+1,] %*% transition_matrix
beta_hat[n,]<-(1/c_n_arg[n])* emission_matrix[,visible_data[n+1]] %*% transition_matrix  * beta_hat[n+1,]
}
return(beta_hat)
}
beta_hat<-backward_algorithm_scaled(visible_data = emitted_sequences,hidden_states = hidden_values,
emission_matrix = matrix(as.numeric(B),nrow=2), transition_matrix = matrix(as.numeric(A),nrow=2),c_n)
beta_hat
forward_algorithm_scaled2<-function(visible_data,transition_matrix,emission_matrix,initial_distribution){
no_emitted_values <- length(visible_data)
no_hidden_values <- nrow(transition_matrix)
alpha <-matrix(NA,no_emitted_values,no_hidden_values)
c_0<-sum(initial_distribution*emission_matrix[,visible_data[1]])
alpha[1,]<-(1/c_0)*initial_distribution*emission_matrix[,visible_data[1]]
log_L<-list()
log_L<-append(log_L,log(c_0))
for (n in 2:(no_emitted_values)){
transitted<-alpha[(n-1),] %*% transition_matrix
c_n<-sum(transitted*emission_matrix[,visible_data[n]])
alpha[n,]<-(1/c_n)*transitted*emission_matrix[,visible_data[n]]
log_L<-append(log_L,log(c_n))
}
return(alpha)
}
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,matrix(as.numeric(A),nrow=2),matrix(as.numeric(B),nrow=2),as.numeric(mu_naught))
alpha_hat
alpha_hat
baum_welch<-function(emitted_sequences,hidden_values){
#initialization
mu_0<-c(0.5,0.5)
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
#iteration
for (t in 1:N){
alpha_hat<-forward_algorithm_scaled2(emitted_sequences,trans_mat,emission_mat,mu_0)
c_n<-forward_algorithm_scaled(emitted_sequences,trans_mat,emission_mat,mu_0)
beta_hat<-backward_algorithm_scaled(emitted_sequences,hidden_values,emission_mat,trans_mat,c_n)
log_likelihood<-sum(c_n)
mu_0<-alpha_hat[1,] * trans_mat %*% emission_mat[,visible_data[1],drop=FALSE]*beta_hat[1,]
E_nij<-matrix(0,2,2)
for (m in 1:N){
E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
}
trans_mat<-apply(E_nij,1,function(x) x/colSums(E_nij))
emission_mat<-rep(NA,1)
}
#termination
}
# E_nij<-matrix(0,2,2)
# for (m in 1:N){
#   E_nij<-E_nij + apply(trans_mat %*% emission_mat[,visible_data[(m+1)],drop=FALSE]*beta_hat[m+1,],1, function(x) alpha_hat[m,]*x)
# }
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
## sum the number of times that we see the transition from k to l in the observed data
sum_over_j_i <- matrix(NA, ncol=ncol(alpha_hat), nrow=length(emitted_sequences))
sum_over_j_i
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
f[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sum(sapply(1:length(emitted_sequences)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
length(emitted_sequences)
sum(sapply(1:(length(emitted_sequences)-1)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
alpha_hat
ncol(alpha_hat)
(length(emitted_sequences)-1)
sum(sapply(1:(length(emitted_sequences)-1), function(i)){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
trans_mat<-matrix(rep(0.5,4),nrow=2)
emission_mat<-matrix(rep(0.2,10),nrow=2)
N<-1000 ## number of iterations
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
visible_data=rep(1,5)
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[l,i+1]
}
}
})
beta_hat
alpha_hat
sapply(1:(length(emitted_sequences)-1), function(i){
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
sapply(1:(length(emitted_sequences)-1), function(i){
.x <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
.x[k,l] <- alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]
}
}
.x
})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
}
sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]})
A <- matrix(NA, ncol(alpha_hat), ncol(alpha_hat))
for(k in 1:ncol(alpha_hat)){
for(l in 1:ncol(alpha_hat)){
A[k,l] <- sum(sapply(1:(length(emitted_sequences)-1), function(i){ alpha_hat[i,k] * trans_mat[k,l]*emission_mat[l,visible_data[i+1]]*beta_hat[i+1,l]}))
}
}
A
alpha_hat
alpha_hat[length(emitted_sequences]
alpha_hat[length(emitted_sequences)]
alpha_hat[length(emitted_sequences),]
A
onesigma <- rbind(c(1694, 1726, 28.90),
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma
head(melt(onesigma))
require(reshape2)
head(melt(onesigma))
head(melt(onesigma)onesigma)
onesigma
colnames(onesigma) <- c('start', 'end', 'onesigma')
require(ggplot2)
ggplot(onesigma, aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
data.frame(onesigma)
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbom()
ggplot(data.frame(onesigma), aes(x=start, xend=end, y=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(xmin=start, xend=end, ymin=0, yend=onesigma))+geom_ribbon()
onesigma
onesigma[1,'start']:onesigma[1,'end']
lapply(1:nrow(onesigma), function(i) (onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) rbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))_
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma'])))
onesigma
head(onesigma)
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
onesigma <- (do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
onesigma <- rbind(c(1694, 1726, 28.90),
c(1813, 1894, 58.80),
c(1905, 1918, 12.30))
colnames(onesigma) <- c('start', 'end', 'onesigma')
onesigma <- data.frame(do.call('rbind', lapply(1:nrow(onesigma), function(i) cbind(onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'start']:onesigma[i,'end'], onesigma[i,'onesigma']))))
colnames(onesigma) <- c('start', 'end', 'onesigma')
ggplot(data.frame(onesigma), aes(xmin=start, x=end, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, yend=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, y=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), col=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma), fill=onesigma)+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, fill=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_ribbon()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_step()
ggplot(data.frame(onesigma), aes(x=start, ymin=0, ymax=onesigma, col=onesigma))+geom_errorbar()
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
multiple_runs = T
# generation <- 'GenerationMixturefewersignaturespairedObsNmInvPCAWGColoRectAdenoCAPCAWG'
# generation <- 'GenerationJnormBTwoLambdasOneChangingBeta'
# generation <- 'GenerationMixturefewersignaturespairedObsNmInvPCAWGCNSGBMPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMColoRectAdenoCAPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMCNSGBMPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMEsoAdenoCAPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMHeadSCCPCAWG'
# generation <- 'GenerationMixturefewersignaturespairedObsNmObsDMKidneyChRCCPCAWG'
# generation <- 'GenerationMixtureallsignaturespairedObsNmCNSGBMPCAWG'
# generation <- 'GenerationPois'
generation <- 'GenerationMixturefewersignaturespairedObsNmGaussianVarPCAWGProstAdenoCAPCAWG'
source("../../../2_inference_TMB/helper_TMB.R")
source("../../../1_create_ROO/roo_functions.R")
source("helper_model_assessment.R")
library(grid)
library(gridExtra)
#library(ggpubr)
library(reshape2)
library(jcolors)
library(cowplot)
library(ggrepel)
library(dplyr)
####
warning('Note: despite the name, pvals_adj are not adjusted for multiple-testing')
require( tikzDevice )
if(multiple_runs){
flder_out <- "../../../../results/results_TMB/simulated_datasets/mixed_effects_models_multiple/"
flder_in <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries_multiple/"
}else{
flder_out <- "../../../../results/results_TMB/simulated_datasets/mixed_effects_models/"
flder_in <- "../../../../data/assessing_models_simulation/inference_results/TMB/nlminb/summaries/"
}
manual = F
if(manual){
names1 <- paste0(flder_in, generation, "_fullREM_manual.RDS")
names2 <- paste0(flder_in, generation, "_fullREDMsinglelambda_manual.RDS")
names3 <- paste0(flder_in, generation, "_diagREDMsinglelambda_manual.RDS")
names4 <- paste0(flder_in, generation, "_diagREDM_manual.RDS")
runs_fullREM0 = readRDS(names1)
runs_fullREDMSL0 = readRDS(names2)
runs_diagREDMSL0 = readRDS(names3)
runs_diagREDM0 = readRDS(names3)
}else{
runs_fullREM0 = readRDS(paste0(flder_in, generation, "_fullREM.RDS"))
runs_fullREDMSL0 = readRDS(paste0(flder_in, generation, "_fullREDMsinglelambda.RDS"))
runs_diagREDMSL0 = readRDS(paste0(flder_in, generation, "_diagREDMsinglelambda.RDS"))
runs_diagREDM0 = readRDS(paste0(flder_in, generation, "_diagREDM.RDS"))
}
## match them all (wrt fullREM)
runs_fullREDMSL0 <- runs_fullREDMSL0[match(rownames(runs_fullREM0), rownames(runs_fullREDMSL0)),]
runs_diagREDMSL0 <- runs_diagREDMSL0[match(rownames(runs_fullREM0), rownames(runs_diagREDMSL0)),]
runs_diagREDM0 <- runs_diagREDM0[match(rownames(runs_fullREM0), rownames(runs_diagREDM0)),]
## Problem with convergence is acute in DM
table(is.na(runs_fullREM0$beta_est))
table(is.na(runs_fullREDMSL0$beta_est))
table(is.na(runs_diagREDMSL0$beta_est))
table(is.na(runs_diagREDM0$beta_est))
table((runs_fullREM0$converged))
table((runs_fullREDMSL0$converged))
table((runs_diagREDMSL0$converged))
table((runs_diagREDM0$converged))
barplot(c(runs_fullREM0=sum((runs_fullREM0$converged)),
runs_fullREDMSL0=sum((runs_fullREDMSL0$converged)),
runs_diagREDMSL0=sum((runs_diagREDMSL0$converged)),
runs_diagREDM0=sum((runs_diagREDM0$converged))))
image(cbind(runs_fullREM0=((runs_fullREM0$converged)),
runs_fullREDMSL0=((runs_fullREDMSL0$converged)),
runs_diagREDMSL0=((runs_diagREDMSL0$converged)),
runs_diagREDM0=((runs_diagREDM0$converged))))
runs_fullREM <- runs_fullREM0[runs_fullREM0$converged,]
runs_fullREDMSL <- runs_fullREDMSL0[runs_fullREDMSL0$converged,]
runs_diagREDMSL <- runs_diagREDMSL0[runs_diagREDMSL0$converged,]
runs_diagREDM <- runs_diagREDM0[runs_diagREDM0$converged,]
length(runs_fullREM)
length(runs_fullREDMSL)
length(runs_diagREDMSL)
length(runs_diagREDM)
system(paste0("mkdir -p ", flder_out, generation, "/summaries/"))
joint_df = cbind.data.frame(fullRE_M=runs_fullREM,
fullRE_DMSL=runs_fullREDMSL[match(rownames(runs_fullREM),
rownames(runs_fullREDMSL)),],
diagRE_DMSL=runs_diagREDMSL[match(rownames(runs_fullREM),
rownames(runs_diagREDMSL)),],
diagRE_DM=runs_diagREDM[match(rownames(runs_fullREM),
rownames(runs_diagREDM)),])
joint_df$names <- sapply(1:nrow(joint_df), function(i) gsub(paste0(joint_df[i,]$fullRE_M.idx_within_dataset, "$"), "", rownames(joint_df)[i]))
sort(unique(gsub("\\..*","",rownames(joint_df))))
try({
pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est'))))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()})
try({pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots_colour.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est')), col=fullRE_M.beta_gamma_shape))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)+theme(legend.position = "bottom")
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
})
try({pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots_colour_betagammashape.pdf"), height = 2.5, width=6)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_gamma_shape, y=get(paste0(it_model, '.beta_est')), col=fullRE_M.beta_gamma_shape))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='Beta gamma shape', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_gamma_shape')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)+theme(legend.position = "bottom")
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
})
pdf(paste0(flder_out, generation, "/summaries/M_DM_comparison.pdf"), height = 3)
do.call('grid.arrange', list(ggplot(joint_df, aes(x=fullRE_M.beta_true, y=fullRE_M.beta_est, col=fullRE_M.d))+geom_point()+
geom_abline(intercept = 0, slope = 1)+theme_bw()+theme(legend.position = "bottom"),
ggplot(joint_df, aes(x=fullRE_DMSL.beta_true, y=fullRE_DMSL.beta_est, col=fullRE_M.d))+geom_point()+
geom_abline(intercept = 0, slope = 1)+theme_bw()+theme(legend.position = "bottom"), ncol=2))
dev.off()
pdf(paste0(flder_out, generation, "/summaries/M_DM_comparison_only_common.pdf"), height = 3)
do.call('grid.arrange', list(ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),],
aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)+
theme_bw()+theme(legend.position = "bottom"),
ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),],
aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)+
theme_bw()+theme(legend.position = "bottom"), ncol=2))
dev.off()
## Read in datasets
cat('Reading datasets\n')
datasets_files = list.files("../../../../data/assessing_models_simulation/datasets/", full.names = TRUE)
datasets_files = datasets_files[grep(pattern = paste0('/multiple_', generation, '_'), datasets_files)]
length(datasets_files)
# match. This used to be commented out up until the 20220130, where I have uncommented it for generation = "GenerationMixturePCAWG". I have modified it, though,
# to accomodate for multiple runs
# datasets_files = datasets_files[match(unique(sapply(rownames(joint_df), function(i) strsplit(i, "_dataset")[[1]][1])), ## what it used to be
#                                       gsub("_dataset.RDS", "", basename(datasets_files)))]
# stop('Problem with getting the same dataset twice. check analysis_aignle_cat_change.R to see how I did it for the updated version')
# datasets_files = datasets_files[match((sapply(rownames(joint_df[joint_df$fullRE_M.idx_within_dataset == 1,]), function(i) strsplit(i, "_dataset")[[1]][1])), ## new version
#                                       (gsub("_dataset[0-9]+.RDS", "", basename(datasets_files))))] ## commented out on 20220218
cat('Matching files\n')
datasets_files = datasets_files[match(unique(joint_df$names),
gsub(".RDS", "", basename(datasets_files)))]
length(datasets_files)
datasets_files
joint_df$names
gsub(".RDS", "", basename(datasets_files))[1:3]
datasets_files = list.files("../../../../data/assessing_models_simulation/datasets/", full.names = TRUE)
datasets_files
datasets_files = datasets_files[grep(pattern = paste0('/multiple_', generation, '_'), datasets_files)]
datasets_files
length(datasets_files)
basename(datasets_files)[1:3]
gsub(".RDS", "", basename(datasets_files))[1:3]
unique(joint_df$names)[1:3]
gsub("[.]$", "", joint_df$names)
joint_df$names <- gsub("[.]$", "", joint_df$names)
sort(unique(gsub("\\..*","",rownames(joint_df))))
try({
pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est'))))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()})
try({pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots_colour.pdf"), height = 2.5)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_true, y=get(paste0(it_model, '.beta_est')), col=fullRE_M.beta_gamma_shape))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='True beta', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_true')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)+theme(legend.position = "bottom")
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
})
try({pdf(paste0(flder_out, generation, "/summaries/betas_scatterplots_colour_betagammashape.pdf"), height = 2.5, width=6)
do.call( 'grid.arrange', c(grobs=lapply(c('fullRE_M', 'fullRE_DMSL', 'diagRE_DMSL', 'diagRE_DM'), function(it_model){
ggplot(joint_df, aes(x=fullRE_M.beta_gamma_shape, y=get(paste0(it_model, '.beta_est')), col=fullRE_M.beta_gamma_shape))+geom_point()+theme_bw()+
geom_abline(slope = 1, intercept = 0, lty='dashed', col='blue')+
labs(x='Beta gamma shape', y=paste0('Estimate from ', it_model))+
annotate("text", label=paste0('rho= ', signif(cor(joint_df[,c('fullRE_M.beta_gamma_shape')], joint_df[,paste0(it_model, '.beta_est')], use="complete.obs"),
3)),
x = Inf, y = -Inf, vjust=-0.4, hjust=1.0)+theme(legend.position = "bottom")
# theme(text=element_text(family="LM Roman 10", size=20))
}), nrow=1))
dev.off()
})
pdf(paste0(flder_out, generation, "/summaries/M_DM_comparison.pdf"), height = 3)
do.call('grid.arrange', list(ggplot(joint_df, aes(x=fullRE_M.beta_true, y=fullRE_M.beta_est, col=fullRE_M.d))+geom_point()+
geom_abline(intercept = 0, slope = 1)+theme_bw()+theme(legend.position = "bottom"),
ggplot(joint_df, aes(x=fullRE_DMSL.beta_true, y=fullRE_DMSL.beta_est, col=fullRE_M.d))+geom_point()+
geom_abline(intercept = 0, slope = 1)+theme_bw()+theme(legend.position = "bottom"), ncol=2))
dev.off()
pdf(paste0(flder_out, generation, "/summaries/M_DM_comparison_only_common.pdf"), height = 3)
do.call('grid.arrange', list(ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),],
aes(x=fullRE_M.beta_true, fullRE_M.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)+
theme_bw()+theme(legend.position = "bottom"),
ggplot(joint_df[!is.na(joint_df$fullRE_M.beta_est) & !is.na(joint_df$fullRE_DMSL.beta_est),],
aes(x=fullRE_DMSL.beta_true, fullRE_DMSL.beta_est))+geom_point()+geom_abline(intercept = 0, slope = 1)+
theme_bw()+theme(legend.position = "bottom"), ncol=2))
dev.off()
## Read in datasets
cat('Reading datasets\n')
datasets_files = list.files("../../../../data/assessing_models_simulation/datasets/", full.names = TRUE)
datasets_files = datasets_files[grep(pattern = paste0('/multiple_', generation, '_'), datasets_files)]
length(datasets_files)
# match. This used to be commented out up until the 20220130, where I have uncommented it for generation = "GenerationMixturePCAWG". I have modified it, though,
# to accomodate for multiple runs
# datasets_files = datasets_files[match(unique(sapply(rownames(joint_df), function(i) strsplit(i, "_dataset")[[1]][1])), ## what it used to be
#                                       gsub("_dataset.RDS", "", basename(datasets_files)))]
# stop('Problem with getting the same dataset twice. check analysis_aignle_cat_change.R to see how I did it for the updated version')
# datasets_files = datasets_files[match((sapply(rownames(joint_df[joint_df$fullRE_M.idx_within_dataset == 1,]), function(i) strsplit(i, "_dataset")[[1]][1])), ## new version
#                                       (gsub("_dataset[0-9]+.RDS", "", basename(datasets_files))))] ## commented out on 20220218
cat('Matching files\n')
datasets_files = datasets_files[match(unique(joint_df$names),
gsub(".RDS", "", basename(datasets_files)))]
length(datasets_files)
datasets = lapply(datasets_files, readRDS)
