logR_nonexo_sorted_SP[[ct]] <- vector_cats_to_logR(colnames_nonexo_sorted_SP[[ct]])
colnames_nonexo_notsorted_SP[[ct]] <- colnames(give_subset_sigs_TMBobj(load_PCAWG(ct = ct, typedata = "signaturesPCAWG",
path_to_data = "../../data/"), nonexogenous$V1)$Y)
logR_nonexo_notsorted_SP[[ct]] <- vector_cats_to_logR(colnames_nonexo_notsorted_SP[[ct]])
}
aa <- plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F)
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
minimalpert_L2 <- function(i){
sum(i)/sum(i^2)
}
betas_breast <- data.frame(plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted[[ct]],
return_df=T, plot=F))
logR_nonexo_notsorted
betas_breast <- data.frame(plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=T, plot=F))
.slopes_minpert <- betas_breast %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
# minimalpert_L2(softmax(c(.slopes_minpert, 0)))
median(c(.slopes_minpert, 0))
aa <- plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F)
# aa <- geom_hline(yintercept = 0)+geom_vline(xintercept = 1)+geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')+
geom_hline(yintercept = mean(c(.slopes_minpert, 0)), lty='dashed', col='red')
aa <- plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F)
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
aa <- plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[[ct]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
(TMB_obj = diagRE_DMSL_nonexo[["Breast-AdenoCA"]]
)
TMB_obj = diagRE_DMSL_nonexo[["Breast-AdenoCA"]]
names_cats= logR_nonexo_notsorted_SP[[ct]]
ct
minimalpert_L2 <- function(i){
sum(i)/sum(i^2)
}
betas_breast <- data.frame(plot_betas(diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[["Breast-AdenoCA"]],
return_df=T, plot=F))
.slopes_minpert <- betas_breast %>% dplyr::filter(type_beta == "Slope") %>% dplyr::select(Estimate) %>% unlist()
# minimalpert_L2(softmax(c(.slopes_minpert, 0)))
median(c(.slopes_minpert, 0))
# aa <- geom_hline(yintercept = 0)+geom_vline(xintercept = 1)+geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')+
geom_hline(yintercept = mean(c(.slopes_minpert, 0)), lty='dashed', col='red')
aa <- plot_betas(TMB_obj = diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[["Breast-AdenoCA"]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
names_cats= logR_nonexo_notsorted_SP[["Breast-AdenoCA"]]
return_df=F
plot=F
only_slope = T
line_zero=F
add_confint = T
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
remove_SBS=T
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
theme_bw=T
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
.summary_betas
only_slope
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
.summary_betas
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
names_cats[.summary_betas$LogR]
.summary_betas$LogR
length(unique(.summary_betas$LogR))
names_cats
length(names_cats)
diagRE_DMDL_nonexo_SP <- sapply(enough_samples, function(ct){
try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS")))
}, simplify = F); names(diagRE_DMDL_nonexo_SP) <- enough_samples
aa <- plot_betas(TMB_obj = diagRE_DMDL_nonexo_SP[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted_SP[["Breast-AdenoCA"]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
aa + geom_hline(yintercept = median(c(.slopes_minpert, 0)), lty='dashed', col='blue')
aa <- plot_betas(TMB_obj = diagRE_DMDL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted[["Breast-AdenoCA"]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
aa <- plot_betas(TMB_obj = diagRE_DMSL_nonexo[["Breast-AdenoCA"]], names_cats= logR_nonexo_notsorted[["Breast-AdenoCA"]],
return_df=F, plot=F, only_slope = T, line_zero=F, add_confint = T)
colnames_all_sorted <- list()
logR_all_sorted <- list()
colnames_nonexo_sorted <- list()
logR_nonexo_sorted <- list()
colnames_nonexo_notsorted <- list()
logR_nonexo_notsorted <- list()
for(ct in enough_samples){
colnames_all_sorted[[ct]] <- colnames(sort_columns_TMB(load_PCAWG(ct = ct, typedata = "signatures",
path_to_data = "../../data/"))$Y)
logR_all_sorted[[ct]] <- vector_cats_to_logR(colnames_all_sorted[[ct]])
colnames_nonexo_sorted[[ct]] <- colnames(sort_columns_TMB(give_subset_sigs_TMBobj(load_PCAWG(ct = ct, typedata = "signatures",
path_to_data = "../../data/"), nonexogenous$V1))$Y)
logR_nonexo_sorted[[ct]] <- vector_cats_to_logR(colnames_nonexo_sorted[[ct]])
colnames_nonexo_notsorted[[ct]] <- colnames(give_subset_sigs_TMBobj(load_PCAWG(ct = ct, typedata = "signatures",
path_to_data = "../../data/"), nonexogenous$V1)$Y)
logR_nonexo_notsorted[[ct]] <- vector_cats_to_logR(colnames_nonexo_notsorted[[ct]])
}
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
if(length(unique(.summary_betas$LogR)) != length(names_cats)){
stop('Number of beta slope/intercept pairs should be the same as the length of the name of the categories')
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
TMB_obj = diagRE_DMDL_nonexo_SP[["Breast-AdenoCA"]]
names_cats= logR_nonexo_notsorted_SP[["Breast-AdenoCA"]]
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
if(length(unique(.summary_betas$LogR)) != length(names_cats)){
stop('Number of beta slope/intercept pairs should be the same as the length of the name of the categories')
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
rotate_axis=T
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
if(length(unique(.summary_betas$LogR)) != length(names_cats)){
stop('Number of beta slope/intercept pairs should be the same as the length of the name of the categories')
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
if(return_df){
.summary_betas
}else{
return(plt)
}
add_confint
plt
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
if(length(unique(.summary_betas$LogR)) != length(names_cats)){
stop('Number of beta slope/intercept pairs should be the same as the length of the name of the categories')
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1 ,col='blue')
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
plt
if(typeof(TMB_obj) == 'character'){
.summary_betas <- NA
if(theme_bw){
plt <- ggplot()+theme_bw()
if(plot) print(plt)
}else{
plt <- ggplot()
if(plot) print(plt)
}
}else{
.summary_betas <- summary(TMB_obj)
.summary_betas <- cbind.data.frame(python_like_select_rownames(.summary_betas, 'beta'),
type_beta=rep(c('Intercept', 'Slope')),
LogR=rep(1:(nrow(python_like_select_rownames(.summary_betas, 'beta'))/2), each=2))
if(only_slope){
.summary_betas <- .summary_betas[.summary_betas$type_beta == 'Slope',]
}
if(!is.null(names_cats)){
if(remove_SBS){
names_cats <- gsub("SBS", "", names_cats)
}
if(length(unique(.summary_betas$LogR)) != length(names_cats)){
stop('Number of beta slope/intercept pairs should be the same as the length of the name of the categories')
}
.summary_betas$LogR = names_cats[.summary_betas$LogR]
}
plt <- ggplot(.summary_betas, aes(x=LogR, y=`Estimate`))
if(line_zero) plt <- plt + geom_hline(yintercept = 0, lty='dashed', col='blue')
plt <- plt +
geom_point()+
geom_errorbar(aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1)+
ggtitle('Slopes')+facet_wrap(.~type_beta, scales = "free")
if(theme_bw){
plt <- plt + theme_bw()
}
if(add_confint){
confints <- cbind(.summary_betas, confint=give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error']))
plt <- plt+
geom_errorbar(data = confints, aes(ymin=`Estimate`-`Std. Error`, ymax=`Estimate`+`Std. Error`), width=.1 ,col='blue', alpha=0.2)
}
if(rotate_axis){
plt <- plt + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
if(!TMB_obj$pdHess){
if(plot) print(plt <- plt + annotate("text", x = 0, y=.5, label="not PD")+geom_point(col='red'))
}else{
if(plot) print(plt)
}
}
plt
confints
.summary_betas
give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error'])
confints <- cbind(.summary_betas, confint=t(give_confidence_interval(.summary_betas[,'Estimate'], .summary_betas[,'Std. Error'])))
confints
plt <- plt+
geom_errorbar(data = confints, aes(ymin=confint.1, ymax=confint.2), width=.1 ,col='blue', alpha=0.2)
plt
plt <- plt+
geom_errorbar(data = confints, aes(ymin=confint.1, ymax=confint.2), width=.1 ,col='blue', alpha=0.6)
confint.2
plt
diagRE_DMDL_nonexo_SP <- sapply(enough_samples, function(ct){
try(readRDS(paste0("../../data/pcawg_robjects_cache/tmb_results/nlminb/diagREDMnonexo_", ct, "_signaturesPCAWG.RDS")))
}, simplify = F); names(diagRE_DMDL_nonexo_SP) <- enough_samples
diagRE_DMDL_nonexo_SP
