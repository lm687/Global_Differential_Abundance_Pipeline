.return <- cbind.data.frame(.res_all_subset, VAR1=vars_it[1], VAR2=vars_it[2], model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-2)] <- var[1]
colnames(.return)[(ncol(.return)-1)] <- var[2]
return(.return)
}))
}else{
do.call('rbind', lapply(unique(unlist(sapply(datasets, `[`, var))), function(vars_it){
.pvals <- pvals_data_frame[which(sapply(datasets, '[', var) == vars_it),]
.res_all_subset = put_vals_in_table(.pvals)
.return <- cbind.data.frame(.res_all_subset, d=vars_it, model=rownames(.res_all_subset))
colnames(.return)[(ncol(.return)-1)] <- var
return(.return)
}))
}
}
varying_d <-give_accuracies_with_varying_var('d')
varying_n <-give_accuracies_with_varying_var('n')
varying_betashape <-give_accuracies_with_varying_var('beta_gamma_shape')
varying_n_betashape <-give_accuracies_with_varying_var(var = c('n', 'beta_gamma_shape'), two_var = T)
varying_d_betashape <-give_accuracies_with_varying_var(var = c('d', 'beta_gamma_shape'), two_var = T)
ggplot(varying_d, aes(x=d, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~mod, noel)
ggplot(varying_n, aes(x=n, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/FPR_with_n.pdf"),
height = 3.0, width = 4)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = FPR, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_d.pdf"),
height = 3.0, width = 4.5)
ggplot(varying_n, aes(x=n, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/AUC_with_n.pdf"),
height = 3.0, width = 4.5)
ggplot(varying_betashape, aes(x=beta_gamma_shape, y = AUC, col=model, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model)
ggplot(varying_d, aes(x=d, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_d.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_n, aes(x=n, y = Accuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/accuracy_with_N.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggsave(paste0(flder_out, generation, "/summaries/accuracy_models.pdf"),
height = 3.0, width = 6.0)
ggplot(varying_betashape, aes(x=beta_gamma_shape+.001, y = FPR, group=model))+geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
# ggsave(paste0(flder_out, generation, "/summaries/accuracy_models.pdf"),
#        height = 3.5, width = 8)
## add fraction of correct classification, which are values I should have for all combinations
ggplot(varying_n, aes(x=n, y = WeightedAccuracy, col=model, group=model))+geom_point()+geom_line()+theme_bw()#+facet_wrap(.~model)
ggsave(paste0(flder_out, generation, "/summaries/weightedaccuracy_with_N.pdf"),
height = 3.0, width = 4.0)
ggplot(varying_n_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=n))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape, aes(x=n, y = Accuracy, group=model, col=beta_gamma_shape))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
ggplot(varying_d_betashape, aes(x=beta_gamma_shape+.001, y = Accuracy, group=model, col=d))+
geom_point()+geom_line()+theme_bw()+facet_wrap(.~model, nrow=2)+scale_x_continuous(trans = "log10")
varying_n[varying_n$n == 100,]
table(true=DA_bool, diagREDMSL=pvals_diagREDMSL < 0.05)
table(true=DA_bool, HMP=pvals_runs_HMP < 0.05)
## plot only the non-DA
pvals_data_frame[pvals_data_frame$true == F,]
ggplot(varying_betashape[varying_betashape$beta_gamma_shape == 0,],
aes(y=FPR, x=model, col=model))+geom_point()
##-----------------------------------------------------------------##
ggplot(varying_n[grepl('diag', varying_n$model),],
aes(y=FPR, x=n, col=model))+geom_point()+geom_line()
varying_n[grepl('diag', varying_n$model),'FPR']
##' the interesting part is the second list, first column: statistically signif values,
##' but with no differential abundance (beta_gamma_shape = 0)
##' There is one false positive when n=10  and when n=100. Otherwise there are zero. Then, shouldn't
##' the FPR change, and be zero when n is 20 and 50?
table(unlist(sapply(datasets, `[`, 'n')),
unlist(sapply(datasets, `[`, 'beta_gamma_shape')),
pvals_diagREDMSL < 0.05)
##-----------------------------------------------------------------##
table(DA_bool, M_est=pvals_fullREM <= 0.05)
table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05)
table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05)
xtable::xtable(table(DA_bool, M_est=pvals_fullREM <= 0.05))
xtable::xtable(table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05))
xtable::xtable(table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05))
head(melt(list(table(DA_bool, M_est=pvals_fullREM <= 0.05),
table(DA_bool, DM_est=pvals_fullREDMSL <= 0.05),
table(DA_bool, ILR_est=pvals_ttest_ilr_adj <= 0.05))
))
joint_df$fullRE_M.beta_true
# ggplot(joint_df,
#        aes(x=fullRE_M.idx_within_dataset, y=(fullRE_M.beta_est), col=fullRE_M.pvals_adj<0.05))+
#   geom_point(aes(x=fullRE_M.idx_within_dataset, y=fullRE_M.beta_true), shape=4)+
#   geom_abline(slope = 0, intercept = 0, alpha=0.2)+geom_point(aes(shape=fullRE_M.DA_bool))+
#   geom_errorbar(aes(ymin=fullRE_M.beta_est-1.96*fullRE_M.beta_stderr, ymax=fullRE_M.beta_est+1.96*fullRE_M.beta_stderr), width=.2,
#                 position=position_dodge(.9))+
#   facet_wrap(.~interaction(fullRE_M.idx, fullRE_M.beta_gamma_shape, fullRE_M.DA_bool), scales='free_x', nrow=length(unique(joint_df$fullRE_M.beta_gamma_shape)))+
#   theme_bw()+theme(legend.position = "bottom")
#   # scale_colour_viridis_d(option = "plasma")
#   # scale_colour_manual(values = c("red","#2e8b57", "red", "#2e8b57")) #"#2e8b57"))
# ggsave(paste0(flder_out, generation, "/summaries/M_betaslopes_confint.pdf"),
#        height = 14, width = 8)
# ggplot(joint_df,
#        aes(x=DM.idx_within_dataset, y=(DM.beta_est), col=DM.pvals_adj<0.05))+
#   geom_point(aes(x=M.idx_within_dataset, y=M.beta_true), shape=4)+
#   geom_abline(slope = 0, intercept = 0, alpha=0.2)+geom_point(aes(shape=DM.DA_bool))+
#   geom_errorbar(aes(ymin=DM.beta_est-1.96*DM.beta_stderr, ymax=DM.beta_est+1.96*DM.beta_stderr), width=.2,
#                 position=position_dodge(.9))+
#   facet_wrap(.~interaction(DM.idx, DfullRE_M.beta_gamma_shape, DM.DA_bool), scales='free_x', nrow=length(unique(joint_df$DfullRE_M.beta_gamma_shape)))+
#   theme_bw()+theme(legend.position = "bottom")
# ggsave(paste0(flder_out, generation, "/summaries/DM_betaslopes_confint.pdf"),
# height = 14, width = 8)
all(joint_df$fullRE_M.DA_bool == joint_df$DM.DA_bool)
table(truth=joint_df$fullRE_M.DA_bool, M=joint_df$fullRE_M.pvals_adj <= 0.05)
table(truth=joint_df$DM.DA_bool, DM=joint_df$DM.pvals_adj <= 0.05)
## ROC curves
colnames(joint_df)
all(joint_df$fullRE_M.d == joint_df$fullRE_DMSL.d, na.rm = T); all(joint_df$fullRE_M.n == joint_df$fullRE_DMSL.n, na.rm = T); all(joint_df$fullRE_M.beta_gamma_shape == joint_df$fullRE_DMSL.beta_gamma_shape, na.rm = T);  all(joint_df$fullRE_M.DA_bool == joint_df$fullRE_DMSL.DA_bool, na.rm = T);
# "fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", M.pvals_adj", "fullRE_M.DA_bool", "fullREDMSL.pvals_adj"
## select datasets, not betas
joint_df$M_type = paste0(joint_df$fullRE_M.DA_bool, joint_df$fullRE_M.pvals_adj < 0.05)
joint_df$DM_type = paste0(joint_df$fullRE_DMSL.DA_bool, joint_df$fullRE_DMSL.pvals_adj < 0.05)
joint_df_grouping_by_n = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "fullRE_M.DA_bool",
"fullRE_DMSL.pvals_adj", "M_type", "DM_type" )) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.n) %>%
mutate(sensitivity_DM=sum(DM_type == 'TRUETRUE')/sum(DM_type %in% c('TRUETRUE', 'TRUEFALSE')),
sensitivity_M=sum(M_type == 'TRUETRUE')/sum(M_type %in% c('TRUETRUE', 'TRUEFALSE')),
specificity_DM=sum(DM_type == 'FALSEFALSE')/sum(DM_type %in% c('FALSETRUE', 'FALSEFALSE')),
specificity_M=sum(M_type == 'FALSEFALSE')/sum(M_type %in% c('FALSETRUE', 'FALSEFALSE')))
joint_df_grouping_by_d = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj",
"fullRE_M.DA_bool", "fullRE_DMSL.pvals_adj", "M_type", "DM_type" )) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.d) %>%
mutate(sensitivity_DM=sum(DM_type == 'TRUETRUE')/sum(DM_type %in% c('TRUETRUE', 'TRUEFALSE')),
sensitivity_M=sum(M_type == 'TRUETRUE')/sum(M_type %in% c('TRUETRUE', 'TRUEFALSE')),
specificity_DM=sum(DM_type == 'FALSEFALSE')/sum(DM_type %in% c('FALSETRUE', 'FALSEFALSE')),
specificity_M=sum(M_type == 'FALSEFALSE')/sum(M_type %in% c('FALSETRUE', 'FALSEFALSE')))
ggplot(droplevels(joint_df_grouping_by_n), aes(x=sensitivity_M, y=1-specificity_M))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_d), aes(x=sensitivity_M, y=1-specificity_M))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_n), aes(x=sensitivity_DM, y=1-specificity_DM,
col=interaction(fullRE_M.d, fullRE_M.n)))+
geom_point()
ggplot(droplevels(joint_df_grouping_by_n), aes(x=fullRE_M.n, y=sensitivity_DM,
group=fullRE_M.beta_gamma_shape))+
geom_point()+geom_line()+facet_wrap(.~fullRE_M.beta_gamma_shape)
ggsave(paste0(flder_out, generation, "/summaries/fullRE_M.beta_gamma_shape_sensitivity.pdf"))
head(melt(joint_df_grouping_by_n, id.vars = c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_DM")))
plot(joint_df_grouping_by_n$sensitivity_M, 1-joint_df_grouping_by_n$specificity_M)
head(melt(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_DM")],
id.vars = c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape")))
modify_colnames = function(i){
colnames(i) = gsub("fullREDMSL.", "", colnames(i))
colnames(i) = gsub("fullRE_M.", "", colnames(i))
colnames(i) = gsub("_M", "", colnames(i))
colnames(i) = gsub("_DM", "", colnames(i))
i
}
joint_df_grouping_by_n_alt = rbind(modify_colnames(cbind(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_M")], model="M")),
modify_colnames(cbind(joint_df_grouping_by_n[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "DM_type", "fullRE_M.DA_bool", "sensitivity_DM", "specificity_DM")], model="DM")))
joint_df_grouping_by_d_alt = rbind(modify_colnames(cbind(joint_df_grouping_by_d[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "M_type", "fullRE_M.DA_bool", "sensitivity_M", "specificity_M")], model="M")),
modify_colnames(cbind(joint_df_grouping_by_d[,c("fullRE_M.d", "fullRE_M.n", "fullRE_M.beta_gamma_shape", "fullRE_M.pvals_adj", "DM_type", "fullRE_M.DA_bool", "sensitivity_DM", "specificity_DM")], model="DM")))
ggplot(droplevels(joint_df_grouping_by_n_alt), aes(x=d, y=sensitivity, group=interaction(n, model), col=n, shape=model))+
geom_point()+geom_line()+facet_wrap(.~beta_gamma_shape)
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=d, y=sensitivity, group=interaction(n, model), col=n, shape=model))+
geom_point()+geom_line()+facet_wrap(.~beta_gamma_shape)
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=sensitivity, group=interaction(d, model), col=n, shape=model))+
geom_point()+geom_line()
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=sensitivity, group=interaction(beta_gamma_shape, model), col=model))+
geom_point()+geom_line()+geom_boxplot()+scale_x_continuous(trans = "log2")
ggplot(droplevels(joint_df_grouping_by_d_alt), aes(x=beta_gamma_shape, y=specificity, group=interaction(beta_gamma_shape, model), col=model))+
geom_point()+geom_line()+geom_boxplot()+scale_x_continuous(trans = "log2")
## What hasn't run?
cat(paste0(sapply(rownames(joint_df[is.na(joint_df$DM.beta_est),]), function(i) substr(i, start = 1, stop = nchar(i)-1)) %>% unique, sep='" "', collapse=''))
sapply(rownames(joint_df[is.na(joint_df$DM.beta_est),]), function(i) gsub("_dataset", "", substr(i, start = 1, stop = nchar(i)-1))) %>% unique
ggplot(joint_df, aes(x=fullRE_M.d, y=as.numeric(fullRE_M.converged), group=interaction(fullRE_M.n, fullRE_M.d)))+
geom_jitter(height = 0.1, alpha=0.2, col='#07367d')+geom_violin()+facet_wrap(.~fullRE_M.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Multinomial runs')
ggsave(paste0(flder_out, generation, "/summaries/M_d_n_convergence.pdf"))
ggplot(joint_df, aes(x=fullRE_DMSL.d, y=as.numeric(fullRE_DMSL.converged),
group=interaction(fullRE_DMSL.n, fullRE_DMSL.d)))+
geom_jitter(height = 0.1, alpha=0.2, col='#07367d')+geom_violin()+facet_wrap(.~fullRE_DMSL.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Dirichlet-Multinomial runs')
ggsave(paste0(flder_out, generation, "/summaries/DM_d_n_convergence.pdf"))
ggplot(joint_df, aes(x=M.d, y=as.numeric(M.converged), group=interaction(M.n, M.d), col=fullRE_M.beta_gamma_shape))+
geom_jitter(height = 0.1, alpha=0.8)+geom_violin()+facet_wrap(.~M.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Multinomial runs')
ggplot(joint_df, aes(x=fullRE_M.beta_gamma_shape, y=as.numeric(M.converged), group=fullRE_M.beta_gamma_shape, col=M.d))+
geom_violin()+
geom_point()+
# geom_jitter(height = 0.1, alpha=0.8)+
facet_wrap(.~M.n)+
theme_bw()+labs(x='Number of categories (d)', y='Number of successful (1) or unsuccessful (0) convergences')+
ggtitle('Success in convergence of Multinomial runs')
## get percentage of successful runs
joint_df_grouping_convergence = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged")) %>%
group_by(fullRE_M.n, fullRE_M.d) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2 = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2_n = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.n) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
joint_df_grouping_convergence_2_d = joint_df[sapply(unique(joint_df$fullRE_DMSL.idx), function(i) which(joint_df$fullRE_DMSL.idx == i)[1]),] %>%
dplyr::select(c("fullRE_M.d", "fullRE_M.n", "fullRE_DMSL.converged", "fullRE_M.converged", "fullRE_M.beta_gamma_shape")) %>%
group_by(fullRE_M.beta_gamma_shape, fullRE_M.d) %>%
mutate(convergence_M=sum(fullRE_M.converged)/(sum(fullRE_M.converged)+sum(!fullRE_M.converged)),
convergence_DM=sum(fullRE_DMSL.converged)/length(fullRE_DMSL.converged))
pdf(paste0(flder_out, generation, "/summaries/M_DM_convergence.pdf"))
grid.arrange(ggplot(joint_df_grouping_convergence, aes(x=fullRE_M.d, y=convergence_M, col=fullRE_M.n, group=fullRE_M.n))+geom_line()+geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence, aes(x=fullRE_M.d, y=convergence_DM, col=fullRE_M.n, group=fullRE_M.n))+geom_line()+geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
dev.off()
grid.arrange(ggplot(joint_df_grouping_convergence_2, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, group=fullRE_M.beta_gamma_shape))+geom_line()+
geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence_2, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, group=fullRE_M.beta_gamma_shape))+geom_line()+
geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
grid.arrange(ggplot(joint_df_grouping_convergence_2_n, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, col=M.n, group=interaction(M.n)))+geom_line()+
geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence_2_n, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, col=M.n,  group=interaction(M.n)))+geom_line()+
geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
grid.arrange(ggplot(joint_df_grouping_convergence_2_d, aes(x=fullRE_M.beta_gamma_shape, y=convergence_M, col=M.d, group=interaction(M.d)))+geom_line()+
geom_point()+ggtitle('Convergence Multinomial'),
ggplot(joint_df_grouping_convergence_2_d, aes(x=fullRE_M.beta_gamma_shape, y=convergence_DM, col=M.d,  group=interaction(M.d)))+geom_line()+
geom_point()+ggtitle('Convergence Dirichlet-Multinomial'))
##power
ggplot(varying_n_betashape %>% dplyr::select(Power, model, n, beta_gamma_shape),
aes(x=beta_gamma_shape+0.001, col=n, y=Power, group=n))+
geom_line()+geom_point()+facet_wrap(.~model)+
theme_bw()+scale_x_continuous(trans = "log10")
ggplot(varying_n_betashape %>% dplyr::select(Power, model, n, beta_gamma_shape),
aes(x=beta_gamma_shape+0.001, col=model, y=Power, group=model))+
geom_line()+geom_point()+facet_wrap(.~n, nrow=1)+
theme_bw()+scale_x_continuous(trans = "log10")+theme(legend.position = "bottom")+
scale_color_jcolors(palette = "pal8")
ggsave(paste0(flder_out, generation, "/summaries/power_facet.pdf"), width = 6.5, height = 3)
ggplot(varying_n_betashape, aes(x=Sensitivity, y=Specificity)+geom_step()
)
ggplot(varying_n_betashape, aes(x=Sensitivity, y=Specificity))+geom_step()
ggplot(varying_n_betashape, aes(x=Sensitivity, y=Specificity, group=1))+geom_step()
varying_n_betashape$Sensitivity
plot(varying_n_betashape$Sensitivity, varying_n_betashape$Specificity)
varying_n_betashape$Specificity
plot(varying_n$Sensitivity, varying_n_betashape$Specificity)
plot(varying_n$Sensitivity, varying_n$Specificity)
ggplot(varying_n, aes(x=Sensitivity, y=Specificity, group=1))+geom_step()
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=1))+geom_step()
plot(varying_n$Sensitivity, varying_n$Specificity)
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=1))+geom_step()
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=model))+geom_step()
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=model, col=model))+geom_step()
ggplot(varying_n, aes(x=Sensitivity, y=1-Specificity, group=model, col=model))+geom_step()+theme_bw()
varying_n_d <-give_accuracies_with_varying_var(var = c('n', 'd'), two_var = T)
varying_n_d <-give_accuracies_with_varying_var(var = c('d', 'n'), two_var = T)
give_accuracies_with_varying_var
datasets[[1]]$lambda
datasets[[1]]$Nm_lambda
datasets[[1]]$d
datasets[[1]]$Nm_lambdavar = c('d', 'n')
expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i)))))
aaaaa=expand.grid(sapply(var, function(i) unique(unlist(sapply(datasets, `[`, i)))))
rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colanames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage', 'Total')
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
rowSums(ov_and_tubal[,-c(1:2)]
)
ov_and_tubal[,-c(1:2)]
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
ov_and_tubal[,-c(1:2)]
rowSums(ov_and_tubal[,-c(1:2)])
ov_and_tubal$I
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal$I <- as.numeric(ov_and_tubal$I)
ov_and_tubal$II <- as.numeric(ov_and_tubal$II)
ov_and_tubal$III <- as.numeric(ov_and_tubal$III)
ov_and_tubal$IV <- as.numeric(ov_and_tubal$IV)
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
ov_and_tubal
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal$I <- as.numeric(ov_and_tubal$I)
ov_and_tubal$II <- as.numeric(ov_and_tubal$II)
ov_and_tubal$III <- as.numeric(ov_and_tubal$III)
ov_and_tubal$IV <- as.numeric(ov_and_tubal$IV)
rowSums(ov_and_tubal[,-c(1:2)]
)
ov_and_tubal[,-c(1:2)]
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal$I <- as.numeric(ov_and_tubal$I)
ov_and_tubal$II <- as.numeric(ov_and_tubal$II)
ov_and_tubal$III <- as.numeric(ov_and_tubal$III)
ov_and_tubal$IV <- as.numeric(ov_and_tubal$IV)
ov_and_tubal$`Unable to stage` <- as.numeric(ov_and_tubal$`Unable to stage`)
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
ov_and_tubal
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal$I <- as.numeric(ov_and_tubal$I)
ov_and_tubal$II <- as.numeric(ov_and_tubal$II)
ov_and_tubal$III <- as.numeric(ov_and_tubal$III)
ov_and_tubal$IV <- as.numeric(ov_and_tubal$IV)
ov_and_tubal$`Unable to stage` <- as.numeric(ov_and_tubal$`Unable to stage`)
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
colnames(ov_and_tubal)[ncol(ov_and_tubal)] <- 'Total'
ov_and_tubal
ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 212, 73, 510, 208, 13),
c('No screeening', 'Death', 20, 24, 391, 174, 10),
c('MMS', 'Cases', 155, 42, 242, 78, 5),
c('MMS', 'Deaths', 23, 16, 190, 62, 4),
c('USS', 'Cases', 121, 36, 253, 105, 2),
c('USS', 'Deaths', 8, 6, 188, 88, 2))
colnames(ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
ov_and_tubal$I <- as.numeric(ov_and_tubal$I)
ov_and_tubal$II <- as.numeric(ov_and_tubal$II)
ov_and_tubal$III <- as.numeric(ov_and_tubal$III)
ov_and_tubal$IV <- as.numeric(ov_and_tubal$IV)
ov_and_tubal$`Unable to stage` <- as.numeric(ov_and_tubal$`Unable to stage`)
ov_and_tubal <- cbind(ov_and_tubal, rowSums(ov_and_tubal[,-c(1:2)]))
colnames(ov_and_tubal)[ncol(ov_and_tubal)] <- 'Total'
ov_and_tubal
inv_ov_and_tubal <- rbind.data.frame(c('No screening', 'Cases', 116, 69, 501, 208, 12),
c('No screeening', 'Death', 18, 24, 391, 174, 10),
c('MMS', 'Cases', 91, 41, 237, 78, 5),
c('MMS', 'Deaths', 22, 16, 190, 62, 4),
c('USS', 'Cases', 55, 35, 249, 104, 2),
c('USS', 'Deaths', 7, 6, 186, 87, 2))
colnames(inv_ov_and_tubal) <- c('Group', 'Type data', 'I', 'II', 'III', 'IV', 'Unable to stage')
inv_ov_and_tubal$I <- as.numeric(inv_ov_and_tubal$I)
inv_ov_and_tubal$II <- as.numeric(inv_ov_and_tubal$II)
inv_ov_and_tubal$III <- as.numeric(inv_ov_and_tubal$III)
inv_ov_and_tubal$IV <- as.numeric(inv_ov_and_tubal$IV)
inv_ov_and_tubal$`Unable to stage` <- as.numeric(inv_ov_and_tubal$`Unable to stage`)
inv_ov_and_tubal <- cbind(inv_ov_and_tubal, rowSums(inv_ov_and_tubal[,-c(1:2)]))
colnames(inv_ov_and_tubal)[ncol(inv_ov_and_tubal)] <- 'Total'
inv_ov_and_tubal
ov_and_tubal
inv_ov_and_tubal
ov_and_tubal[,-c(1:2)]
inv_ov_and_tubal[,-c(1:2)]
ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))]
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))]
ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))]
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))]
plot(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))],
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])
my_line <- function(x,y,...){
points(x,y,...)
abline(a = lm(y ~ x)$coefficients[1] , b = lm(y ~ x)$coefficients[2] , ...)
}
my_line <- function(x,y,...){
points(x,y,...)
abline(a = 0,b = 1,...)
}
## some numbers are identical ????
pairs(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))],
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))], lower.panel = my_line,)
## some numbers are identical ????
plot(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))],
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))], lower.panel = my_line,)
dev.off()
## some numbers are identical ????
plot(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))],
inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))], lower.panel = my_line)
as.vector(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))])
as.vector(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])
unlist(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))])
unlist(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])
plot(unlist(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))]),
unlist(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))]))
## My understanding was that the two groups were seperate, but that is essentially the same data???
plot(log(unlist(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))])),
log(unlist(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])))
abline(coef = c(0,1))
abline(coef = c(0,1), lty='dashed')
## My understanding was that the two groups were seperate, but that is essentially the same data???
plot(log(unlist(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))])),
log(unlist(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])))
abline(coef = c(0,1), lty='dashed')
## My understanding was that the two groups were seperate, but that is essentially the same data???
plot(log(unlist(ov_and_tubal[,-c(1:2,ncol(ov_and_tubal))])),
log(unlist(inv_ov_and_tubal[,-c(1:2, ncol(inv_ov_and_tubal))])))
abline(coef = c(0,1), lty='dashed', col='blue')
ov_and_tubal[c(T,F),]
ov_and_tubal[c(T,F),'Total']
sum(ov_and_tubal[c(T,F),'Total'])
sum(inv_ov_and_tubal[c(T,F),'Total'])
inv_ov_and_tubal
source("~/Documents/PhD/GlobalDA/code/2_inference_TMB/helper_TMB.R")
inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')]
normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')])
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
createBarplot(normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')]))
norm_inv <- normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')])
norm_inv <- normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')])
rownames(norm_inv) <- rownames(inv_ov_and_tubal)
createBarplot(norm_inv)
norm_inv
inv_ov_and_tubal
norm_inv <- normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')])
rownames(norm_inv) <- paste0(inv_ov_and_tubal$Group, '_', inv_ov_and_tubal$`Type data`)
createBarplot(norm_inv)
norm_inv
head(melt(norm_inv))
norm_inv <- data.frame(normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')]))
rownames(norm_inv) <- paste0(inv_ov_and_tubal$Group, '_', inv_ov_and_tubal$`Type data`)
createBarplot(norm_inv)
head(melt(norm_inv))
norm_inv
norm_inv <- as(normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')]), 'data.frame')
rownames(norm_inv) <- paste0(inv_ov_and_tubal$Group, '_', inv_ov_and_tubal$`Type data`)
createBarplot(norm_inv)
head(melt(norm_inv))
norm_inv
norm_inv <- as(normalise_rw(inv_ov_and_tubal[,c('I', 'II', 'III', 'IV')]), 'matrix')
rownames(norm_inv) <- paste0(inv_ov_and_tubal$Group, '_', inv_ov_and_tubal$`Type data`)
createBarplot(norm_inv)
head(melt(norm_inv))
createBarplot(norm_inv, angle_rotation_axis = 45)
norm <- as(normalise_rw(ov_and_tubal[,c('I', 'II', 'III', 'IV')]), 'matrix')
rownames(norm) <- paste0(ov_and_tubal$Group, '_', ov_and_tubal$`Type data`)
grid.arrange(createBarplot(norm, angle_rotation_axis = 45),
createBarplot(norm_inv, angle_rotation_axis = 45), nrow=1)
