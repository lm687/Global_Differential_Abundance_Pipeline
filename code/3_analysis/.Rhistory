geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
special_cases_2 = sapply(c(grep('Panc−Endocrine_signatures', names(results_TMB_M)),
grep('Prost−AdenoCA_signatures', names(results_TMB_M)),
grep('CNS−PiloAstro' names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
grep('CNS−PiloAstro' names(results_TMB_M)), give_plot_dataset, results_TMB_fullRE_M, TRUE)
special_cases_2 = sapply(c(grep('Panc−Endocrine_signatures', names(results_TMB_M)),
grep('Prost−AdenoCA_signatures', names(results_TMB_M)),
grep('CNS−PiloAstro' names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
special_cases_2 = sapply(c(grep('Panc−Endocrine_signatures', names(results_TMB_M)),
grep('Prost−AdenoCA_signatures', names(results_TMB_M)),
grep('CNS−PiloAstro', names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_2[1,1])$Var1) == melt(special_cases_2[2,1])$Var1
special_cases_2
names(results_TMB_M)
special_cases_2 = sapply(c(grep('Panc−Endocrinesignatures', names(results_TMB_M)),
grep('Prost−AdenoCAsignatures', names(results_TMB_M)),
grep('CNS−PiloAstrosignatures', names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_2[1,1])$Var1) == melt(special_cases_2[2,1])$Var1
special_cases_2
special_cases_2 = sapply(c(grep('Panc-Endocrinesignatures', names(results_TMB_M)),
grep('Prost-AdenoCAsignatures', names(results_TMB_M)),
grep('CNS-PiloAstrosignatures', names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_2[1,1])$Var1) == melt(special_cases_2[2,1])$Var1
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_unsuccessful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_2[1,i]),
Sim=melt(special_cases_2[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')
# ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
#                                grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])
}),
nrow=1))
dev.off()
par(mfrow=c(1,3))
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)),
grep('Head−SCCnucleotidesubsitution1', names(results_TMB_M)),,
grep('Eso-AdenoCA', names(results_TMB_M))[2]), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
special_cases_2 = sapply(c(grep('Panc-Endocrinesignatures', names(results_TMB_M)),
grep('CNS-Oligosignatures', names(results_TMB_M)),
grep('CNS-PiloAstrosignatures', names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_2[1,1])$Var1) == melt(special_cases_2[2,1])$Var1
ggplot(cbind(ML=melt(special_cases_1[1,3]), Sim=melt(special_cases_1[2,3])),
#data.frame(ML=unlist(special_cases_1[1,1]), Sim=unlist(special_cases_1[2,1]))
aes(x=ML.value, y=Sim.value
#,col=ML.Var2, alpha=0.1))+
))+
geom_point()+guides(col=FALSE, alpha=FALSE)
library(gridExtra)
do.call(lapply(1:3, function(i) ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value), labs(x='Normalised observed exposures', y='Simulated theta under model (M)'))+
geom_point()+guides(col=FALSE, alpha=FALSE)), 'grid.arrange')
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_unsuccessful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_2[1,i]),
Sim=melt(special_cases_2[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')
# ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
#                                grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])
}),
nrow=1))
dev.off()
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)),
grep('Head−SCCnucleotidesubsitution1', names(results_TMB_M)),,
grep('Eso-AdenoCA', names(results_TMB_M))[2]), give_plot_dataset, results_TMB_fullRE_M, TRUE)
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)),
grep('Head−SCCnucleotidesubsitution1', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2]), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
special_cases_2 = sapply(c(grep('Panc-Endocrinesignatures', names(results_TMB_M)),
grep('CNS-Oligosignatures', names(results_TMB_M)),
grep('CNS-PiloAstrosignatures', names(results_TMB_M))), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_2[1,1])$Var1) == melt(special_cases_2[2,1])$Var1
ggplot(cbind(ML=melt(special_cases_1[1,3]), Sim=melt(special_cases_1[2,3])),
#data.frame(ML=unlist(special_cases_1[1,1]), Sim=unlist(special_cases_1[2,1]))
aes(x=ML.value, y=Sim.value
#,col=ML.Var2, alpha=0.1))+
))+
geom_point()+guides(col=FALSE, alpha=FALSE)
library(gridExtra)
do.call(lapply(1:3, function(i) ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value), labs(x='Normalised observed exposures', y='Simulated theta under model (M)'))+
geom_point()+guides(col=FALSE, alpha=FALSE)), 'grid.arrange')
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_unsuccessful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_2[1,i]),
Sim=melt(special_cases_2[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')
# ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
#                                grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])
}),
nrow=1))
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)),
grep('Head−SCCnucleotidesubsitution1', names(results_TMB_M)),
grep('Uterus-AdenoCA_sig', names(results_TMB_M))
), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
special_cases_1
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)),
grep('Head-SCCnucleotidesubsitution1', names(results_TMB_M)),
grep('Uterus-AdenoCA_sig', names(results_TMB_M))
), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
special_cases_1
grep('CNS-Oligonucleotidesubsitution1', names(results_TMB_M)
)
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubstitution1', names(results_TMB_M)),
grep('Head-SCCnucleotidesubstitution1', names(results_TMB_M)),
grep('Uterus-AdenoCA_sig', names(results_TMB_M))
), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
special_cases_1
c(grep('CNS-Oligonucleotidesubstitution1', names(results_TMB_M)),
grep('Head-SCCnucleotidesubstitution1', names(results_TMB_M)),
grep('Uterus-AdenoCA_sig', names(results_TMB_M))
)
#----------------------------------------------------------------------------------------------------#
# M (cont)
## Specific cases
par(mfrow=c(1,3))
special_cases_1 = sapply(c(grep('CNS-Oligonucleotidesubstitution1', names(results_TMB_M)),
grep('Head-SCCnucleotidesubstitution1', names(results_TMB_M)),
grep('Uterus-AdenoCAsignatures', names(results_TMB_M))
), give_plot_dataset, results_TMB_fullRE_M, TRUE)
as.numeric(melt(special_cases_1[1,1])$Var1) == melt(special_cases_1[2,1])$Var1
pdf("../../results/assessing_models/comparison_theta_PCAWG_M_special_cases_successful.pdf",
height = 3, width = 10)
do.call('grid.arrange', args=list(grobs=lapply(1:3, function(i){
ggplot(cbind(ML=melt(special_cases_1[1,i]),
Sim=melt(special_cases_1[2,i])),
aes(x=ML.value, y=Sim.value))+
geom_point()+guides(col=FALSE, alpha=FALSE)+
geom_abline(intercept = 0, slope = 1, linetype = "dashed")+
labs(x='Normalised observed exposures', y='Simulated theta under model (M)')+
ggtitle(names(results_TMB_M)[c(grep('CNS-Oligo', names(results_TMB_M)),
grep('Eso-AdenoCA', names(results_TMB_M))[2])][i])}),
nrow=1))
dev.off()
#----------------------------------------------------------------------------------------------------#
# DM
simulate_from_DM = function(beta_coefs, RE_coefs, lambda){
alphabar = softmax(cbind(sapply(1:(length(beta_coefs)/2),
function(some_dummy_idx){
give_z_matrix(length(RE_coefs) * 2) %*% RE_coefs}) +
give_x_matrix(length(RE_coefs) * 2) %*% matrix(beta_coefs, nrow=2) , 0))
## here there is a single lambda
alpha_mat = alphabar*exp(lambda)
return(t(apply(alpha_mat, 1, MCMCpack::rdirichlet, n=1)))
}
give_z_matrix
idx_dataset=1
is.null(results_TMB_fullRE_DM[[idx_dataset]])
typeof(results_TMB_fullRE_DM[[idx_dataset]]) == "character"
!(results_TMB_fullRE_DM[[idx_dataset]]$pdHess)
results_TMB_fullRE_DM[[2]]$pdHess
results_TMB_fullRE_DM
results_TMB_fullRE_DM[[2]]
results_TMB_fullRE_DM[[3]]
results_TMB_fullRE_DM[[4]]
results_TMB_fullRE_DM[[4]]$pdHess
sapply(results_TMB_fullRE_DM, `[`, "pdHess")
which(sapply(results_TMB_fullRE_DM, `[`, "pdHess") == TRUE)
which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")) == TRUE)
idx_dataset=4
results_TMB_fullRE_DM[[idx_dataset]]$pdHess
which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")))
unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess"))
which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")) == "TRUE")
results_TMB_fullRE_DM[['Bone-Benignsignatures.pdHess']]
results_TMB_fullRE_DM[['Bone-Benignsignatures']]
results_TMB_fullRE_DM[['Bone-Benignsignatures']]$pdHess
results_TMB_fullRE_DM[['Bone-Benignsignatures']]
which(names(results_TMB_fullRE_DM) == 'Bone-Benignsignatures')
idx_dataset=9
beta_coefs = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM(beta_coefs, RE_coefs, lambda))
RE_coefs
sapply(1:(length(beta_coefs)/2),
function(some_dummy_idx){
give_z_matrix(length(RE_coefs) * 2) %*% RE_coefs})
RE_coefs
beta_coefs
RE_coefs
matrix(RE_coefs, ncol=length(beta_coefs)/2)
RE_coefs = matrix(RE_coefs, ncol=length(beta_coefs)/2)
n = length(RE_coefs)/length(RE_coefs) * 2)
n = length(RE_coefs)/(length(RE_coefs) * 2)
n
(length(RE_coefs) * 2)
n = length(RE_coefs)/(length(RE_coefs)/ 2)
n
(length(RE_coefs)/ 2)
n = length(RE_coefs)/(length(beta_coefs)/ 2)
n
RE_coefs = matrix(RE_coefs, ncol=length(beta_coefs)/2)
n = length(RE_coefs)/(length(beta_coefs)/ 2)
RE_coefs
give_z_matrix(n)
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
RE_coefs = matrix(RE_coefs, ncol=length(beta_coefs)/2)
RE_coefs
n
RE_coefs
length(RE_coefs)
give_z_matrix(n)
give_z_matrix
give_z_matrix(2*n)
RE_coefs
give_z_matrix(2*n) %*% RE_coefs
give_x_matrix
(give_z_matrix(2*n) %*% RE_coefs)
(give_x_matrix(2*n)) %*% matrix(beta_coefs, nrow=2)
beta_coefs
(give_z_matrix(2*n) %*% RE_coefs) +
(give_x_matrix(2*n)) %*% matrix(beta_coefs, nrow=2)
alphabar = softmax(cbind( (give_z_matrix(2*n) %*% RE_coefs) +
(give_x_matrix(2*n)) %*% matrix(beta_coefs, nrow=2) , 0))
## here there is a single lambda
alpha_mat = alphabar*exp(lambda)
simulate_from_DM_RE = function(beta_coefs, RE_coefs, lambda){
RE_coefs = matrix(RE_coefs, ncol=length(beta_coefs)/2)
n = length(RE_coefs)/(length(beta_coefs)/ 2)
alphabar = softmax(cbind( (give_z_matrix(2*n) %*% RE_coefs) +
(give_x_matrix(2*n)) %*% matrix(beta_coefs, nrow=2) , 0))
## here there is a single lambda
alpha_mat = alphabar*exp(lambda)
return(t(apply(alpha_mat, 1, MCMCpack::rdirichlet, n=1)))
}
beta_coefs = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM_RE(beta_coefs, RE_coefs, lambda))
sim_thetas
pdf("../../results/assessing_models/comparison_theta_PCAWG_DM_fullRE.pdf")
par(mfrow=c(5,5), mar=c(1.8,1.8,1.8,1.8))
sapply(1:length(results_TMB_fullRE_DM), function(idx_dataset){
# sapply(6, function(idx_dataset){
if(is.null(results_TMB_fullRE_DM[[idx_dataset]])){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(typeof(results_TMB_fullRE_DM[[idx_dataset]]) == "character"){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(!(results_TMB_fullRE_DM[[idx_dataset]]$pdHess)){
# no good convergence
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
beta_coefs = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM_RE(beta_coefs, RE_coefs, lambda))
## from observed
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_active')
if(sum(sapply(matrices, length)) == 0){
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_all')
}
ml_thetas = normalise_rw(do.call('rbind', matrices))
ml_thetas = replicate(20, ml_thetas)
dim(melt(sim_thetas))
dim(melt(ml_thetas))
plot(cbind(sim=melt(sim_thetas), ml=melt(ml_thetas))[,c('sim.value', 'ml.value')],
main=names(count_objects[idx_dataset]), cex.main=.7)
abline(coef = c(0,1), col='blue', lty='dashed')
}
}
}
})
dev.off()
which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")) == "TRUE")
results_TMB_fullRE_DM[which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")) == "TRUE")]
coefficient_overdispersion = 1000
warning('Be careful to use the latest <coefficient_overdispersion> value!')
#----------------------------------------------------------------------------------------------------#
# DM
simulate_from_DM = function(beta_coefs, RE_coefs, lambda, coefficient_overdispersion){
alphabar = softmax(cbind(sapply(1:(length(beta_coefs)/2),
function(some_dummy_idx){
give_z_matrix(length(RE_coefs) * 2) %*% RE_coefs}) +
give_x_matrix(length(RE_coefs) * 2) %*% matrix(beta_coefs, nrow=2) , 0))
## here there is a single lambda
alpha_mat = alphabar*exp(lambda)*coefficient_overdispersion
return(t(apply(alpha_mat, 1, MCMCpack::rdirichlet, n=1)))
}
pdf("../../results/assessing_models/comparison_theta_PCAWG_DM.pdf")
par(mfrow=c(5,5), mar=c(1.8,1.8,1.8,1.8))
sapply(1:length(results_TMB_DM), function(idx_dataset){
# sapply(6, function(idx_dataset){
if(is.null(results_TMB_DM[[idx_dataset]])){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(typeof(results_TMB_DM[[idx_dataset]]) == "character"){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(!(results_TMB_DM[[idx_dataset]]$pdHess)){
# no good comvergence
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
beta_coefs = python_like_select_name(results_TMB_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM(beta_coefs, RE_coefs, lambda, coefficient_overdispersion))
## from observed
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_active')
if(sum(sapply(matrices, length)) == 0){
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_all')
}
ml_thetas = normalise_rw(do.call('rbind', matrices))
ml_thetas = replicate(20, ml_thetas)
dim(melt(sim_thetas))
dim(melt(ml_thetas))
plot(cbind(sim=melt(sim_thetas), ml=melt(ml_thetas))[,c('sim.value', 'ml.value')],
main=names(count_objects[idx_dataset]), cex.main=.7)
abline(coef = c(0,1), col='blue', lty='dashed')
}
}
}
})
dev.off()
## the ones with good convergence
## !!! the overdispersion parameter has to be multiplied by the one from TMB
results_TMB_fullRE_DM[which(unlist(sapply(results_TMB_fullRE_DM, `[`, "pdHess")) == "TRUE")]
sim_thetas = replicate(20, simulate_from_DM(beta_coefs, RE_coefs, lambda, coefficient_overdispersion))
simulate_from_DM_RE = function(beta_coefs, RE_coefs, lambda, coefficient_overdispersion){
RE_coefs = matrix(RE_coefs, ncol=length(beta_coefs)/2)
n = length(RE_coefs)/(length(beta_coefs)/ 2)
alphabar = softmax(cbind( (give_z_matrix(2*n) %*% RE_coefs) +
(give_x_matrix(2*n)) %*% matrix(beta_coefs, nrow=2) , 0))
## here there is a single lambda
alpha_mat = alphabar*exp(lambda)*coefficient_overdispersion
return(t(apply(alpha_mat, 1, MCMCpack::rdirichlet, n=1)))
}
pdf("../../results/assessing_models/comparison_theta_PCAWG_DM_fullRE.pdf")
par(mfrow=c(5,5), mar=c(1.8,1.8,1.8,1.8))
sapply(1:length(results_TMB_fullRE_DM), function(idx_dataset){
# sapply(6, function(idx_dataset){
if(is.null(results_TMB_fullRE_DM[[idx_dataset]])){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(typeof(results_TMB_fullRE_DM[[idx_dataset]]) == "character"){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(!(results_TMB_fullRE_DM[[idx_dataset]]$pdHess)){
# no good convergence
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
beta_coefs = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM_RE(beta_coefs, RE_coefs, lambda))
## from observed
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_active')
if(sum(sapply(matrices, length)) == 0){
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_all')
}
ml_thetas = normalise_rw(do.call('rbind', matrices))
ml_thetas = replicate(20, ml_thetas)
dim(melt(sim_thetas))
dim(melt(ml_thetas))
plot(cbind(sim=melt(sim_thetas), ml=melt(ml_thetas))[,c('sim.value', 'ml.value')],
main=names(count_objects[idx_dataset]), cex.main=.7)
abline(coef = c(0,1), col='blue', lty='dashed')
}
}
}
})
dev.off()
pdf("../../results/assessing_models/comparison_theta_PCAWG_DM_fullRE.pdf")
par(mfrow=c(5,5), mar=c(1.8,1.8,1.8,1.8))
sapply(1:length(results_TMB_fullRE_DM), function(idx_dataset){
# sapply(6, function(idx_dataset){
if(is.null(results_TMB_fullRE_DM[[idx_dataset]])){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(typeof(results_TMB_fullRE_DM[[idx_dataset]]) == "character"){
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
if(!(results_TMB_fullRE_DM[[idx_dataset]]$pdHess)){
# no good convergence
plot(x=1, type = "n", main=names(count_objects[idx_dataset]), cex.main=.7)
return(NA)
}else{
beta_coefs = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'beta')
RE_coefs = results_TMB_fullRE_DM[[idx_dataset]]$par.random
lambda = python_like_select_name(results_TMB_fullRE_DM[[idx_dataset]]$par.fixed, 'log_lambda')
sim_thetas = replicate(20, simulate_from_DM_RE(beta_coefs, RE_coefs, lambda, coefficient_overdispersion))
## from observed
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_active')
if(sum(sapply(matrices, length)) == 0){
matrices = slot(count_objects[[idx_dataset]], 'count_matrices_all')
}
ml_thetas = normalise_rw(do.call('rbind', matrices))
ml_thetas = replicate(20, ml_thetas)
dim(melt(sim_thetas))
dim(melt(ml_thetas))
plot(cbind(sim=melt(sim_thetas), ml=melt(ml_thetas))[,c('sim.value', 'ml.value')],
main=names(count_objects[idx_dataset]), cex.main=.7)
abline(coef = c(0,1), col='blue', lty='dashed')
}
}
}
})
dev.off()
