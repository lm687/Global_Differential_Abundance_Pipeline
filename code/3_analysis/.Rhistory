if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
# beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
pdf("~/Desktop/sort out/clareity/nonDA1.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
library(gridExtra)
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
# set.seed(1245)
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
# beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
pdf("~/Desktop/sort out/clareity/nonDA0.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
u
dim(u)
n
u = matrix(0, nrow=n, ncol=d-1)
u
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
library(ggplot2)
source("helper_functions.R")
library(gridExtra)
source("~/Documents/PhD/CDA_in_Cancer/code/functions/meretricious/pretty_plots/prettySignatures.R")
# set.seed(1245)
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
softmax = function(x){
if(is.null(dim(x))){
## vector
sum_x = sum(exp(x))
exp(x)/sum_x
}else{
## matrix
sum_x = rowSums(exp(x))
sweep(exp(x), 1, sum_x, '/')
}
}
give_dummy_colnames = function(i)
{
colnames(i) = paste0('col', 1:ncol(i))
i
}
give_dummy_rownames = function(i)
{
rownames(i) = paste0('row', 1:nrow(i))
i
}
reflect_matrix = function(m){
m[nrow(m):1,]
}
rsq = function (x, y) cor(x, y) ^ 2
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
d = 4 # opt$Nk ## number of signatures
n = 40 #opt$Ns ## number of samples
beta_gamma_shape = 2  ##opt$hyperparam_shape ## shape parameter for the beta
sd_RE = 0.3 ## standard deviation for random effects
lambda = c(200, 200) ## overdispersion scalars. Lower value -> higher overdispersion
Nm_lambda = 300 ## opt$Nm_lambda ## lambda parameter for number of mutations per sample (i.e. a sample in a group)
## Group effects
## covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
## the samples are split into two groups
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
beta = matrix(0, nrow=2, ncol=d-1)
beta[2,] = rgamma(n = d-1, shape = beta_gamma_shape, rate = beta_gamma_shape) ## for the coefficients
## Random effects
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
u = mvtnorm::rmvnorm(n = n, sigma=diag(rep(1,d-1)), mean = rep(0, d-1))
u = matrix(0, nrow=n, ncol=d-1)
## lambdas: overdispersion
lambdas = c(rep(lambda[1], n), rep(lambda[2], n))
## create alpha
theta = softmax( cbind(t(X_sim)%*%beta + t(Z_sim)%*%u, 0) )
W = t(apply(theta, 1, rmultinom, n = 1, size = Nm_lambda))
#-------------------------------------------------------------------------------------------------#
pdf("~/Desktop/sort out/clareity/DA2.pdf")
grid.arrange(createBarplot(give_dummy_rownames(give_dummy_colnames(W[1:n,])), remove_labels =  TRUE)+guides(fill=FALSE),
createBarplot(give_dummy_rownames(give_dummy_colnames(W[(n+1):(2*n),])), remove_labels = TRUE)+guides(fill=FALSE))
dev.off()
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(TMB)
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
source("mm_multinomial/helper_functions.R")
source("helper_TMB.R")
# set.seed(1234)
re_run_inference = FALSE ## use cache or not
give_summary_runs = FALSE ## whether to run the section to see what has converged, what hasn't, etc.
folder_robjs = "../../data/robjects_cache/tmb_results/"
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
TMB::compile("mm_multinomial/ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_multinomial"))
TMB::compile("mm_multinomial/ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/ME_LNM.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/ME_LNM"))
TMB::compile("mm_multinomial/fullRE_ME_multinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_multinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial"))
TMB::compile("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_dirichletmultinomial_altpar"))
TMB::compile("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/fullRE_ME_singlelambda_dirichletmultinomial"))
TMB::compile("mm_multinomial/diagRE_ME_dirichletmultinomial.cpp", "-std=gnu++17")
dyn.load(dynlib("mm_multinomial/diagRE_ME_dirichletmultinomial"))
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
# table(samples_files[,1], samples_files[,2])
# ct = "Bladder-TCC" #samples_files[1,1]
# typedata =nucleotidesubstitution3  #"signatures" #samples_files[1,2]
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
#-------------------------------------------------------------------------------------------------#
#----------------------------------------------------------------------------------------------------#
## run at random
if(re_run_inference){
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "DM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "DM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("LNM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
# mclapply(1:nrow(samples_files), function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "LNM"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "LNM_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_M"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_M_", rownames(i), ".RDS"))
})
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("fullRE_DM_altpar_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "fullRE_DM_altpar"),
timeout = 300, onTimeout = "warning")
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "fullRE_DM_altpar_", rownames(i), ".RDS"))
})
## diagonal M
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("diagRE_M_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
outcome_inference="Not good"
counter_tries = 0
while(outcome_inference != "Good" & counter_tries < 6){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "diagRE_M"),
timeout = 300, onTimeout = "warning")
outcome_inference = give_summary_per_sample(x)
counter_tries = counter_tries + 1
}
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "diagRE_M_", rownames(i), ".RDS"))
})
## diagonal DM
mclapply(sample(which(is.na(match(rownames(samples_files2),
gsub(".RDS", "", gsub("diagRE_DM_", "", list.files("../../data/robjects_cache/tmb_results/"))))))),
function(idx){
outcome_inference="Not good"
counter_tries = 0
while(outcome_inference != "Good" & counter_tries < 6){
i = samples_files2[idx,]
x = withTimeout(wrapper_run_TMB(i[1,1], i[1,2], model = "diagRE_DM"),
timeout = 300, onTimeout = "warning")
outcome_inference = give_summary_per_sample(x)
counter_tries = counter_tries + 1
}
saveRDS(object = x, file=paste0("../../data/robjects_cache/tmb_results/", "diagRE_DM_", rownames(i), ".RDS"))
})
}
#----------------------------------------------------------------------------------------------------#
results_TMB_M = lapply( python_like_select(list.files(folder_robjs), "^M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_M) = sapply(python_like_select(list.files(folder_robjs), "^M_"), clean_name)
results_TMB_DM = lapply( python_like_select(list.files(folder_robjs), "^DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_DM) = sapply(python_like_select(list.files(folder_robjs), "^DM_"), clean_name)
# results_TMB_DM_dep = lapply( python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"),
#                              function(i) readRDS(paste0("../../data/robjects_cache/tmb_results_dep/", i)))
# names(results_TMB_DM_dep) = sapply(python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"), clean_name)
results_TMB_LNM = lapply( python_like_select(list.files(folder_robjs), "^LNM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files(folder_robjs), "^LNM_"), clean_name_fullRE)
results_TMB_fullRE_M = lapply( python_like_select(list.files(folder_robjs), "^fullRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_M_"), clean_name_fullRE)
full_RE_DM = python_like_select(list.files(folder_robjs), "^fullRE_DM_"); full_RE_DM = full_RE_DM[-grep("_altpar_", full_RE_DM)]
results_TMB_fullRE_DM = lapply( full_RE_DM, function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DM) = sapply(full_RE_DM, clean_name_fullRE)
results_TMB_diagRE_DM = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DM_"), clean_name_fullRE)
results_TMB_diagRE_M = lapply( python_like_select(list.files(folder_robjs), "^diagRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_M_"), clean_name_fullRE)
# results_TMB_fullRE_DM = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DM_altpar_"), function(i) readRDS(paste0(folder_robjs, i)))
# names(results_TMB_fullRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DM_altpar_"), clean_name_fullRE_2)
#----------------------------------------------------------------------------------------------------#
## similar to posterior_predictive_checks.R, but for the maximum likelihood data
#-------------------------------------------------------------------------------------------------#
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ggplot2)
require(R.utils)
require(dplyr)
library(parallel)
library(RColorBrewer)
library(reshape2)
library(gridExtra)
library(ggrepel)
library(MCMCpack) ## sample from Dirichlet
source("../2_inference_TMB/helper_TMB.R")
source("../2_inference/helper/helper_DA_stan.R") ## for normalise_rw
source("../3_analysis/helper/helper_simulate_from_model.R")
# set.seed(1234)
folder_roo = "../../data/roo/"
folder_robjs = "../../data/robjects_cache/tmb_results/"
pcawg_labels = read.table("../../data/other/my_pcawg_labels.txt", sep = "\t", stringsAsFactors = FALSE,
header = TRUE)
coefficient_overdispersion = 1000 ## value used in TMB for better convergence
warning('Be careful to use the latest <coefficient_overdispersion> value!')
#-------------------------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------------------------#
count_objects = sapply(list.files(folder_roo, full.names = TRUE), readRDS)
names(count_objects) = gsub("_ROO.RDS", "", list.files(folder_roo))
samples_files = data.frame(do.call('rbind', sapply(gsub("_ROO.RDS", "", list.files("../../data/roo/")),
strsplit, split = "_")))
colnames(samples_files) = c('CT', 'type')
table(samples_files[,1], samples_files[,2])
samples_files2 = samples_files %>% filter(type != "nucleotidesubstitution3")
rownames(samples_files2) = rownames(samples_files)[samples_files$type != "nucleotidesubstitution3"]
#-------------------------------------------------------------------------------------------------#
#----------------------------------------------------------------------------------------------------#
results_TMB_M = lapply( python_like_select(list.files(folder_robjs), "^M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_M) = sapply(python_like_select(list.files(folder_robjs), "^M_"), clean_name)
results_TMB_DM = lapply( python_like_select(list.files(folder_robjs), "^DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_DM) = sapply(python_like_select(list.files(folder_robjs), "^DM_"), clean_name)
results_TMB_DM_dep = lapply( python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"),
function(i) readRDS(paste0("../../data/robjects_cache/tmb_results_dep/", i)))
names(results_TMB_DM_dep) = sapply(python_like_select(list.files("../../data/robjects_cache/tmb_results_dep/"), "^DM_"), clean_name)
results_TMB_LNM = lapply( python_like_select(list.files(folder_robjs), "^LNM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_LNM) = sapply(python_like_select(list.files(folder_robjs), "^LNM_"), clean_name)
results_TMB_fullRE_M = lapply( python_like_select(list.files(folder_robjs), "^fullRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_M) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_M_"), clean_name_fullRE)
full_RE_DM = python_like_select(list.files(folder_robjs), "^fullRE_DM_"); full_RE_DM = full_RE_DM[-grep("_altpar_", full_RE_DM)]
results_TMB_fullRE_DM = lapply( full_RE_DM, function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_fullRE_DM) = sapply(full_RE_DM, clean_name_fullRE)
# results_TMB_fullRE_DM = lapply( python_like_select(list.files(folder_robjs), "^fullRE_DM_altpar_"), function(i) readRDS(paste0(folder_robjs, i)))
# names(results_TMB_fullRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^fullRE_DM_altpar_"), clean_name_fullRE_2)
results_TMB_diagRE_M = lapply( python_like_select(list.files(folder_robjs), "^diagRE_M_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_M) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_M_"), clean_name_fullRE)
results_TMB_diagRE_DM = lapply( python_like_select(list.files(folder_robjs), "^diagRE_DM_"), function(i) readRDS(paste0(folder_robjs, i)))
names(results_TMB_diagRE_DM) = sapply(python_like_select(list.files(folder_robjs), "^diagRE_DM_"), clean_name_fullRE)
#----------------------------------------------------------------------------------------------------#
#----------------------------------------------------------------------------------------------------#
results_TMB_M = results_TMB_M[match(gsub("_", "", names(count_objects)), names(results_TMB_M))]
results_TMB_DM = results_TMB_DM[match(gsub("_", "", names(count_objects)), names(results_TMB_DM))]
results_TMB_LNM = results_TMB_LNM[match(gsub("_", "", names(count_objects)), names(results_TMB_LNM))]
results_TMB_fullRE_M = results_TMB_fullRE_M[match(gsub("_", "", names(count_objects)), names(results_TMB_fullRE_M))]
results_TMB_fullRE_DM = results_TMB_fullRE_DM[match(gsub("_", "", names(count_objects)), names(results_TMB_fullRE_DM))]
results_TMB_diagRE_M = results_TMB_diagRE_M[match(gsub("_", "", names(count_objects)), names(results_TMB_diagRE_M))]
results_TMB_diagRE_DM = results_TMB_diagRE_DM[match(gsub("_", "", names(count_objects)), names(results_TMB_diagRE_DM))]
sapply(list(results_TMB_M, results_TMB_DM, results_TMB_LNM, results_TMB_fullRE_M,
results_TMB_diagRE_M, results_TMB_fullRE_DM, count_objects), length)
#----------------------------------------------------------------------------------------------------#
rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2))
apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var)
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var)
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
rbind(apply(rmultinom(n = 100, size = 20, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 200, prob = c(0.3, 0.5, 0.2)), 1, var),
apply(rmultinom(n = 100, size = 2000, prob = c(0.3, 0.5, 0.2)), 1, var))
count_objects$`Biliary-AdenoCA_nucleotidesubstitution1`
count_objects$`Biliary-AdenoCA_nucleotidesubstitution1`@count_matrices_all
count_objects$`Biliary-AdenoCA_nucleotidesubstitution1`@count_matrices_all
do.call('rbind', count_objects$`Biliary-AdenoCA_nucleotidesubstitution1`@count_matrices_all)
results_TMB_M[[1]])
results_TMB_M[[1]]
results_TMB_M
names(results_TMB_M)
results_TMB_M[['"Biliary-AdenoCAnucleotidesubstitution1"']]
results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]
results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed
python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta')
,
python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random
)
results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random
simulate_from_M_RE(beta_coefs = python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta'),
RE_coefs = results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random)
rowSums(simulate_from_M_RE(beta_coefs = python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta'),
RE_coefs = results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random))
simulate_from_M_RE(beta_coefs = python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta'),
RE_coefs = results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random)
.obs = do.call('rbind', count_objects$`Biliary-AdenoCA_nucleotidesubstitution1`@count_matrices_all)
.obs
rowSums(.obs)
.n = rowSums(.obs)
.theta = simulate_from_M_RE(beta_coefs = python_like_select_name(results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta'),
RE_coefs = results_TMB_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random)
sapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i]) )
lapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i]) )
i=1
lapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i,]) )
.theta
simulate_from_M_RE
results_TMB_fullRE_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random
.theta = simulate_from_M_RE(beta_coefs = python_like_select_name(results_TMB_fullRE_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.fixed, 'beta'),
RE_coefs = results_TMB_fullRE_M[["Biliary-AdenoCAnucleotidesubstitution1"]]$par.random)
.theta
dim(.obs)
sapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i,]) )
t(sapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i,]) ))
.fitted = t(sapply(1:length(.n), function(i) rmultinom(n = 1, size = .n[i], prob = .theta[i,]) ))
.fitted-.obj
.fitted-.obs
par(mfrow=c(1,6))
sapply(1;6, function(cl) (.fitted-.obs)[,cl])
sapply(1:6, function(cl) (.fitted-.obs)[,cl])
par(mfrow=c(1,6))
sapply(1:6, function(cl) plot((.fitted-.obs)[,cl]))
sapply(1:6, function(cl) hist((.fitted-.obs)[,cl]))
.fitted
sapply(1:6, function(cl) mean( (.fitted[,cl]-mean(.fitted[,cl]))**2))
empirical_var_obs = sapply(1:6, function(cl) mean( (.obs[,cl]-mean(.obs[,cl]))**2))
empirical_var_obs
.obs - .fitted
(.obs - .fitted)**2
apply((.obs - .fitted)**2, 2, mean)
.theta
sapply(1:nrow(.theta), function(i), sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i]))  ## expected variances
sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i]))  ## expected variances
t(sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i])))  ## expected variances
(sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i])))  ## expected variances
.theta
.n
dim((sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i]))))
apply(sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i])), 2, mean)  ## expected variances
apply((.obs - .fitted)**2, 2, mean) ## observed variances
apply((.obs - .fitted)**2, 2, mean) ## observed variances
apply(sapply(1:nrow(.theta), function(i) sapply(.theta[i,], function(pi) pi*(1-pi)*.n[i])), 1, mean)  ## expected variances
.obs - .fitted
sapply(1:6, function(cl) hist((.fitted-.obs)[,cl]))
