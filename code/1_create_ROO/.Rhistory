medianLeft = median(bsmHNA[chrNonHomoProbesStartWindowLeft[probeNr]:chrNonHomoProbesEndWindowLeft[probeNr]], na.rm=T)
}
medianLeft
!is.na(chrNonHomoProbesStartWindowLeft[probeNr])&!is.na(chrNonHomoProbesEndWindowLeft[probeNr])
chrNonHomoProbesStartWindowLeft[probeNr]
(chrNonHomoProbesEndWindowLeft[probeNr]
)
chrNonHomoProbes
chrNonHomoProbesStartWindowLeft[probeNr]
chrNonHomoProbesStartWindowLeft
chrLowestDist
# there must be a minimum number of probes on the chromosome, otherwise these are called homozygous anyway
if (length(chrNonHomoProbes)>5) {
#make sure we're not going over any borders..
segmentLength2 = min(length(chrNonHomoProbes)-1,segmentLength)
chrNonHomoProbesStartWindowLeft = c(rep(NA,segmentLength2),chrNonHomoProbes[1:(length(chrNonHomoProbes)-segmentLength2)])
chrNonHomoProbesEndWindowLeft = c(NA,chrNonHomoProbes[1:(length(chrNonHomoProbes)-1)])
chrNonHomoProbesStartWindowRight = c(chrNonHomoProbes[2:length(chrNonHomoProbes)],NA)
chrNonHomoProbesEndWindowRight = c(chrNonHomoProbes[(segmentLength2+1):length(chrNonHomoProbes)],rep(NA,segmentLength2))
chrNonHomoProbesStartWindowMiddle = c(rep(NA,segmentLength2/2),chrNonHomoProbes[1:(length(chrNonHomoProbes)-segmentLength2/2)])
chrNonHomoProbesEndWindowMiddle = c(chrNonHomoProbes[(segmentLength2/2+1):length(chrNonHomoProbes)],rep(NA,segmentLength2/2))
chrLowestDist = NULL
for (probeNr in 1:length(chrNonHomoProbes)) {
probe = chrNonHomoProbes[probeNr]
if(!is.na(chrNonHomoProbesStartWindowLeft[probeNr])&!is.na(chrNonHomoProbesEndWindowLeft[probeNr])) {
medianLeft = median(bsmHNA[chrNonHomoProbesStartWindowLeft[probeNr]:chrNonHomoProbesEndWindowLeft[probeNr]], na.rm=T)
}
else {
medianLeft = NA
}
if(!is.na(chrNonHomoProbesStartWindowRight[probeNr])&!is.na(chrNonHomoProbesEndWindowRight[probeNr])) {
medianRight = median(bsmHNA[chrNonHomoProbesStartWindowRight[probeNr]:chrNonHomoProbesEndWindowRight[probeNr]], na.rm=T)
}
else {
medianRight = NA
}
if(!is.na(chrNonHomoProbesStartWindowMiddle[probeNr])&!is.na(chrNonHomoProbesEndWindowMiddle[probeNr])) {
medianMiddle = median(c(bsmHNA[chrNonHomoProbesStartWindowMiddle[probeNr]:chrNonHomoProbesEndWindowLeft[probeNr]],
bsmHNA[chrNonHomoProbesStartWindowRight[probeNr]:chrNonHomoProbesEndWindowMiddle[probeNr]]), na.rm=T)
}
else {
medianMiddle = NA
}
chrLowestDist[probeNr] = min(abs(medianLeft-bsm[probe]),abs(medianRight-bsm[probe]),abs(medianMiddle-bsm[probe]),Inf,na.rm=T)
}
}
chrLowestDist
bsm[probe]
medianLeft
chrLowestDist
lowestDist
lowestDistUndecided = lowestDist[is.na(Hom[nonHomoProbes])]
lowestDist = c(lowestDist,chrLowestDist)
lowestDist = NULL
lowestDist = c(lowestDist,chrLowestDist)
lowestDistUndecided = lowestDist[is.na(Hom[nonHomoProbes])]
lowestDistUndecided
chrNonHomoProbesStartWindowLeft
chrNonHomoProbesStartWindowRight
tail(chrNonHomoProbesStartWindowRight)
tail(chrNonHomoProbesEndWindowRight)
tail(chrNonHomoProbesEndWindowRight, n = 200)
chrNonHomoProbesEndWindowLeft
par(mfrow=c(1,6))
plot(chrNonHomoProbesStartWindowLeft)
par(mfrow=c(6,1))
plot(chrNonHomoProbesStartWindowLeft)
plot(chrNonHomoProbesStartWindowLeft)
chrNonHomoProbesStartWindowLeft
dev.off()
pdf("~/Desktop/windows.pdf")
par(mfrow=c(6,1))
plot(chrNonHomoProbesStartWindowLeft)
plot(chrNonHomoProbesEndWindowLeft)
plot(chrNonHomoProbesStartWindowRight)
plot(chrNonHomoProbesEndWindowRight)
plot(chrNonHomoProbesStartWindowMiddle)
dev.off)
dev.off())
dev.off()
dev.off()
pdf("~/Desktop/windows.pdf", width = 20)
par(mfrow=c(6,1))
plot(chrNonHomoProbesStartWindowLeft)
dev.off()
pdf("~/Desktop/windows.pdf", width = 7)
par(mfrow=c(6,1))
plot(chrNonHomoProbesStartWindowLeft)
pdf("~/Desktop/windows.pdf", width = 7)
par(mfrow=c(3,2))
plot(chrNonHomoProbesStartWindowLeft)
plot(chrNonHomoProbesEndWindowLeft)
plot(chrNonHomoProbesStartWindowRight)
plot(chrNonHomoProbesEndWindowRight)
plot(chrNonHomoProbesStartWindowMiddle)
plot(chrNonHomoProbesEndWindowMiddle)
dev.off()
chrNonHomoProbesStartWindowLeft
ifelse(is.na(chrNonHomoProbesStartWindowLeft), 0, 1)
pdf("~/Desktop/windows.pdf", width = 7)
par(mfrow=c(3,2))
# plot(chrNonHomoProbesStartWindowLeft)
plot(ifelse(is.na(chrNonHomoProbesStartWindowLeft), 0, 1))
plot(chrNonHomoProbesEndWindowLeft)
plot(chrNonHomoProbesStartWindowRight)
plot(chrNonHomoProbesEndWindowRight)
plot(chrNonHomoProbesStartWindowMiddle)
plot(chrNonHomoProbesEndWindowMiddle)
dev.off()
dev.off()
dev.off()
pdf("~/Desktop/windows.pdf", width = 7)
par(mfrow=c(3,2))
# plot(chrNonHomoProbesStartWindowLeft)
plot(ifelse(is.na(chrNonHomoProbesStartWindowLeft), 0, 1))
plot(chrNonHomoProbesEndWindowLeft)
plot(chrNonHomoProbesStartWindowRight)
plot(chrNonHomoProbesEndWindowRight)
plot(chrNonHomoProbesStartWindowMiddle)
plot(chrNonHomoProbesEndWindowMiddle)
dev.off()
dev.off()
pdf("~/Desktop/windows.pdf", width = 7)
par(mfrow=c(3,2))
# plot(chrNonHomoProbesStartWindowLeft)
plot(ifelse(is.na(chrNonHomoProbesStartWindowLeft), 0, 1))
# plot(chrNonHomoProbesEndWindowLeft)
plot(ifelse(is.na(chrNonHomoProbesEndWindowLeft), 0, 1))
# plot(chrNonHomoProbesStartWindowRight)
plot(ifelse(is.na(chrNonHomoProbesStartWindowRight), 0, 1))
# plot(chrNonHomoProbesEndWindowRight)
plot(ifelse(is.na(chrNonHomoProbesEndWindowRight), 0, 1))
# plot(chrNonHomoProbesStartWindowMiddle)
plot(ifelse(is.na(chrNonHomoProbesStartWindowMiddle), 0, 1))
# plot(chrNonHomoProbesEndWindowMiddle)
plot(ifelse(is.na(chrNonHomoProbesEndWindowMiddle), 0, 1))
dev.off()
savefolder_features = "/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ROO_PCAWG/clonal_subclonal_features1_ROO/" ## cruk laptop
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
opt=list()
library(rstan)
library(clusterGeneration) ## for sampling covariance matrix sigma
library(uuid)
library(optparse)
source("helper_DA_stan.R")
savefolder_features = "/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ROO_PCAWG/clonal_subclonal_features1_ROO/" ## cruk laptop
opt=list()savefolder_features
savefolder_features
opt$cancer_type == "BLCA-US
""
"
opt$cancer_type == "BLCA-US"
opt$type_data = "features1"
opt$cancer_type = "BLCA-US"
opt$type_data = "features1"
if(opt$type_data == "features1"){
savefolder_features = "/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ROO_PCAWG/clonal_subclonal_features1_ROO/" ## cruk laptop
}
objects_sigs_per_CT_features <- list()
fle <- paste0(savefolder_features,
opt$cancer_type[opt$cancer_type], '_ROOSigs.RDS')
fle
if(file.exists(fle)){
objects_sigs_per_CT_features <- readRDS(fle)
}else{
cat('Object for cancer type', opt$cancer_type, 'was not found')
}
paste0(savefolder_features,
opt$cancer_type[opt$cancer_type], '_ROOSigs.RDS')
opt$cancer_type
fle <- paste0(savefolder_features, opt$cancer_type, '_ROOSigs.RDS')
fle
if(file.exists(fle)){
objects_sigs_per_CT_features <- readRDS(fle)
}else{
cat('Object for cancer type', opt$cancer_type, 'was not found')
}
objects_sigs_per_CT_features
model_file_name_LNM_ME = "stan_logistic_normal_multinomial_ME.stan"
stanc(model_file_name_LNM_ME)
objects_sigs_per_CT_features
attr(,"count_matrices_all")
attr(objects_sigs_per_CT_features,"count_matrices_all")
objects_sigs_per_CT_features = attr(objects_sigs_per_CT_features,"count_matrices_all")
d = ncol(objects_sigs_per_CT_features[[1]]) ## number of signatures
d
n = nrow(objects_sigs_per_CT_features) ## number of samples
n
n = nrow(objects_sigs_per_CT_features[[1]]) ## number of samples
n
# covariate matrix
X_sim = matrix(NA, nrow=2, ncol=2*n)
X_sim[1,] = 1
X_sim[2,] = rep(c(0,1), each=n)
X_sim
Z_sim0 = matrix(0, nrow=n, ncol=n)
diag(Z_sim0) = 1
Z_sim = t(rbind(Z_sim0, Z_sim0))
Z_sim
rbind(objects_sigs_per_CT_features[[1]], objects_sigs_per_CT_features[[2]])
dim9rbind(objects_sigs_per_CT_features[[1]], objects_sigs_per_CT_features[[2]])
dim(rbind(objects_sigs_per_CT_features[[1]], objects_sigs_per_CT_features[[2]]))
n
paste0("../../../out/DA_stan/LNM_PCAWG_", opt$type_data, '_', opt$cancer_type, '_',
uuid::UUIDgenerate(), ".Rdata")
library(rstan)
library(clusterGeneration) ## for sampling covariance matrix sigma
library(uuid)
library(optparse)
source("helper/helper_DA_stan.R")
opt=list(); opt$cancer_type = "UCEC-US"; opt$type_data = "signatures"; opt$type_split_into_groups = "subclonalPCAWG"
model_file_name_DM = "stan_dirichlet_multinomial_ME_new.stan"
stanc(model_file_name_DM)
Nits = 15000
source("helper/header_load_ROO.R")
d = ncol(objects_sigs_per_CT_features[[1]]) ## number of signatures or features
d
n = nrow(objects_sigs_per_CT_features[[1]]) ## number of samples
# covariate matrix
X = matrix(NA, nrow=2, ncol=2*n)
X[1,] = 1
X[2,] = rep(c(0,1), each=n)
Z0 = matrix(0, nrow=n, ncol=n)
diag(Z0) = 1
Z = t(rbind(Z0, Z0))
## The counts
W = rbind(objects_sigs_per_CT_features[[1]], objects_sigs_per_CT_features[[2]])
W
## For the samples for which there is a clear clonal-subclonal structure, split them into clonal vs subclonal
# rm(list = ls())
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Sys.setenv(LANG='en')
library(R.utils)
library(optparse)
source("helper_1_create_ROO.R")
option_list = list(
make_option(c("--cancer_type"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--feature_type"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--output"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--pcawg_data"), type="character", default=NA,
help="", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
rm(list = ls())
## For the samples for which there is a clear clonal-subclonal structure, split them into clonal vs subclonal
# rm(list = ls())
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Sys.setenv(LANG='en')
library(R.utils)
library(optparse)
source("helper_1_create_ROO.R")
option_list = list(
make_option(c("--cancer_type"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--feature_type"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--output"), type="character", default=NA,
help="", metavar="character"),
make_option(c("--pcawg_data"), type="character", default=NA,
help="", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
opt=list(); opt$pcawg_data="../../data/restricted/pcawg/pcawg.wg11.final_sample_list_MARCH2019.txt"; opt$cancer_type="Kidney-RCC.clearcell"; opt$feature_type="features1"; opt$output="../../data/roo/Kidney-RCC.clearcell_features1_ROO.RDS"
flder_clonal = "../../data/restricted/pcawg/consensus_subclonal_reconstruction_20170325/"
flder_vcf = "../../data/restricted/pcawg/pcawg_restricted_snv_counts/"
fles_vcf = list.files(flder_vcf)
## Run this for each cancer type separately
#("../../data/restricted/pcawg/pcawg.wg11.final_sample_list_MARCH2019.txt"
pcawg_data <- read.table(opt$pcawg_data,
stringsAsFactors = FALSE, sep = '\t', header = T)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
flder_clonal = "../../data/restricted/pcawg/consensus_subclonal_reconstruction_20170325/"
flder_vcf = "../../data/restricted/pcawg/pcawg_restricted_snv_counts/"
fles_vcf = list.files(flder_vcf)
## Run this for each cancer type separately
pcawg_data <- read.table(opt$pcawg_data,
stringsAsFactors = FALSE, sep = '\t', header = T)
pcawg_data <- pcawg_data[!duplicated(pcawg_data$samplename),]
all_files = (list.files("~/Documents/PhD/CDA_in_Cancer/data/pcawg/consensus_subclonal_reconstruction_20170325/"))
all_files = subset(all_files, grepl('cluster_assignments', all_files))
pcawg_data_ibj2 = as.vector(sapply(pcawg_data$samplename, function(i) paste0(strsplit(i, '[.]')[[1]][1], collapse="-")))
mrdge = match(gsub("_cluster_assignments.txt.gz", "", all_files), pcawg_data_ibj2)
pcawg_data = pcawg_data[!is.na(mrdge),]
pcawg_data <- pcawg_data[order(pcawg_data$histology_detailed),]
type_features_vec = c('nucleotide_substitution1', 'nucleotide_substitution3', 'signatures')
pcawg_data_subset = subset(pcawg_data, pcawg_data$histology_detailed == opt$cancer_type)
pcawg_data_ibj2 = as.vector(sapply(pcawg_data_subset$samplename, function(i) paste0(strsplit(i, '[.]')[[1]][1], collapse="-")))
fles_cancer_type = all_files[match( pcawg_data_ibj2, gsub("_cluster_assignments.txt.gz", "", all_files))]
fles_cancer_type = fles_cancer_type[!is.na(fles_cancer_type)]
rds_object = list()
rds_object[[type_features_vec[1]]] = list()
rds_object[[type_features_vec[2]]] = list()
rds_object[[type_features_vec[3]]] = list()
rds_object[['active_sigs']] = list()
failed_name_files= c()
if(length(fles_cancer_type) == 0){
stop()
}
fles_cancer_type
for(name_file in fles_cancer_type){
## first, read in the clonal deconvolution files from PCAWG
## then, create the ROO objects with the existing function createRDS_ROOSigs
gunzip(paste0(flder_clonal,name_file ))                              ## unzip
filename_unzipped = paste0(flder_clonal, gsub(".gz", "", name_file))
clonal_file = read.table(filename_unzipped, header = TRUE)
gzip(filename_unzipped)                                              ## zip again
raw_name = gsub('_cluster_assignments.txt', '', basename(filename_unzipped))
VAF_CCF_filename = fles_vcf[grep(raw_name, fles_vcf)]
if(length(VAF_CCF_filename) == 0){
## no VAF file found.
cat('File ', raw_name, '(cancer type=',opt$cancer_type, ') does not have a VCF file')
failed_name_files = c(failed_name_files, name_file)
break
}
name_file_vcf = paste0(flder_vcf, VAF_CCF_filename)
VAF_CCF_file = read.table(name_file_vcf, sep = "\t", header = TRUE)
## merge
merged = merge(clonal_file, VAF_CCF_file, by.x=c("chromosome", "position"), by.y=c("chromosome", "position"))
merged[,'bool_group_1'] = merged$cluster_1 > 0.5
merged = merged[!(is.na(merged[,'bool_group_1'])),]
## now split with the posterior of cluster_1 vs cluster_2, and get in the same format has before
in_dataframe=merged
## Read in the cancer types
# opt$cancer_type = pcawg_data[grep(gsub('.cluster_assignments.txt.gz', '', name_file), pcawg_data$File.Name),'Project']
###################################################################################################
#### Split mutations into groups (e.g. clonal and subclonal), and save as RDS (or return file) ####
###################################################################################################
cat('Getting RDS object for file ', name_file)
.tmp_roo_obj = lapply(type_features_vec, function(type_features_it){
createRDS_ROOSigs_object(pre_path="",
vcf_path="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
path_save=NA,
ccf_threshold=NA,
type_features=type_features_it,
save=FALSE,
outfiles=NULL, ## don't say which files these are
outfolder="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
active_sigs_version="active_signatures_transposed.txt",
setting_reading_in="from_dataframe",
cancer_type=strsplit(opt$cancer_type, '-')[[1]][1],
in_dataframe=merged)})
if(is.null(.tmp_roo_obj[[3]])){
## There are no signatures, because of a problem
.tmp_roo_obj[[3]] = list(list(list(), list()), list(list(), list()))
}
## if one category only has zeros, don't return
if(any(sapply(.tmp_roo_obj[[1]], sum) == 0)){
failed_name_files = c(failed_name_files, name_file)
break
}
cat('Getting RDS object for file ', name_file, 'done')
rds_object[[type_features_vec[1]]][[name_file]] = .tmp_roo_obj[[1]] ## this is a list of 2
rds_object[[type_features_vec[2]]][[name_file]] = .tmp_roo_obj[[2]] ## this is a list of 2
rds_object[[type_features_vec[3]]][[name_file]] = .tmp_roo_obj[[3]][[1]] ## this is a list of 2 of 2 lists, subsetted
rds_object[['active_sigs']][[name_file]] = .tmp_roo_obj[[3]][[2]] ## this is a list of 2 of 2 lists, subsetted
}
for(name_file in fles_cancer_type){
## first, read in the clonal deconvolution files from PCAWG
## then, create the ROO objects with the existing function createRDS_ROOSigs
gunzip(paste0(flder_clonal,name_file ))                              ## unzip
filename_unzipped = paste0(flder_clonal, gsub(".gz", "", name_file))
clonal_file = read.table(filename_unzipped, header = TRUE)
gzip(filename_unzipped)                                              ## zip again
raw_name = gsub('_cluster_assignments.txt', '', basename(filename_unzipped))
VAF_CCF_filename = fles_vcf[grep(raw_name, fles_vcf)]
if(length(VAF_CCF_filename) == 0){
## no VAF file found.
cat('File ', raw_name, '(cancer type=',opt$cancer_type, ') does not have a VCF file')
failed_name_files = c(failed_name_files, name_file)
next
}
name_file_vcf = paste0(flder_vcf, VAF_CCF_filename)
VAF_CCF_file = read.table(name_file_vcf, sep = "\t", header = TRUE)
## merge
merged = merge(clonal_file, VAF_CCF_file, by.x=c("chromosome", "position"), by.y=c("chromosome", "position"))
merged[,'bool_group_1'] = merged$cluster_1 > 0.5
merged = merged[!(is.na(merged[,'bool_group_1'])),]
## now split with the posterior of cluster_1 vs cluster_2, and get in the same format has before
in_dataframe=merged
## Read in the cancer types
# opt$cancer_type = pcawg_data[grep(gsub('.cluster_assignments.txt.gz', '', name_file), pcawg_data$File.Name),'Project']
###################################################################################################
#### Split mutations into groups (e.g. clonal and subclonal), and save as RDS (or return file) ####
###################################################################################################
cat('Getting RDS object for file ', name_file)
.tmp_roo_obj = lapply(type_features_vec, function(type_features_it){
createRDS_ROOSigs_object(pre_path="",
vcf_path="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
path_save=NA,
ccf_threshold=NA,
type_features=type_features_it,
save=FALSE,
outfiles=NULL, ## don't say which files these are
outfolder="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
active_sigs_version="active_signatures_transposed.txt",
setting_reading_in="from_dataframe",
cancer_type=strsplit(opt$cancer_type, '-')[[1]][1],
in_dataframe=merged)})
if(is.null(.tmp_roo_obj[[3]])){
## There are no signatures, because of a problem
.tmp_roo_obj[[3]] = list(list(list(), list()), list(list(), list()))
}
## if one category only has zeros, don't return
if(any(sapply(.tmp_roo_obj[[1]], sum) == 0)){
failed_name_files = c(failed_name_files, name_file)
next
}
cat('Getting RDS object for file ', name_file, 'done')
rds_object[[type_features_vec[1]]][[name_file]] = .tmp_roo_obj[[1]] ## this is a list of 2
rds_object[[type_features_vec[2]]][[name_file]] = .tmp_roo_obj[[2]] ## this is a list of 2
rds_object[[type_features_vec[3]]][[name_file]] = .tmp_roo_obj[[3]][[1]] ## this is a list of 2 of 2 lists, subsetted
rds_object[['active_sigs']][[name_file]] = .tmp_roo_obj[[3]][[2]] ## this is a list of 2 of 2 lists, subsetted
}
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
Sys.setenv(LANG='en')
library(R.utils)
library(optparse)
source("helper_1_create_ROO.R")
opt=list(); opt$pcawg_data="../../data/restricted/pcawg/pcawg.wg11.final_sample_list_MARCH2019.txt"; opt$cancer_type="Kidney-RCC.clearcell"; opt$feature_type="features1"; opt$output="../../data/roo/Kidney-RCC.clearcell_features1_ROO.RDS"
flder_clonal = "../../data/restricted/pcawg/consensus_subclonal_reconstruction_20170325/"
flder_vcf = "../../data/restricted/pcawg/pcawg_restricted_snv_counts/"
fles_vcf = list.files(flder_vcf)
## Run this for each cancer type separately
pcawg_data <- read.table(opt$pcawg_data,
stringsAsFactors = FALSE, sep = '\t', header = T)
pcawg_data <- pcawg_data[!duplicated(pcawg_data$samplename),]
all_files = (list.files("~/Documents/PhD/CDA_in_Cancer/data/pcawg/consensus_subclonal_reconstruction_20170325/"))
all_files = subset(all_files, grepl('cluster_assignments', all_files))
pcawg_data_ibj2 = as.vector(sapply(pcawg_data$samplename, function(i) paste0(strsplit(i, '[.]')[[1]][1], collapse="-")))
mrdge = match(gsub("_cluster_assignments.txt.gz", "", all_files), pcawg_data_ibj2)
pcawg_data = pcawg_data[!is.na(mrdge),]
pcawg_data <- pcawg_data[order(pcawg_data$histology_detailed),]
type_features_vec = c('nucleotide_substitution1', 'nucleotide_substitution3', 'signatures')
pcawg_data_subset = subset(pcawg_data, pcawg_data$histology_detailed == opt$cancer_type)
pcawg_data_ibj2 = as.vector(sapply(pcawg_data_subset$samplename, function(i) paste0(strsplit(i, '[.]')[[1]][1], collapse="-")))
fles_cancer_type = all_files[match( pcawg_data_ibj2, gsub("_cluster_assignments.txt.gz", "", all_files))]
fles_cancer_type = fles_cancer_type[!is.na(fles_cancer_type)]
rds_object = list()
rds_object[[type_features_vec[1]]] = list()
rds_object[[type_features_vec[2]]] = list()
rds_object[[type_features_vec[3]]] = list()
rds_object[['active_sigs']] = list()
failed_name_files= c()
if(length(fles_cancer_type) == 0){
stop()
}
for(name_file in fles_cancer_type){
## first, read in the clonal deconvolution files from PCAWG
## then, create the ROO objects with the existing function createRDS_ROOSigs
gunzip(paste0(flder_clonal,name_file ))                              ## unzip
filename_unzipped = paste0(flder_clonal, gsub(".gz", "", name_file))
clonal_file = read.table(filename_unzipped, header = TRUE)
gzip(filename_unzipped)                                              ## zip again
raw_name = gsub('_cluster_assignments.txt', '', basename(filename_unzipped))
VAF_CCF_filename = fles_vcf[grep(raw_name, fles_vcf)]
if(length(VAF_CCF_filename) == 0){
## no VAF file found.
cat('File ', raw_name, '(cancer type=',opt$cancer_type, ') does not have a VCF file')
failed_name_files = c(failed_name_files, name_file)
next
}
name_file_vcf = paste0(flder_vcf, VAF_CCF_filename)
VAF_CCF_file = read.table(name_file_vcf, sep = "\t", header = TRUE)
## merge
merged = merge(clonal_file, VAF_CCF_file, by.x=c("chromosome", "position"), by.y=c("chromosome", "position"))
merged[,'bool_group_1'] = merged$cluster_1 > 0.5
merged = merged[!(is.na(merged[,'bool_group_1'])),]
## now split with the posterior of cluster_1 vs cluster_2, and get in the same format has before
in_dataframe=merged
## Read in the cancer types
# opt$cancer_type = pcawg_data[grep(gsub('.cluster_assignments.txt.gz', '', name_file), pcawg_data$File.Name),'Project']
###################################################################################################
#### Split mutations into groups (e.g. clonal and subclonal), and save as RDS (or return file) ####
###################################################################################################
cat('Getting RDS object for file ', name_file)
.tmp_roo_obj = lapply(type_features_vec, function(type_features_it){
createRDS_ROOSigs_object(pre_path="",
vcf_path="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
path_save=NA,
ccf_threshold=NA,
type_features=type_features_it,
save=FALSE,
outfiles=NULL, ## don't say which files these are
outfolder="/Users/morril01/Documents/PhD/CDA_in_Cancer/out/ProjectSubtractingExposures/",
active_sigs_version="active_signatures_transposed.txt",
setting_reading_in="from_dataframe",
cancer_type=strsplit(opt$cancer_type, '-')[[1]][1],
in_dataframe=merged)})
if(is.null(.tmp_roo_obj[[3]])){
## There are no signatures, because of a problem
.tmp_roo_obj[[3]] = list(list(list(), list()), list(list(), list()))
}
## if one category only has zeros, don't return
if(any(sapply(.tmp_roo_obj[[1]], sum) == 0)){
failed_name_files = c(failed_name_files, name_file)
next
}
cat('Getting RDS object for file ', name_file, 'done')
rds_object[[type_features_vec[1]]][[name_file]] = .tmp_roo_obj[[1]] ## this is a list of 2
rds_object[[type_features_vec[2]]][[name_file]] = .tmp_roo_obj[[2]] ## this is a list of 2
rds_object[[type_features_vec[3]]][[name_file]] = .tmp_roo_obj[[3]][[1]] ## this is a list of 2 of 2 lists, subsetted
rds_object[['active_sigs']][[name_file]] = .tmp_roo_obj[[3]][[2]] ## this is a list of 2 of 2 lists, subsetted
}
names(rds_object[[type_features_vec_it]])
