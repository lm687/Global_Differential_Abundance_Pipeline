Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.19.3, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: coda

Attaching package: ‘coda’

The following object is masked from ‘package:rstan’:

    traceplot

Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2020 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: ‘plyr’

The following objects are masked from ‘package:dplyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize


Attaching package: ‘CompSign’

The following object is masked from ‘package:plyr’:

    summarise

The following object is masked from ‘package:dplyr’:

    summarise

[1] "../data/inference/Kidney-RCC.clearcell_signatures_20000_LNMROO.RData"
[2] "../data/inference/Kidney-RCC.clearcell_signatures_20000_DMROO.RData" 
[3] "../data/inference/Kidney-RCC.clearcell_signatures_20000_MROO.RData"  
Arguments read[1] "../data/inference/Kidney-RCC.clearcell_signatures_20000_LNMROO.RData"
[2] "../data/inference/Kidney-RCC.clearcell_signatures_20000_DMROO.RData" 
[3] "../data/inference/Kidney-RCC.clearcell_signatures_20000_MROO.RData"  
     ../data/inference/Kidney-RCC.clearcell_signatures_20000_LNMROO.RData
[1,] "../data/inference/Kidney-RCC.clearcell"                            
[2,] "signatures"                                                        
[3,] "20000"                                                             
[4,] "LNMROO.RData"                                                      
     ../data/inference/Kidney-RCC.clearcell_signatures_20000_DMROO.RData
[1,] "../data/inference/Kidney-RCC.clearcell"                           
[2,] "signatures"                                                       
[3,] "20000"                                                            
[4,] "DMROO.RData"                                                      
     ../data/inference/Kidney-RCC.clearcell_signatures_20000_MROO.RData
[1,] "../data/inference/Kidney-RCC.clearcell"                          
[2,] "signatures"                                                      
[3,] "20000"                                                           
[4,] "MROO.RData"                                                      
[1] "../data/roo/Kidney-RCC.clearcell_signatures_ROO.RDS"
List object objects_sigs_per_CT loaded
[1] "../data/inference/Kidney-RCC.clearcell_signatures_20000_LNMROO.RData"
Stan model 'stan_LNM_ME' does not contain samples.
[1] "../data/inference/Kidney-RCC.clearcell_signatures_20000_DMROO.RData"
[1] "../data/inference/Kidney-RCC.clearcell_signatures_20000_MROO.RData"
[1] 172
Error in plot.window(...) : need finite 'xlim' values
Calls: pairs ... localPlot -> plot -> plot.default -> localWindow -> plot.window
In addition: Warning messages:
1: In if (is.na(i)) { :
  the condition has length > 1 and only the first element will be used
2: In if (is.na(i)) { :
  the condition has length > 1 and only the first element will be used
3: In if (is.na(i)) { :
  the condition has length > 1 and only the first element will be used
4: In if (is.na(i)) { :
  the condition has length > 1 and only the first element will be used
5: In min(x) : no non-missing arguments to min; returning Inf
6: In max(x) : no non-missing arguments to max; returning -Inf
7: In min(x) : no non-missing arguments to min; returning Inf
8: In max(x) : no non-missing arguments to max; returning -Inf
Execution halted
